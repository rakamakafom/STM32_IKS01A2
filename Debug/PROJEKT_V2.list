
PROJEKT_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800668c  0800668c  0001668c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066ec  080066ec  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f4  080066f4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f4  080066f4  000166f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080066fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000078  08006774  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08006774  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0b0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f46  00000000  00000000  0002e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  000300a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  00030bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172ab  00000000  00000000  00031610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eedc  00000000  00000000  000488bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f525  00000000  00000000  00057797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6cbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003180  00000000  00000000  000e6d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006674 	.word	0x08006674

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006674 	.word	0x08006674

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fdcb 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f919 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 fa1f 	bl	80009d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000596:	f000 f9fd 	bl	8000994 <MX_DMA_Init>
  MX_I2C1_Init();
 800059a:	f000 f97d 	bl	8000898 <MX_I2C1_Init>
  MX_RTC_Init();
 800059e:	f000 f9a9 	bl	80008f4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f9cd 	bl	8000940 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Read WHOAMI for HTS221 - temperature, humidity
      HAL_I2C_Mem_Read(&hi2c1, HTS221_ADR, HTS221_ADR_WHO_AM_I,1, &HTS221_WHOAMI_buf, 1, 5);
 80005a6:	2305      	movs	r3, #5
 80005a8:	9302      	str	r3, [sp, #8]
 80005aa:	2301      	movs	r3, #1
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4b6f      	ldr	r3, [pc, #444]	; (800076c <main+0x1e8>)
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2301      	movs	r3, #1
 80005b4:	220f      	movs	r2, #15
 80005b6:	21be      	movs	r1, #190	; 0xbe
 80005b8:	486d      	ldr	r0, [pc, #436]	; (8000770 <main+0x1ec>)
 80005ba:	f001 fef1 	bl	80023a0 <HAL_I2C_Mem_Read>
    //Read WHOAMI for LSM6DSL -  accelerometer,  gyroscope
      HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_ADR, LSM6DSL_ADR_WHOAMI, 1, &LSM6DSL_WHOAMI_buf, 1, 5);
 80005be:	2305      	movs	r3, #5
 80005c0:	9302      	str	r3, [sp, #8]
 80005c2:	2301      	movs	r3, #1
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	4b6b      	ldr	r3, [pc, #428]	; (8000774 <main+0x1f0>)
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	220f      	movs	r2, #15
 80005ce:	21d6      	movs	r1, #214	; 0xd6
 80005d0:	4867      	ldr	r0, [pc, #412]	; (8000770 <main+0x1ec>)
 80005d2:	f001 fee5 	bl	80023a0 <HAL_I2C_Mem_Read>
  	  //Read WHOAMI for LSM303AGR - accelerometer
  		HAL_I2C_Mem_Read(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_ADR_WHOAMI_ACCE, 1, &LSM303AGR_ACCE_WHOAMI_buff, 1, 5);
 80005d6:	2305      	movs	r3, #5
 80005d8:	9302      	str	r3, [sp, #8]
 80005da:	2301      	movs	r3, #1
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	4b66      	ldr	r3, [pc, #408]	; (8000778 <main+0x1f4>)
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	220f      	movs	r2, #15
 80005e6:	2132      	movs	r1, #50	; 0x32
 80005e8:	4861      	ldr	r0, [pc, #388]	; (8000770 <main+0x1ec>)
 80005ea:	f001 fed9 	bl	80023a0 <HAL_I2C_Mem_Read>
  	  //Read WHOAMI for LSM303AGR - gyroscope
  		HAL_I2C_Mem_Read(&hi2c1, LSM303AGR_ADR_GYRO, LSM303AGR_ADR_WHOAMI_GYRO, 1, &LSM303AGR_GYRO_WHOAMI_buff, 1, 5);
 80005ee:	2305      	movs	r3, #5
 80005f0:	9302      	str	r3, [sp, #8]
 80005f2:	2301      	movs	r3, #1
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	4b61      	ldr	r3, [pc, #388]	; (800077c <main+0x1f8>)
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2301      	movs	r3, #1
 80005fc:	224f      	movs	r2, #79	; 0x4f
 80005fe:	213c      	movs	r1, #60	; 0x3c
 8000600:	485b      	ldr	r0, [pc, #364]	; (8000770 <main+0x1ec>)
 8000602:	f001 fecd 	bl	80023a0 <HAL_I2C_Mem_Read>
    //Read WHOAMI for LPS22HB MEMS pressure sensor, 260-1260 hPa absolute digital output barometer
      HAL_I2C_Mem_Read(&hi2c1, LPS22HB_ADR, LPS22HB_ADR_WHOAMI, 1, &LPS22HB_WHOAMI_buf, 1, 50);
 8000606:	2332      	movs	r3, #50	; 0x32
 8000608:	9302      	str	r3, [sp, #8]
 800060a:	2301      	movs	r3, #1
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4b5c      	ldr	r3, [pc, #368]	; (8000780 <main+0x1fc>)
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2301      	movs	r3, #1
 8000614:	220f      	movs	r2, #15
 8000616:	21ba      	movs	r1, #186	; 0xba
 8000618:	4855      	ldr	r0, [pc, #340]	; (8000770 <main+0x1ec>)
 800061a:	f001 fec1 	bl	80023a0 <HAL_I2C_Mem_Read>

    //LSM6DSL SET REGISTER
      HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_ADR, LSM6DSL_ADR_CTRL1_XL, 1, &LSM6DSL_CTRL1_XL, 1, 50);
 800061e:	2332      	movs	r3, #50	; 0x32
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2301      	movs	r3, #1
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	4b57      	ldr	r3, [pc, #348]	; (8000784 <main+0x200>)
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2301      	movs	r3, #1
 800062c:	2210      	movs	r2, #16
 800062e:	21d6      	movs	r1, #214	; 0xd6
 8000630:	484f      	ldr	r0, [pc, #316]	; (8000770 <main+0x1ec>)
 8000632:	f001 fdbb 	bl	80021ac <HAL_I2C_Mem_Write>

    //LSM303AGR SET REGISTER
      HAL_I2C_Mem_Write(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_TEMP_CFG_REG_A, 1, &LSM303AGR_TEMP_CFG_REG_A_settings, 1, 5); //ON TEMPERATURE
 8000636:	2305      	movs	r3, #5
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	2301      	movs	r3, #1
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4b52      	ldr	r3, [pc, #328]	; (8000788 <main+0x204>)
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	221f      	movs	r2, #31
 8000646:	2132      	movs	r1, #50	; 0x32
 8000648:	4849      	ldr	r0, [pc, #292]	; (8000770 <main+0x1ec>)
 800064a:	f001 fdaf 	bl	80021ac <HAL_I2C_Mem_Write>
      HAL_I2C_Mem_Write(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_CTRL_REG2_A, 1, &LSM303AGR_CTRL_REG2_A_settings, 1, 5);
 800064e:	2305      	movs	r3, #5
 8000650:	9302      	str	r3, [sp, #8]
 8000652:	2301      	movs	r3, #1
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	4b4d      	ldr	r3, [pc, #308]	; (800078c <main+0x208>)
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2301      	movs	r3, #1
 800065c:	2221      	movs	r2, #33	; 0x21
 800065e:	2132      	movs	r1, #50	; 0x32
 8000660:	4843      	ldr	r0, [pc, #268]	; (8000770 <main+0x1ec>)
 8000662:	f001 fda3 	bl	80021ac <HAL_I2C_Mem_Write>
      HAL_I2C_Mem_Write(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_CTRL_REG3_A, 1, &LSM303AGR_CTRL_REG3_A_settings, 1, 5);
 8000666:	2305      	movs	r3, #5
 8000668:	9302      	str	r3, [sp, #8]
 800066a:	2301      	movs	r3, #1
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	4b48      	ldr	r3, [pc, #288]	; (8000790 <main+0x20c>)
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2301      	movs	r3, #1
 8000674:	2222      	movs	r2, #34	; 0x22
 8000676:	2132      	movs	r1, #50	; 0x32
 8000678:	483d      	ldr	r0, [pc, #244]	; (8000770 <main+0x1ec>)
 800067a:	f001 fd97 	bl	80021ac <HAL_I2C_Mem_Write>
      HAL_I2C_Mem_Write(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_CTRL_REG4_A, 1, &LSM303AGR_CTRL_REG4_A_settings, 1, 5);
 800067e:	2305      	movs	r3, #5
 8000680:	9302      	str	r3, [sp, #8]
 8000682:	2301      	movs	r3, #1
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	4b43      	ldr	r3, [pc, #268]	; (8000794 <main+0x210>)
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2301      	movs	r3, #1
 800068c:	2223      	movs	r2, #35	; 0x23
 800068e:	2132      	movs	r1, #50	; 0x32
 8000690:	4837      	ldr	r0, [pc, #220]	; (8000770 <main+0x1ec>)
 8000692:	f001 fd8b 	bl	80021ac <HAL_I2C_Mem_Write>
      HAL_I2C_Mem_Write(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_CTRL_REG1_A, 1, &LSM303AGR_CTRL_REG1_A_settings, 1, 5);
 8000696:	2305      	movs	r3, #5
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	4b3e      	ldr	r3, [pc, #248]	; (8000798 <main+0x214>)
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	2220      	movs	r2, #32
 80006a6:	2132      	movs	r1, #50	; 0x32
 80006a8:	4831      	ldr	r0, [pc, #196]	; (8000770 <main+0x1ec>)
 80006aa:	f001 fd7f 	bl	80021ac <HAL_I2C_Mem_Write>

      //LPS22HB SET REGISTER
      HAL_I2C_Mem_Write(&hi2c1, LPS22HB_ADR, LPS22HB_LPS22HB_CTRL_REG1, 1, &LPS22HB_CTRL_REG1_A_settings, 1, 5);
 80006ae:	2305      	movs	r3, #5
 80006b0:	9302      	str	r3, [sp, #8]
 80006b2:	2301      	movs	r3, #1
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	4b39      	ldr	r3, [pc, #228]	; (800079c <main+0x218>)
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2301      	movs	r3, #1
 80006bc:	2210      	movs	r2, #16
 80006be:	21ba      	movs	r1, #186	; 0xba
 80006c0:	482b      	ldr	r0, [pc, #172]	; (8000770 <main+0x1ec>)
 80006c2:	f001 fd73 	bl	80021ac <HAL_I2C_Mem_Write>

     //HTS221 SET REGISTER
      HAL_I2C_Mem_Write(&hi2c1, HTS221_ADR, HTS221_CTR_REG_1, 1,  &HTTS221_CTR_REG_1_settings, 1, 5);
 80006c6:	2305      	movs	r3, #5
 80006c8:	9302      	str	r3, [sp, #8]
 80006ca:	2301      	movs	r3, #1
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <main+0x21c>)
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2301      	movs	r3, #1
 80006d4:	2220      	movs	r2, #32
 80006d6:	21be      	movs	r1, #190	; 0xbe
 80006d8:	4825      	ldr	r0, [pc, #148]	; (8000770 <main+0x1ec>)
 80006da:	f001 fd67 	bl	80021ac <HAL_I2C_Mem_Write>
     //HTS221 READ CONTROL DATA
      HAL_I2C_Mem_Write(&hi2c1, HTS221_ADR, HTS221_H0_rH_x2, 1,  HTTS221_CTR_CALIBRATION_REG, 6, 5);
 80006de:	2305      	movs	r3, #5
 80006e0:	9302      	str	r3, [sp, #8]
 80006e2:	2306      	movs	r3, #6
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <main+0x220>)
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	2230      	movs	r2, #48	; 0x30
 80006ee:	21be      	movs	r1, #190	; 0xbe
 80006f0:	481f      	ldr	r0, [pc, #124]	; (8000770 <main+0x1ec>)
 80006f2:	f001 fd5b 	bl	80021ac <HAL_I2C_Mem_Write>
      HTTS221_H0_rH_x2_sett = HTTS221_CTR_CALIBRATION_REG[0];
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <main+0x220>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b21a      	sxth	r2, r3
 80006fc:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <main+0x224>)
 80006fe:	801a      	strh	r2, [r3, #0]
      HTTS221_H1_rH_x2_sett = HTTS221_CTR_CALIBRATION_REG[1];
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <main+0x220>)
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	b21a      	sxth	r2, r3
 8000706:	4b29      	ldr	r3, [pc, #164]	; (80007ac <main+0x228>)
 8000708:	801a      	strh	r2, [r3, #0]
      HTTS221_H0_T0_OUT_sett = (HTTS221_CTR_CALIBRATION_REG[3] << 8) + HTTS221_CTR_CALIBRATION_REG[2];
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <main+0x220>)
 800070c:	78db      	ldrb	r3, [r3, #3]
 800070e:	b29b      	uxth	r3, r3
 8000710:	021b      	lsls	r3, r3, #8
 8000712:	b29a      	uxth	r2, r3
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <main+0x220>)
 8000716:	789b      	ldrb	r3, [r3, #2]
 8000718:	b29b      	uxth	r3, r3
 800071a:	4413      	add	r3, r2
 800071c:	b29b      	uxth	r3, r3
 800071e:	b21a      	sxth	r2, r3
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <main+0x22c>)
 8000722:	801a      	strh	r2, [r3, #0]
      HTTS221_H1_T0_OUT_sett = (HTTS221_CTR_CALIBRATION_REG[5] << 8) + HTTS221_CTR_CALIBRATION_REG[4];
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <main+0x220>)
 8000726:	795b      	ldrb	r3, [r3, #5]
 8000728:	b29b      	uxth	r3, r3
 800072a:	021b      	lsls	r3, r3, #8
 800072c:	b29a      	uxth	r2, r3
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <main+0x220>)
 8000730:	791b      	ldrb	r3, [r3, #4]
 8000732:	b29b      	uxth	r3, r3
 8000734:	4413      	add	r3, r2
 8000736:	b29b      	uxth	r3, r3
 8000738:	b21a      	sxth	r2, r3
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <main+0x230>)
 800073c:	801a      	strh	r2, [r3, #0]
      //First Interrupt
      HAL_I2C_Mem_Read_IT(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_OUT_X_L_A, 1, LSM303AGR_DATA_ACCE_buff, 6);
 800073e:	2306      	movs	r3, #6
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <main+0x234>)
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2301      	movs	r3, #1
 8000748:	22a8      	movs	r2, #168	; 0xa8
 800074a:	2132      	movs	r1, #50	; 0x32
 800074c:	4808      	ldr	r0, [pc, #32]	; (8000770 <main+0x1ec>)
 800074e:	f002 f84d 	bl	80027ec <HAL_I2C_Mem_Read_IT>

      //START UART_DMA
      uart_send_string_DMA((char*) LSM6DSL_DATA_BUFOR, 50);
 8000752:	2132      	movs	r1, #50	; 0x32
 8000754:	4819      	ldr	r0, [pc, #100]	; (80007bc <main+0x238>)
 8000756:	f000 f9a1 	bl	8000a9c <uart_send_string_DMA>


  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin);
 800075a:	2120      	movs	r1, #32
 800075c:	4818      	ldr	r0, [pc, #96]	; (80007c0 <main+0x23c>)
 800075e:	f001 fbc6 	bl	8001eee <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000762:	20c8      	movs	r0, #200	; 0xc8
 8000764:	f000 fd50 	bl	8001208 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin);
 8000768:	e7f7      	b.n	800075a <main+0x1d6>
 800076a:	bf00      	nop
 800076c:	200001ac 	.word	0x200001ac
 8000770:	20000094 	.word	0x20000094
 8000774:	200001be 	.word	0x200001be
 8000778:	200001f2 	.word	0x200001f2
 800077c:	200001f3 	.word	0x200001f3
 8000780:	200001fe 	.word	0x200001fe
 8000784:	20000001 	.word	0x20000001
 8000788:	20000004 	.word	0x20000004
 800078c:	200001f4 	.word	0x200001f4
 8000790:	200001f5 	.word	0x200001f5
 8000794:	20000003 	.word	0x20000003
 8000798:	20000002 	.word	0x20000002
 800079c:	20000005 	.word	0x20000005
 80007a0:	20000000 	.word	0x20000000
 80007a4:	200001b0 	.word	0x200001b0
 80007a8:	200001b6 	.word	0x200001b6
 80007ac:	200001b8 	.word	0x200001b8
 80007b0:	200001ba 	.word	0x200001ba
 80007b4:	200001bc 	.word	0x200001bc
 80007b8:	200001f8 	.word	0x200001f8
 80007bc:	200001c0 	.word	0x200001c0
 80007c0:	40020000 	.word	0x40020000

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	; 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2230      	movs	r2, #48	; 0x30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f005 fad8 	bl	8005d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <SystemClock_Config+0xcc>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a27      	ldr	r2, [pc, #156]	; (8000890 <SystemClock_Config+0xcc>)
 80007f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <SystemClock_Config+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <SystemClock_Config+0xd0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <SystemClock_Config+0xd0>)
 800080e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000820:	230a      	movs	r3, #10
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000828:	2310      	movs	r3, #16
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800082c:	2301      	movs	r3, #1
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000838:	2310      	movs	r3, #16
 800083a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800083c:	23c0      	movs	r3, #192	; 0xc0
 800083e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4618      	mov	r0, r3
 800084e:	f003 ffa1 	bl	8004794 <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000858:	f000 f91a 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2302      	movs	r3, #2
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2103      	movs	r1, #3
 8000878:	4618      	mov	r0, r3
 800087a:	f004 fa03 	bl	8004c84 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000884:	f000 f904 	bl	8000a90 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3750      	adds	r7, #80	; 0x50
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000

08000898 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_I2C1_Init+0x50>)
 800089e:	4a13      	ldr	r2, [pc, #76]	; (80008ec <MX_I2C1_Init+0x54>)
 80008a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008a4:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <MX_I2C1_Init+0x58>)
 80008a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008d6:	f001 fb25 	bl	8001f24 <HAL_I2C_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e0:	f000 f8d6 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000094 	.word	0x20000094
 80008ec:	40005400 	.word	0x40005400
 80008f0:	000186a0 	.word	0x000186a0

080008f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_RTC_Init+0x44>)
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <MX_RTC_Init+0x48>)
 80008fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_RTC_Init+0x44>)
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_RTC_Init+0x44>)
 8000906:	227f      	movs	r2, #127	; 0x7f
 8000908:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_RTC_Init+0x44>)
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_RTC_Init+0x44>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_RTC_Init+0x44>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_RTC_Init+0x44>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_RTC_Init+0x44>)
 8000924:	f004 fc7e 	bl	8005224 <HAL_RTC_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800092e:	f000 f8af 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000e8 	.word	0x200000e8
 800093c:	40002800 	.word	0x40002800

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <MX_USART2_UART_Init+0x50>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_USART2_UART_Init+0x4c>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART2_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000978:	f004 fd4e 	bl	8005418 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000982:	f000 f885 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000108 	.word	0x20000108
 8000990:	40004400 	.word	0x40004400

08000994 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_DMA_Init+0x3c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <MX_DMA_Init+0x3c>)
 80009a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_DMA_Init+0x3c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2011      	movs	r0, #17
 80009bc:	f000 fd23 	bl	8001406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009c0:	2011      	movs	r0, #17
 80009c2:	f000 fd3c 	bl	800143e <HAL_NVIC_EnableIRQ>

}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_GPIO_Init+0xb4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a25      	ldr	r2, [pc, #148]	; (8000a88 <MX_GPIO_Init+0xb4>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <MX_GPIO_Init+0xb4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_GPIO_Init+0xb4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <MX_GPIO_Init+0xb4>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_GPIO_Init+0xb4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_GPIO_Init+0xb4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <MX_GPIO_Init+0xb4>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_GPIO_Init+0xb4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_GPIO_Init+0xb4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <MX_GPIO_Init+0xb4>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_GPIO_Init+0xb4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	480b      	ldr	r0, [pc, #44]	; (8000a8c <MX_GPIO_Init+0xb8>)
 8000a60:	f001 fa2c 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a64:	2320      	movs	r3, #32
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_GPIO_Init+0xb8>)
 8000a7c:	f001 f89a 	bl	8001bb4 <HAL_GPIO_Init>

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <uart_send_string_DMA>:
float HTS221_HUMI_DATA_IN_PER = 0;
/* USER CODE END PV */


void uart_send_string_DMA(char* string, int16_t length)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	807b      	strh	r3, [r7, #2]

	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) string, length);
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	4803      	ldr	r0, [pc, #12]	; (8000abc <uart_send_string_DMA+0x20>)
 8000ab0:	f004 fd00 	bl	80054b4 <HAL_UART_Transmit_DMA>


}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000108 	.word	0x20000108

08000ac0 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	6078      	str	r0, [r7, #4]
	//ACCE LSM303AGR
	if(Call_Back_Flag == 0){
 8000ac8:	4b88      	ldr	r3, [pc, #544]	; (8000cec <HAL_I2C_MemRxCpltCallback+0x22c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d134      	bne.n	8000b3a <HAL_I2C_MemRxCpltCallback+0x7a>
		LSM303AGR_OUTX_ACCE_buf = (LSM303AGR_DATA_ACCE_buff[1] << 8) + LSM303AGR_DATA_ACCE_buff[0];
 8000ad0:	4b87      	ldr	r3, [pc, #540]	; (8000cf0 <HAL_I2C_MemRxCpltCallback+0x230>)
 8000ad2:	785b      	ldrb	r3, [r3, #1]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b85      	ldr	r3, [pc, #532]	; (8000cf0 <HAL_I2C_MemRxCpltCallback+0x230>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	4413      	add	r3, r2
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	4b83      	ldr	r3, [pc, #524]	; (8000cf4 <HAL_I2C_MemRxCpltCallback+0x234>)
 8000ae8:	801a      	strh	r2, [r3, #0]
		LSM303AGR_OUTY_ACCE_buf = (LSM303AGR_DATA_ACCE_buff[3] << 8) + LSM303AGR_DATA_ACCE_buff[2];
 8000aea:	4b81      	ldr	r3, [pc, #516]	; (8000cf0 <HAL_I2C_MemRxCpltCallback+0x230>)
 8000aec:	78db      	ldrb	r3, [r3, #3]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	4b7e      	ldr	r3, [pc, #504]	; (8000cf0 <HAL_I2C_MemRxCpltCallback+0x230>)
 8000af6:	789b      	ldrb	r3, [r3, #2]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	4413      	add	r3, r2
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	4b7d      	ldr	r3, [pc, #500]	; (8000cf8 <HAL_I2C_MemRxCpltCallback+0x238>)
 8000b02:	801a      	strh	r2, [r3, #0]
		LSM303AGR_OUTZ_ACCE_buf = (LSM303AGR_DATA_ACCE_buff[5] << 8) + LSM303AGR_DATA_ACCE_buff[4];
 8000b04:	4b7a      	ldr	r3, [pc, #488]	; (8000cf0 <HAL_I2C_MemRxCpltCallback+0x230>)
 8000b06:	795b      	ldrb	r3, [r3, #5]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	4b78      	ldr	r3, [pc, #480]	; (8000cf0 <HAL_I2C_MemRxCpltCallback+0x230>)
 8000b10:	791b      	ldrb	r3, [r3, #4]
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	4413      	add	r3, r2
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	4b78      	ldr	r3, [pc, #480]	; (8000cfc <HAL_I2C_MemRxCpltCallback+0x23c>)
 8000b1c:	801a      	strh	r2, [r3, #0]
		Call_Back_Flag = 1;
 8000b1e:	4b73      	ldr	r3, [pc, #460]	; (8000cec <HAL_I2C_MemRxCpltCallback+0x22c>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1, LSM6DSL_ADR, LSM6DSL_OUTX_L_XL, 1, LSM6DSL_DATA_ACCE_buff, 6);
 8000b24:	2306      	movs	r3, #6
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	4b75      	ldr	r3, [pc, #468]	; (8000d00 <HAL_I2C_MemRxCpltCallback+0x240>)
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	2228      	movs	r2, #40	; 0x28
 8000b30:	21d6      	movs	r1, #214	; 0xd6
 8000b32:	4874      	ldr	r0, [pc, #464]	; (8000d04 <HAL_I2C_MemRxCpltCallback+0x244>)
 8000b34:	f001 fe5a 	bl	80027ec <HAL_I2C_Mem_Read_IT>
			HAL_I2C_Mem_Read_IT(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_OUT_X_L_A, 1, LSM303AGR_DATA_ACCE_buff, 6);
			}
*/


}
 8000b38:	e0d4      	b.n	8000ce4 <HAL_I2C_MemRxCpltCallback+0x224>
	else if(Call_Back_Flag == 1){
 8000b3a:	4b6c      	ldr	r3, [pc, #432]	; (8000cec <HAL_I2C_MemRxCpltCallback+0x22c>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d145      	bne.n	8000bce <HAL_I2C_MemRxCpltCallback+0x10e>
		LSM6DSL_OUTX_ACCE_buff = (LSM6DSL_DATA_ACCE_buff[1] << 8) + LSM6DSL_DATA_ACCE_buff[0];
 8000b42:	4b6f      	ldr	r3, [pc, #444]	; (8000d00 <HAL_I2C_MemRxCpltCallback+0x240>)
 8000b44:	785b      	ldrb	r3, [r3, #1]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	021b      	lsls	r3, r3, #8
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b6c      	ldr	r3, [pc, #432]	; (8000d00 <HAL_I2C_MemRxCpltCallback+0x240>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	4413      	add	r3, r2
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	4b6b      	ldr	r3, [pc, #428]	; (8000d08 <HAL_I2C_MemRxCpltCallback+0x248>)
 8000b5a:	801a      	strh	r2, [r3, #0]
		LSM6DSL_OUTY_ACCE_buff = (LSM6DSL_DATA_ACCE_buff[3] << 8) + LSM6DSL_DATA_ACCE_buff[2];
 8000b5c:	4b68      	ldr	r3, [pc, #416]	; (8000d00 <HAL_I2C_MemRxCpltCallback+0x240>)
 8000b5e:	78db      	ldrb	r3, [r3, #3]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	4b66      	ldr	r3, [pc, #408]	; (8000d00 <HAL_I2C_MemRxCpltCallback+0x240>)
 8000b68:	789b      	ldrb	r3, [r3, #2]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	b21a      	sxth	r2, r3
 8000b72:	4b66      	ldr	r3, [pc, #408]	; (8000d0c <HAL_I2C_MemRxCpltCallback+0x24c>)
 8000b74:	801a      	strh	r2, [r3, #0]
		LSM6DSL_OUTZ_ACCE_buff = (LSM6DSL_DATA_ACCE_buff[5] << 8) + LSM6DSL_DATA_ACCE_buff[4];
 8000b76:	4b62      	ldr	r3, [pc, #392]	; (8000d00 <HAL_I2C_MemRxCpltCallback+0x240>)
 8000b78:	795b      	ldrb	r3, [r3, #5]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	021b      	lsls	r3, r3, #8
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	4b5f      	ldr	r3, [pc, #380]	; (8000d00 <HAL_I2C_MemRxCpltCallback+0x240>)
 8000b82:	791b      	ldrb	r3, [r3, #4]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	4413      	add	r3, r2
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	4b60      	ldr	r3, [pc, #384]	; (8000d10 <HAL_I2C_MemRxCpltCallback+0x250>)
 8000b8e:	801a      	strh	r2, [r3, #0]
		sprintf( (char*) LSM6DSL_DATA_BUFOR, "%d %d %d \n\r", LSM6DSL_OUTX_ACCE_buff, LSM6DSL_OUTY_ACCE_buff, LSM6DSL_OUTZ_ACCE_buff);
 8000b90:	4b5d      	ldr	r3, [pc, #372]	; (8000d08 <HAL_I2C_MemRxCpltCallback+0x248>)
 8000b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b5c      	ldr	r3, [pc, #368]	; (8000d0c <HAL_I2C_MemRxCpltCallback+0x24c>)
 8000b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4b5b      	ldr	r3, [pc, #364]	; (8000d10 <HAL_I2C_MemRxCpltCallback+0x250>)
 8000ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	495a      	ldr	r1, [pc, #360]	; (8000d14 <HAL_I2C_MemRxCpltCallback+0x254>)
 8000bac:	485a      	ldr	r0, [pc, #360]	; (8000d18 <HAL_I2C_MemRxCpltCallback+0x258>)
 8000bae:	f005 f8f3 	bl	8005d98 <siprintf>
		Call_Back_Flag = 2;
 8000bb2:	4b4e      	ldr	r3, [pc, #312]	; (8000cec <HAL_I2C_MemRxCpltCallback+0x22c>)
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1, LPS22HB_ADR, LPS22HB_PRESS_OUT_XL, 1, LPS22HB_DATA_buff, 5);
 8000bb8:	2305      	movs	r3, #5
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	4b57      	ldr	r3, [pc, #348]	; (8000d1c <HAL_I2C_MemRxCpltCallback+0x25c>)
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	2228      	movs	r2, #40	; 0x28
 8000bc4:	21ba      	movs	r1, #186	; 0xba
 8000bc6:	484f      	ldr	r0, [pc, #316]	; (8000d04 <HAL_I2C_MemRxCpltCallback+0x244>)
 8000bc8:	f001 fe10 	bl	80027ec <HAL_I2C_Mem_Read_IT>
}
 8000bcc:	e08a      	b.n	8000ce4 <HAL_I2C_MemRxCpltCallback+0x224>
	else if(Call_Back_Flag == 2){
 8000bce:	4b47      	ldr	r3, [pc, #284]	; (8000cec <HAL_I2C_MemRxCpltCallback+0x22c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d142      	bne.n	8000c5c <HAL_I2C_MemRxCpltCallback+0x19c>
		LPS22HB_TEMP_DATA =  (LPS22HB_DATA_buff[4] << 8) + LPS22HB_DATA_buff[3] ;
 8000bd6:	4b51      	ldr	r3, [pc, #324]	; (8000d1c <HAL_I2C_MemRxCpltCallback+0x25c>)
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	4b4e      	ldr	r3, [pc, #312]	; (8000d1c <HAL_I2C_MemRxCpltCallback+0x25c>)
 8000be2:	78db      	ldrb	r3, [r3, #3]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	4413      	add	r3, r2
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	4b4c      	ldr	r3, [pc, #304]	; (8000d20 <HAL_I2C_MemRxCpltCallback+0x260>)
 8000bee:	801a      	strh	r2, [r3, #0]
		LPS22HB_TEMP_DATA_IN_C = ((float)LPS22HB_TEMP_DATA/100);
 8000bf0:	4b4b      	ldr	r3, [pc, #300]	; (8000d20 <HAL_I2C_MemRxCpltCallback+0x260>)
 8000bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bf6:	ee07 3a90 	vmov	s15, r3
 8000bfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bfe:	eddf 6a49 	vldr	s13, [pc, #292]	; 8000d24 <HAL_I2C_MemRxCpltCallback+0x264>
 8000c02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c06:	4b48      	ldr	r3, [pc, #288]	; (8000d28 <HAL_I2C_MemRxCpltCallback+0x268>)
 8000c08:	edc3 7a00 	vstr	s15, [r3]
		LPS22HB_OUT_PRESS_DATA = ((LPS22HB_DATA_buff[2] << 16) + (LPS22HB_DATA_buff[1] << 8) + LPS22HB_DATA_buff[0]);
 8000c0c:	4b43      	ldr	r3, [pc, #268]	; (8000d1c <HAL_I2C_MemRxCpltCallback+0x25c>)
 8000c0e:	789b      	ldrb	r3, [r3, #2]
 8000c10:	041a      	lsls	r2, r3, #16
 8000c12:	4b42      	ldr	r3, [pc, #264]	; (8000d1c <HAL_I2C_MemRxCpltCallback+0x25c>)
 8000c14:	785b      	ldrb	r3, [r3, #1]
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a40      	ldr	r2, [pc, #256]	; (8000d1c <HAL_I2C_MemRxCpltCallback+0x25c>)
 8000c1c:	7812      	ldrb	r2, [r2, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b42      	ldr	r3, [pc, #264]	; (8000d2c <HAL_I2C_MemRxCpltCallback+0x26c>)
 8000c24:	601a      	str	r2, [r3, #0]
		LPS22HB_OUT_PRESS_DATA_IN_HPA = ((float) LPS22HB_OUT_PRESS_DATA / 4096);
 8000c26:	4b41      	ldr	r3, [pc, #260]	; (8000d2c <HAL_I2C_MemRxCpltCallback+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	ee07 3a90 	vmov	s15, r3
 8000c2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c32:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8000d30 <HAL_I2C_MemRxCpltCallback+0x270>
 8000c36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c3a:	4b3e      	ldr	r3, [pc, #248]	; (8000d34 <HAL_I2C_MemRxCpltCallback+0x274>)
 8000c3c:	edc3 7a00 	vstr	s15, [r3]
		Call_Back_Flag = 3;
 8000c40:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <HAL_I2C_MemRxCpltCallback+0x22c>)
 8000c42:	2203      	movs	r2, #3
 8000c44:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1, HTS221_ADR, HTS221_HUMIDITY_OUT_L, 1, HTS221_DATA_buff, 4);
 8000c46:	2304      	movs	r3, #4
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	4b3b      	ldr	r3, [pc, #236]	; (8000d38 <HAL_I2C_MemRxCpltCallback+0x278>)
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	2228      	movs	r2, #40	; 0x28
 8000c52:	21be      	movs	r1, #190	; 0xbe
 8000c54:	482b      	ldr	r0, [pc, #172]	; (8000d04 <HAL_I2C_MemRxCpltCallback+0x244>)
 8000c56:	f001 fdc9 	bl	80027ec <HAL_I2C_Mem_Read_IT>
}
 8000c5a:	e043      	b.n	8000ce4 <HAL_I2C_MemRxCpltCallback+0x224>
	else if(Call_Back_Flag == 3){
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <HAL_I2C_MemRxCpltCallback+0x22c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d116      	bne.n	8000c92 <HAL_I2C_MemRxCpltCallback+0x1d2>
		HTS221_HUMI_DATA = (HTS221_DATA_buff[1] << 8) + HTS221_DATA_buff[0];
 8000c64:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <HAL_I2C_MemRxCpltCallback+0x278>)
 8000c66:	785b      	ldrb	r3, [r3, #1]
 8000c68:	021b      	lsls	r3, r3, #8
 8000c6a:	4a33      	ldr	r2, [pc, #204]	; (8000d38 <HAL_I2C_MemRxCpltCallback+0x278>)
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <HAL_I2C_MemRxCpltCallback+0x27c>)
 8000c74:	601a      	str	r2, [r3, #0]
		Call_Back_Flag = 4;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_I2C_MemRxCpltCallback+0x22c>)
 8000c78:	2204      	movs	r2, #4
 8000c7a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_OUT_TEMP_L_A, 1, LSM303AGR_DATA_ACCE_buff, 2);
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	9301      	str	r3, [sp, #4]
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_I2C_MemRxCpltCallback+0x230>)
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2301      	movs	r3, #1
 8000c86:	228c      	movs	r2, #140	; 0x8c
 8000c88:	2132      	movs	r1, #50	; 0x32
 8000c8a:	481e      	ldr	r0, [pc, #120]	; (8000d04 <HAL_I2C_MemRxCpltCallback+0x244>)
 8000c8c:	f001 fdae 	bl	80027ec <HAL_I2C_Mem_Read_IT>
}
 8000c90:	e028      	b.n	8000ce4 <HAL_I2C_MemRxCpltCallback+0x224>
	else if(Call_Back_Flag == 4){
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_I2C_MemRxCpltCallback+0x22c>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d124      	bne.n	8000ce4 <HAL_I2C_MemRxCpltCallback+0x224>
			LSM303AGR_OUT_TEMP_data = (LSM303AGR_DATA_ACCE_buff[1] << 8) + LSM303AGR_DATA_ACCE_buff[0];
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_I2C_MemRxCpltCallback+0x230>)
 8000c9c:	785b      	ldrb	r3, [r3, #1]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_I2C_MemRxCpltCallback+0x230>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	4413      	add	r3, r2
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <HAL_I2C_MemRxCpltCallback+0x280>)
 8000cb2:	801a      	strh	r2, [r3, #0]
			LSM303AGR_OUT_TEMP_IN_C = lsm303agr_from_lsb_nm_to_celsius(LSM303AGR_OUT_TEMP_data);
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <HAL_I2C_MemRxCpltCallback+0x280>)
 8000cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f844 	bl	8000d48 <lsm303agr_from_lsb_nm_to_celsius>
 8000cc0:	eef0 7a40 	vmov.f32	s15, s0
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_I2C_MemRxCpltCallback+0x284>)
 8000cc6:	edc3 7a00 	vstr	s15, [r3]
			Call_Back_Flag = 0;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_I2C_MemRxCpltCallback+0x22c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Read_IT(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_OUT_X_L_A, 1, LSM303AGR_DATA_ACCE_buff, 6);
 8000cd0:	2306      	movs	r3, #6
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_I2C_MemRxCpltCallback+0x230>)
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	22a8      	movs	r2, #168	; 0xa8
 8000cdc:	2132      	movs	r1, #50	; 0x32
 8000cde:	4809      	ldr	r0, [pc, #36]	; (8000d04 <HAL_I2C_MemRxCpltCallback+0x244>)
 8000ce0:	f001 fd84 	bl	80027ec <HAL_I2C_Mem_Read_IT>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200001ff 	.word	0x200001ff
 8000cf0:	200001f8 	.word	0x200001f8
 8000cf4:	20000200 	.word	0x20000200
 8000cf8:	20000202 	.word	0x20000202
 8000cfc:	20000204 	.word	0x20000204
 8000d00:	2000020c 	.word	0x2000020c
 8000d04:	20000094 	.word	0x20000094
 8000d08:	20000212 	.word	0x20000212
 8000d0c:	20000214 	.word	0x20000214
 8000d10:	20000216 	.word	0x20000216
 8000d14:	0800668c 	.word	0x0800668c
 8000d18:	200001c0 	.word	0x200001c0
 8000d1c:	20000218 	.word	0x20000218
 8000d20:	20000224 	.word	0x20000224
 8000d24:	42c80000 	.word	0x42c80000
 8000d28:	20000228 	.word	0x20000228
 8000d2c:	20000220 	.word	0x20000220
 8000d30:	45800000 	.word	0x45800000
 8000d34:	2000022c 	.word	0x2000022c
 8000d38:	20000230 	.word	0x20000230
 8000d3c:	20000234 	.word	0x20000234
 8000d40:	20000206 	.word	0x20000206
 8000d44:	20000208 	.word	0x20000208

08000d48 <lsm303agr_from_lsb_nm_to_celsius>:


}

float_t lsm303agr_from_lsb_nm_to_celsius(int16_t lsb)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
  return ( ( (float_t)lsb / 64.0f ) / 4.0f ) + 25.0f;
 8000d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000d84 <lsm303agr_from_lsb_nm_to_celsius+0x3c>
 8000d62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d66:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000d6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d6e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000d72:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000d76:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	42800000 	.word	0x42800000

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <HAL_I2C_MspInit+0x94>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d134      	bne.n	8000e64 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <HAL_I2C_MspInit+0x98>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <HAL_I2C_MspInit+0x98>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <HAL_I2C_MspInit+0x98>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1c:	2312      	movs	r3, #18
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4810      	ldr	r0, [pc, #64]	; (8000e74 <HAL_I2C_MspInit+0x9c>)
 8000e34:	f000 febe 	bl	8001bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_I2C_MspInit+0x98>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_I2C_MspInit+0x98>)
 8000e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_I2C_MspInit+0x98>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	201f      	movs	r0, #31
 8000e5a:	f000 fad4 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e5e:	201f      	movs	r0, #31
 8000e60:	f000 faed 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40005400 	.word	0x40005400
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020400 	.word	0x40020400

08000e78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
 8000e90:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <HAL_RTC_MspInit+0x50>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d111      	bne.n	8000ec0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f004 f8ca 	bl	8005044 <HAL_RCCEx_PeriphCLKConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000eb6:	f7ff fdeb 	bl	8000a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_RTC_MspInit+0x54>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40002800 	.word	0x40002800
 8000ecc:	42470e3c 	.word	0x42470e3c

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a30      	ldr	r2, [pc, #192]	; (8000fb0 <HAL_UART_MspInit+0xe0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d15a      	bne.n	8000fa8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <HAL_UART_MspInit+0xe4>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a2e      	ldr	r2, [pc, #184]	; (8000fb4 <HAL_UART_MspInit+0xe4>)
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <HAL_UART_MspInit+0xe4>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <HAL_UART_MspInit+0xe4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <HAL_UART_MspInit+0xe4>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <HAL_UART_MspInit+0xe4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f2a:	230c      	movs	r3, #12
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <HAL_UART_MspInit+0xe8>)
 8000f46:	f000 fe35 	bl	8001bb4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_UART_MspInit+0xec>)
 8000f4c:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <HAL_UART_MspInit+0xf0>)
 8000f4e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_UART_MspInit+0xec>)
 8000f52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f56:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_UART_MspInit+0xec>)
 8000f5a:	2240      	movs	r2, #64	; 0x40
 8000f5c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_UART_MspInit+0xec>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_UART_MspInit+0xec>)
 8000f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_UART_MspInit+0xec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_UART_MspInit+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_UART_MspInit+0xec>)
 8000f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_UART_MspInit+0xec>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_UART_MspInit+0xec>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <HAL_UART_MspInit+0xec>)
 8000f8e:	f000 fa71 	bl	8001474 <HAL_DMA_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000f98:	f7ff fd7a 	bl	8000a90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_UART_MspInit+0xec>)
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fa2:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_UART_MspInit+0xec>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40004400 	.word	0x40004400
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	2000014c 	.word	0x2000014c
 8000fc0:	400260a0 	.word	0x400260a0

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8da 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <DMA1_Stream6_IRQHandler+0x10>)
 800101e:	f000 fb51 	bl	80016c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000014c 	.word	0x2000014c

0800102c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <I2C1_EV_IRQHandler+0x10>)
 8001032:	f001 fc99 	bl	8002968 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000094 	.word	0x20000094

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f004 fe60 	bl	8005d34 <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20020000 	.word	0x20020000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	20000238 	.word	0x20000238
 80010a8:	20000250 	.word	0x20000250

080010ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d6:	490e      	ldr	r1, [pc, #56]	; (8001110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010ec:	4c0b      	ldr	r4, [pc, #44]	; (800111c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fa:	f7ff ffd7 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f004 fe1f 	bl	8005d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fa3f 	bl	8000584 <main>
  bx  lr    
 8001106:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001114:	080066fc 	.word	0x080066fc
  ldr r2, =_sbss
 8001118:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800111c:	20000250 	.word	0x20000250

08001120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <HAL_Init+0x40>)
 800112e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_Init+0x40>)
 800113a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_Init+0x40>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f94f 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	200f      	movs	r0, #15
 8001154:	f000 f808 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fe16 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023c00 	.word	0x40023c00

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f967 	bl	800145a <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f000 f92f 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000010 	.word	0x20000010
 80011c4:	2000000c 	.word	0x2000000c

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000010 	.word	0x20000010
 80011ec:	2000023c 	.word	0x2000023c

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	2000023c 	.word	0x2000023c

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff ffee 	bl	80011f0 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffde 	bl	80011f0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000010 	.word	0x20000010

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff3e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff31 	bl	80012b4 <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffa2 	bl	80013ac <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff feb6 	bl	80011f0 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e099      	b.n	80015c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b0:	e00f      	b.n	80014d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014b2:	f7ff fe9d 	bl	80011f0 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b05      	cmp	r3, #5
 80014be:	d908      	bls.n	80014d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2220      	movs	r2, #32
 80014c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2203      	movs	r2, #3
 80014ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e078      	b.n	80015c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1e8      	bne.n	80014b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <HAL_DMA_Init+0x158>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4313      	orrs	r3, r2
 8001522:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	2b04      	cmp	r3, #4
 800152a:	d107      	bne.n	800153c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	4313      	orrs	r3, r2
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f023 0307 	bic.w	r3, r3, #7
 8001552:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	4313      	orrs	r3, r2
 800155c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	2b04      	cmp	r3, #4
 8001564:	d117      	bne.n	8001596 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4313      	orrs	r3, r2
 800156e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00e      	beq.n	8001596 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 fa9f 	bl	8001abc <DMA_CheckFifoParam>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2240      	movs	r2, #64	; 0x40
 8001588:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001592:	2301      	movs	r3, #1
 8001594:	e016      	b.n	80015c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fa56 	bl	8001a50 <DMA_CalcBaseAndBitshift>
 80015a4:	4603      	mov	r3, r0
 80015a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	223f      	movs	r2, #63	; 0x3f
 80015ae:	409a      	lsls	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	f010803f 	.word	0xf010803f

080015d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_DMA_Start_IT+0x26>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e040      	b.n	8001678 <HAL_DMA_Start_IT+0xa8>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d12f      	bne.n	800166a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2202      	movs	r2, #2
 800160e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 f9e8 	bl	80019f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001628:	223f      	movs	r2, #63	; 0x3f
 800162a:	409a      	lsls	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0216 	orr.w	r2, r2, #22
 800163e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0208 	orr.w	r2, r2, #8
 8001656:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e005      	b.n	8001676 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001672:	2302      	movs	r3, #2
 8001674:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001676:	7dfb      	ldrb	r3, [r7, #23]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d004      	beq.n	800169e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00c      	b.n	80016b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2205      	movs	r2, #5
 80016a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0201 	bic.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016d0:	4b8e      	ldr	r3, [pc, #568]	; (800190c <HAL_DMA_IRQHandler+0x248>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a8e      	ldr	r2, [pc, #568]	; (8001910 <HAL_DMA_IRQHandler+0x24c>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0a9b      	lsrs	r3, r3, #10
 80016dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	2208      	movs	r2, #8
 80016f0:	409a      	lsls	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d01a      	beq.n	8001730 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d013      	beq.n	8001730 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0204 	bic.w	r2, r2, #4
 8001716:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171c:	2208      	movs	r2, #8
 800171e:	409a      	lsls	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001728:	f043 0201 	orr.w	r2, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001734:	2201      	movs	r2, #1
 8001736:	409a      	lsls	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d012      	beq.n	8001766 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00b      	beq.n	8001766 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001752:	2201      	movs	r2, #1
 8001754:	409a      	lsls	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175e:	f043 0202 	orr.w	r2, r3, #2
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	2204      	movs	r2, #4
 800176c:	409a      	lsls	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d012      	beq.n	800179c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00b      	beq.n	800179c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	2204      	movs	r2, #4
 800178a:	409a      	lsls	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001794:	f043 0204 	orr.w	r2, r3, #4
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	2210      	movs	r2, #16
 80017a2:	409a      	lsls	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d043      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d03c      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017be:	2210      	movs	r2, #16
 80017c0:	409a      	lsls	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d018      	beq.n	8001806 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d108      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d024      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	4798      	blx	r3
 80017f2:	e01f      	b.n	8001834 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01b      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
 8001804:	e016      	b.n	8001834 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d107      	bne.n	8001824 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0208 	bic.w	r2, r2, #8
 8001822:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	2220      	movs	r2, #32
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 808f 	beq.w	8001964 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8087 	beq.w	8001964 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185a:	2220      	movs	r2, #32
 800185c:	409a      	lsls	r2, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b05      	cmp	r3, #5
 800186c:	d136      	bne.n	80018dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0216 	bic.w	r2, r2, #22
 800187c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800188c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d103      	bne.n	800189e <HAL_DMA_IRQHandler+0x1da>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0208 	bic.w	r2, r2, #8
 80018ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b2:	223f      	movs	r2, #63	; 0x3f
 80018b4:	409a      	lsls	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d07e      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	4798      	blx	r3
        }
        return;
 80018da:	e079      	b.n	80019d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d01d      	beq.n	8001926 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10d      	bne.n	8001914 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d031      	beq.n	8001964 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	4798      	blx	r3
 8001908:	e02c      	b.n	8001964 <HAL_DMA_IRQHandler+0x2a0>
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008
 8001910:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d023      	beq.n	8001964 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	4798      	blx	r3
 8001924:	e01e      	b.n	8001964 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10f      	bne.n	8001954 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0210 	bic.w	r2, r2, #16
 8001942:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001968:	2b00      	cmp	r3, #0
 800196a:	d032      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d022      	beq.n	80019be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2205      	movs	r2, #5
 800197c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	3301      	adds	r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	d307      	bcc.n	80019ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f2      	bne.n	8001990 <HAL_DMA_IRQHandler+0x2cc>
 80019aa:	e000      	b.n	80019ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	4798      	blx	r3
 80019ce:	e000      	b.n	80019d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80019d0:	bf00      	nop
    }
  }
}
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e6:	b2db      	uxtb	r3, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b40      	cmp	r3, #64	; 0x40
 8001a20:	d108      	bne.n	8001a34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a32:	e007      	b.n	8001a44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	60da      	str	r2, [r3, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	3b10      	subs	r3, #16
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <DMA_CalcBaseAndBitshift+0x64>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a6a:	4a13      	ldr	r2, [pc, #76]	; (8001ab8 <DMA_CalcBaseAndBitshift+0x68>)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d909      	bls.n	8001a92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a86:	f023 0303 	bic.w	r3, r3, #3
 8001a8a:	1d1a      	adds	r2, r3, #4
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a90:	e007      	b.n	8001aa2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	aaaaaaab 	.word	0xaaaaaaab
 8001ab8:	080066b0 	.word	0x080066b0

08001abc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d11f      	bne.n	8001b16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d856      	bhi.n	8001b8a <DMA_CheckFifoParam+0xce>
 8001adc:	a201      	add	r2, pc, #4	; (adr r2, 8001ae4 <DMA_CheckFifoParam+0x28>)
 8001ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae2:	bf00      	nop
 8001ae4:	08001af5 	.word	0x08001af5
 8001ae8:	08001b07 	.word	0x08001b07
 8001aec:	08001af5 	.word	0x08001af5
 8001af0:	08001b8b 	.word	0x08001b8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d046      	beq.n	8001b8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b04:	e043      	b.n	8001b8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b0e:	d140      	bne.n	8001b92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b14:	e03d      	b.n	8001b92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b1e:	d121      	bne.n	8001b64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d837      	bhi.n	8001b96 <DMA_CheckFifoParam+0xda>
 8001b26:	a201      	add	r2, pc, #4	; (adr r2, 8001b2c <DMA_CheckFifoParam+0x70>)
 8001b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2c:	08001b3d 	.word	0x08001b3d
 8001b30:	08001b43 	.word	0x08001b43
 8001b34:	08001b3d 	.word	0x08001b3d
 8001b38:	08001b55 	.word	0x08001b55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b40:	e030      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d025      	beq.n	8001b9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b52:	e022      	b.n	8001b9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b5c:	d11f      	bne.n	8001b9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b62:	e01c      	b.n	8001b9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d903      	bls.n	8001b72 <DMA_CheckFifoParam+0xb6>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d003      	beq.n	8001b78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b70:	e018      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
      break;
 8001b76:	e015      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00e      	beq.n	8001ba2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
      break;
 8001b88:	e00b      	b.n	8001ba2 <DMA_CheckFifoParam+0xe6>
      break;
 8001b8a:	bf00      	nop
 8001b8c:	e00a      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8001b8e:	bf00      	nop
 8001b90:	e008      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8001b92:	bf00      	nop
 8001b94:	e006      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8001b96:	bf00      	nop
 8001b98:	e004      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8001b9a:	bf00      	nop
 8001b9c:	e002      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b9e:	bf00      	nop
 8001ba0:	e000      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ba2:	bf00      	nop
    }
  } 
  
  return status; 
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	e159      	b.n	8001e84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	f040 8148 	bne.w	8001e7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d005      	beq.n	8001c06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d130      	bne.n	8001c68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	2203      	movs	r2, #3
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 0201 	and.w	r2, r3, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d017      	beq.n	8001ca4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d123      	bne.n	8001cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	08da      	lsrs	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3208      	adds	r2, #8
 8001cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	08da      	lsrs	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3208      	adds	r2, #8
 8001cf2:	69b9      	ldr	r1, [r7, #24]
 8001cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80a2 	beq.w	8001e7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b57      	ldr	r3, [pc, #348]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a56      	ldr	r2, [pc, #344]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b54      	ldr	r3, [pc, #336]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d56:	4a52      	ldr	r2, [pc, #328]	; (8001ea0 <HAL_GPIO_Init+0x2ec>)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a49      	ldr	r2, [pc, #292]	; (8001ea4 <HAL_GPIO_Init+0x2f0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x202>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a48      	ldr	r2, [pc, #288]	; (8001ea8 <HAL_GPIO_Init+0x2f4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x1fe>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a47      	ldr	r2, [pc, #284]	; (8001eac <HAL_GPIO_Init+0x2f8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x1fa>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a46      	ldr	r2, [pc, #280]	; (8001eb0 <HAL_GPIO_Init+0x2fc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x1f6>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a45      	ldr	r2, [pc, #276]	; (8001eb4 <HAL_GPIO_Init+0x300>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x1f2>
 8001da2:	2304      	movs	r3, #4
 8001da4:	e008      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001da6:	2307      	movs	r3, #7
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001daa:	2303      	movs	r3, #3
 8001dac:	e004      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e002      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_GPIO_Init+0x204>
 8001db6:	2300      	movs	r3, #0
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	f002 0203 	and.w	r2, r2, #3
 8001dbe:	0092      	lsls	r2, r2, #2
 8001dc0:	4093      	lsls	r3, r2
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dc8:	4935      	ldr	r1, [pc, #212]	; (8001ea0 <HAL_GPIO_Init+0x2ec>)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dd6:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dfa:	4a2f      	ldr	r2, [pc, #188]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e00:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e24:	4a24      	ldr	r2, [pc, #144]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e2a:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e4e:	4a1a      	ldr	r2, [pc, #104]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e54:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e78:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3301      	adds	r3, #1
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	2b0f      	cmp	r3, #15
 8001e88:	f67f aea2 	bls.w	8001bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40013800 	.word	0x40013800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	40020c00 	.word	0x40020c00
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40013c00 	.word	0x40013c00

08001ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ecc:	787b      	ldrb	r3, [r7, #1]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ed8:	e003      	b.n	8001ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eda:	887b      	ldrh	r3, [r7, #2]
 8001edc:	041a      	lsls	r2, r3, #16
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	619a      	str	r2, [r3, #24]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f00:	887a      	ldrh	r2, [r7, #2]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4013      	ands	r3, r2
 8001f06:	041a      	lsls	r2, r3, #16
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	400b      	ands	r3, r1
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	619a      	str	r2, [r3, #24]
}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e12b      	b.n	800218e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe ff44 	bl	8000dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2224      	movs	r2, #36	; 0x24
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f88:	f003 f834 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8001f8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4a81      	ldr	r2, [pc, #516]	; (8002198 <HAL_I2C_Init+0x274>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d807      	bhi.n	8001fa8 <HAL_I2C_Init+0x84>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a80      	ldr	r2, [pc, #512]	; (800219c <HAL_I2C_Init+0x278>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	bf94      	ite	ls
 8001fa0:	2301      	movls	r3, #1
 8001fa2:	2300      	movhi	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e006      	b.n	8001fb6 <HAL_I2C_Init+0x92>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a7d      	ldr	r2, [pc, #500]	; (80021a0 <HAL_I2C_Init+0x27c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	bf94      	ite	ls
 8001fb0:	2301      	movls	r3, #1
 8001fb2:	2300      	movhi	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0e7      	b.n	800218e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4a78      	ldr	r2, [pc, #480]	; (80021a4 <HAL_I2C_Init+0x280>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0c9b      	lsrs	r3, r3, #18
 8001fc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4a6a      	ldr	r2, [pc, #424]	; (8002198 <HAL_I2C_Init+0x274>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d802      	bhi.n	8001ff8 <HAL_I2C_Init+0xd4>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	e009      	b.n	800200c <HAL_I2C_Init+0xe8>
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	4a69      	ldr	r2, [pc, #420]	; (80021a8 <HAL_I2C_Init+0x284>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	3301      	adds	r3, #1
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	430b      	orrs	r3, r1
 8002012:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800201e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	495c      	ldr	r1, [pc, #368]	; (8002198 <HAL_I2C_Init+0x274>)
 8002028:	428b      	cmp	r3, r1
 800202a:	d819      	bhi.n	8002060 <HAL_I2C_Init+0x13c>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1e59      	subs	r1, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fbb1 f3f3 	udiv	r3, r1, r3
 800203a:	1c59      	adds	r1, r3, #1
 800203c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002040:	400b      	ands	r3, r1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_I2C_Init+0x138>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1e59      	subs	r1, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fbb1 f3f3 	udiv	r3, r1, r3
 8002054:	3301      	adds	r3, #1
 8002056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205a:	e051      	b.n	8002100 <HAL_I2C_Init+0x1dc>
 800205c:	2304      	movs	r3, #4
 800205e:	e04f      	b.n	8002100 <HAL_I2C_Init+0x1dc>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d111      	bne.n	800208c <HAL_I2C_Init+0x168>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1e58      	subs	r0, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	440b      	add	r3, r1
 8002076:	fbb0 f3f3 	udiv	r3, r0, r3
 800207a:	3301      	adds	r3, #1
 800207c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	e012      	b.n	80020b2 <HAL_I2C_Init+0x18e>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1e58      	subs	r0, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	0099      	lsls	r1, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Init+0x196>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e022      	b.n	8002100 <HAL_I2C_Init+0x1dc>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10e      	bne.n	80020e0 <HAL_I2C_Init+0x1bc>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1e58      	subs	r0, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6859      	ldr	r1, [r3, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	440b      	add	r3, r1
 80020d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d4:	3301      	adds	r3, #1
 80020d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020de:	e00f      	b.n	8002100 <HAL_I2C_Init+0x1dc>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1e58      	subs	r0, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	0099      	lsls	r1, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	6809      	ldr	r1, [r1, #0]
 8002104:	4313      	orrs	r3, r2
 8002106:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800212e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6911      	ldr	r1, [r2, #16]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68d2      	ldr	r2, [r2, #12]
 800213a:	4311      	orrs	r1, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	430b      	orrs	r3, r1
 8002142:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	000186a0 	.word	0x000186a0
 800219c:	001e847f 	.word	0x001e847f
 80021a0:	003d08ff 	.word	0x003d08ff
 80021a4:	431bde83 	.word	0x431bde83
 80021a8:	10624dd3 	.word	0x10624dd3

080021ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	4608      	mov	r0, r1
 80021b6:	4611      	mov	r1, r2
 80021b8:	461a      	mov	r2, r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	817b      	strh	r3, [r7, #10]
 80021be:	460b      	mov	r3, r1
 80021c0:	813b      	strh	r3, [r7, #8]
 80021c2:	4613      	mov	r3, r2
 80021c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021c6:	f7ff f813 	bl	80011f0 <HAL_GetTick>
 80021ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	f040 80d9 	bne.w	800238c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	2319      	movs	r3, #25
 80021e0:	2201      	movs	r2, #1
 80021e2:	496d      	ldr	r1, [pc, #436]	; (8002398 <HAL_I2C_Mem_Write+0x1ec>)
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f002 f8ab 	bl	8004340 <I2C_WaitOnFlagUntilTimeout>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021f0:	2302      	movs	r3, #2
 80021f2:	e0cc      	b.n	800238e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_I2C_Mem_Write+0x56>
 80021fe:	2302      	movs	r3, #2
 8002200:	e0c5      	b.n	800238e <HAL_I2C_Mem_Write+0x1e2>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d007      	beq.n	8002228 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002236:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2221      	movs	r2, #33	; 0x21
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2240      	movs	r2, #64	; 0x40
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a3a      	ldr	r2, [r7, #32]
 8002252:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002258:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a4d      	ldr	r2, [pc, #308]	; (800239c <HAL_I2C_Mem_Write+0x1f0>)
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800226a:	88f8      	ldrh	r0, [r7, #6]
 800226c:	893a      	ldrh	r2, [r7, #8]
 800226e:	8979      	ldrh	r1, [r7, #10]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	4603      	mov	r3, r0
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f001 fe3a 	bl	8003ef4 <I2C_RequestMemoryWrite>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d052      	beq.n	800232c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e081      	b.n	800238e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f002 f92c 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d107      	bne.n	80022b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e06b      	b.n	800238e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d11b      	bne.n	800232c <HAL_I2C_Mem_Write+0x180>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d017      	beq.n	800232c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1aa      	bne.n	800228a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f002 f918 	bl	800456e <I2C_WaitOnBTFFlagUntilTimeout>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00d      	beq.n	8002360 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	2b04      	cmp	r3, #4
 800234a:	d107      	bne.n	800235c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e016      	b.n	800238e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e000      	b.n	800238e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800238c:	2302      	movs	r3, #2
  }
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	00100002 	.word	0x00100002
 800239c:	ffff0000 	.word	0xffff0000

080023a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	4608      	mov	r0, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	817b      	strh	r3, [r7, #10]
 80023b2:	460b      	mov	r3, r1
 80023b4:	813b      	strh	r3, [r7, #8]
 80023b6:	4613      	mov	r3, r2
 80023b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023ba:	f7fe ff19 	bl	80011f0 <HAL_GetTick>
 80023be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	f040 8208 	bne.w	80027de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2319      	movs	r3, #25
 80023d4:	2201      	movs	r2, #1
 80023d6:	497b      	ldr	r1, [pc, #492]	; (80025c4 <HAL_I2C_Mem_Read+0x224>)
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f001 ffb1 	bl	8004340 <I2C_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
 80023e6:	e1fb      	b.n	80027e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_I2C_Mem_Read+0x56>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e1f4      	b.n	80027e0 <HAL_I2C_Mem_Read+0x440>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d007      	beq.n	800241c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800242a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2222      	movs	r2, #34	; 0x22
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800244c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a5b      	ldr	r2, [pc, #364]	; (80025c8 <HAL_I2C_Mem_Read+0x228>)
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800245e:	88f8      	ldrh	r0, [r7, #6]
 8002460:	893a      	ldrh	r2, [r7, #8]
 8002462:	8979      	ldrh	r1, [r7, #10]
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	4603      	mov	r3, r0
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f001 fdd6 	bl	8004020 <I2C_RequestMemoryRead>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e1b0      	b.n	80027e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002482:	2b00      	cmp	r3, #0
 8002484:	d113      	bne.n	80024ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	623b      	str	r3, [r7, #32]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	623b      	str	r3, [r7, #32]
 800249a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e184      	b.n	80027b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d11b      	bne.n	80024ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e164      	b.n	80027b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d11b      	bne.n	800252e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002504:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002516:	2300      	movs	r3, #0
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	e144      	b.n	80027b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002544:	e138      	b.n	80027b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	2b03      	cmp	r3, #3
 800254c:	f200 80f1 	bhi.w	8002732 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002554:	2b01      	cmp	r3, #1
 8002556:	d123      	bne.n	80025a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f002 f879 	bl	8004654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e139      	b.n	80027e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800259e:	e10b      	b.n	80027b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d14e      	bne.n	8002646 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	2200      	movs	r2, #0
 80025b0:	4906      	ldr	r1, [pc, #24]	; (80025cc <HAL_I2C_Mem_Read+0x22c>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f001 fec4 	bl	8004340 <I2C_WaitOnFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e10e      	b.n	80027e0 <HAL_I2C_Mem_Read+0x440>
 80025c2:	bf00      	nop
 80025c4:	00100002 	.word	0x00100002
 80025c8:	ffff0000 	.word	0xffff0000
 80025cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002644:	e0b8      	b.n	80027b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	2200      	movs	r2, #0
 800264e:	4966      	ldr	r1, [pc, #408]	; (80027e8 <HAL_I2C_Mem_Read+0x448>)
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f001 fe75 	bl	8004340 <I2C_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0bf      	b.n	80027e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800266e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a8:	2200      	movs	r2, #0
 80026aa:	494f      	ldr	r1, [pc, #316]	; (80027e8 <HAL_I2C_Mem_Read+0x448>)
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f001 fe47 	bl	8004340 <I2C_WaitOnFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e091      	b.n	80027e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002730:	e042      	b.n	80027b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f001 ff8c 	bl	8004654 <I2C_WaitOnRXNEFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e04c      	b.n	80027e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b04      	cmp	r3, #4
 8002784:	d118      	bne.n	80027b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f47f aec2 	bne.w	8002546 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80027de:	2302      	movs	r3, #2
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3728      	adds	r7, #40	; 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	00010004 	.word	0x00010004

080027ec <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	4608      	mov	r0, r1
 80027f6:	4611      	mov	r1, r2
 80027f8:	461a      	mov	r2, r3
 80027fa:	4603      	mov	r3, r0
 80027fc:	817b      	strh	r3, [r7, #10]
 80027fe:	460b      	mov	r3, r1
 8002800:	813b      	strh	r3, [r7, #8]
 8002802:	4613      	mov	r3, r2
 8002804:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b20      	cmp	r3, #32
 8002814:	f040 809a 	bne.w	800294c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002818:	4b50      	ldr	r3, [pc, #320]	; (800295c <HAL_I2C_Mem_Read_IT+0x170>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	08db      	lsrs	r3, r3, #3
 800281e:	4a50      	ldr	r2, [pc, #320]	; (8002960 <HAL_I2C_Mem_Read_IT+0x174>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	0a1a      	lsrs	r2, r3, #8
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	009a      	lsls	r2, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3b01      	subs	r3, #1
 8002836:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f043 0220 	orr.w	r2, r3, #32
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e070      	b.n	800294e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d0db      	beq.n	8002832 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_I2C_Mem_Read_IT+0x9c>
 8002884:	2302      	movs	r3, #2
 8002886:	e062      	b.n	800294e <HAL_I2C_Mem_Read_IT+0x162>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d007      	beq.n	80028ae <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028bc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2222      	movs	r2, #34	; 0x22
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2240      	movs	r2, #64	; 0x40
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a3a      	ldr	r2, [r7, #32]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <HAL_I2C_Mem_Read_IT+0x178>)
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80028f0:	897a      	ldrh	r2, [r7, #10]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80028f6:	893a      	ldrh	r2, [r7, #8]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80028fc:	88fa      	ldrh	r2, [r7, #6]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002916:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002926:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002946:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	e000      	b.n	800294e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800294c:	2302      	movs	r3, #2
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000008 	.word	0x20000008
 8002960:	14f8b589 	.word	0x14f8b589
 8002964:	ffff0000 	.word	0xffff0000

08002968 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002988:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	2b10      	cmp	r3, #16
 8002996:	d003      	beq.n	80029a0 <HAL_I2C_EV_IRQHandler+0x38>
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	2b40      	cmp	r3, #64	; 0x40
 800299c:	f040 80c1 	bne.w	8002b22 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10d      	bne.n	80029d6 <HAL_I2C_EV_IRQHandler+0x6e>
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80029c0:	d003      	beq.n	80029ca <HAL_I2C_EV_IRQHandler+0x62>
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80029c8:	d101      	bne.n	80029ce <HAL_I2C_EV_IRQHandler+0x66>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_I2C_EV_IRQHandler+0x68>
 80029ce:	2300      	movs	r3, #0
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	f000 8132 	beq.w	8002c3a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00c      	beq.n	80029fa <HAL_I2C_EV_IRQHandler+0x92>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	0a5b      	lsrs	r3, r3, #9
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f001 feb6 	bl	800475e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fcd2 	bl	800339c <I2C_Master_SB>
 80029f8:	e092      	b.n	8002b20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	08db      	lsrs	r3, r3, #3
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_I2C_EV_IRQHandler+0xb2>
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	0a5b      	lsrs	r3, r3, #9
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fd48 	bl	80034a8 <I2C_Master_ADD10>
 8002a18:	e082      	b.n	8002b20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	085b      	lsrs	r3, r3, #1
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_I2C_EV_IRQHandler+0xd2>
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	0a5b      	lsrs	r3, r3, #9
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 fd62 	bl	80034fc <I2C_Master_ADDR>
 8002a38:	e072      	b.n	8002b20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03b      	beq.n	8002abe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a54:	f000 80f3 	beq.w	8002c3e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	09db      	lsrs	r3, r3, #7
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00f      	beq.n	8002a84 <HAL_I2C_EV_IRQHandler+0x11c>
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	0a9b      	lsrs	r3, r3, #10
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d009      	beq.n	8002a84 <HAL_I2C_EV_IRQHandler+0x11c>
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f942 	bl	8002d06 <I2C_MasterTransmit_TXE>
 8002a82:	e04d      	b.n	8002b20 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80d6 	beq.w	8002c3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	0a5b      	lsrs	r3, r3, #9
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80cf 	beq.w	8002c3e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002aa0:	7bbb      	ldrb	r3, [r7, #14]
 8002aa2:	2b21      	cmp	r3, #33	; 0x21
 8002aa4:	d103      	bne.n	8002aae <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f9c9 	bl	8002e3e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aac:	e0c7      	b.n	8002c3e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	f040 80c4 	bne.w	8002c3e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fa37 	bl	8002f2a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002abc:	e0bf      	b.n	8002c3e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002acc:	f000 80b7 	beq.w	8002c3e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00f      	beq.n	8002afc <HAL_I2C_EV_IRQHandler+0x194>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	0a9b      	lsrs	r3, r3, #10
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d009      	beq.n	8002afc <HAL_I2C_EV_IRQHandler+0x194>
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 faac 	bl	8003052 <I2C_MasterReceive_RXNE>
 8002afa:	e011      	b.n	8002b20 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 809a 	beq.w	8002c3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8093 	beq.w	8002c3e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fb55 	bl	80031c8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b1e:	e08e      	b.n	8002c3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b20:	e08d      	b.n	8002c3e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d004      	beq.n	8002b34 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e007      	b.n	8002b44 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d012      	beq.n	8002b76 <HAL_I2C_EV_IRQHandler+0x20e>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	0a5b      	lsrs	r3, r3, #9
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00c      	beq.n	8002b76 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002b6c:	69b9      	ldr	r1, [r7, #24]
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 ff13 	bl	800399a <I2C_Slave_ADDR>
 8002b74:	e066      	b.n	8002c44 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_I2C_EV_IRQHandler+0x22e>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	0a5b      	lsrs	r3, r3, #9
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 ff4e 	bl	8003a30 <I2C_Slave_STOPF>
 8002b94:	e056      	b.n	8002c44 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b96:	7bbb      	ldrb	r3, [r7, #14]
 8002b98:	2b21      	cmp	r3, #33	; 0x21
 8002b9a:	d002      	beq.n	8002ba2 <HAL_I2C_EV_IRQHandler+0x23a>
 8002b9c:	7bbb      	ldrb	r3, [r7, #14]
 8002b9e:	2b29      	cmp	r3, #41	; 0x29
 8002ba0:	d125      	bne.n	8002bee <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	09db      	lsrs	r3, r3, #7
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00f      	beq.n	8002bce <HAL_I2C_EV_IRQHandler+0x266>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	0a9b      	lsrs	r3, r3, #10
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_I2C_EV_IRQHandler+0x266>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	089b      	lsrs	r3, r3, #2
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d103      	bne.n	8002bce <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fe29 	bl	800381e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bcc:	e039      	b.n	8002c42 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d033      	beq.n	8002c42 <HAL_I2C_EV_IRQHandler+0x2da>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	0a5b      	lsrs	r3, r3, #9
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d02d      	beq.n	8002c42 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fe56 	bl	8003898 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bec:	e029      	b.n	8002c42 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00f      	beq.n	8002c1a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	0a9b      	lsrs	r3, r3, #10
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d103      	bne.n	8002c1a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fe61 	bl	80038da <I2C_SlaveReceive_RXNE>
 8002c18:	e014      	b.n	8002c44 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00e      	beq.n	8002c44 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	0a5b      	lsrs	r3, r3, #9
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fe8f 	bl	8003956 <I2C_SlaveReceive_BTF>
 8002c38:	e004      	b.n	8002c44 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002c3a:	bf00      	nop
 8002c3c:	e002      	b.n	8002c44 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c3e:	bf00      	nop
 8002c40:	e000      	b.n	8002c44 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c42:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	70fb      	strb	r3, [r7, #3]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d1c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d150      	bne.n	8002dce <I2C_MasterTransmit_TXE+0xc8>
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b21      	cmp	r3, #33	; 0x21
 8002d30:	d14d      	bne.n	8002dce <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d01d      	beq.n	8002d74 <I2C_MasterTransmit_TXE+0x6e>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d01a      	beq.n	8002d74 <I2C_MasterTransmit_TXE+0x6e>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d44:	d016      	beq.n	8002d74 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d54:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2211      	movs	r2, #17
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff6c 	bl	8002c4a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d72:	e060      	b.n	8002e36 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d82:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d92:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d107      	bne.n	8002dbe <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ff87 	bl	8002cca <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dbc:	e03b      	b.n	8002e36 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ff3f 	bl	8002c4a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dcc:	e033      	b.n	8002e36 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	2b21      	cmp	r3, #33	; 0x21
 8002dd2:	d005      	beq.n	8002de0 <I2C_MasterTransmit_TXE+0xda>
 8002dd4:	7bbb      	ldrb	r3, [r7, #14]
 8002dd6:	2b40      	cmp	r3, #64	; 0x40
 8002dd8:	d12d      	bne.n	8002e36 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	2b22      	cmp	r3, #34	; 0x22
 8002dde:	d12a      	bne.n	8002e36 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d108      	bne.n	8002dfc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002dfa:	e01c      	b.n	8002e36 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d103      	bne.n	8002e10 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f88e 	bl	8002f2a <I2C_MemoryTransmit_TXE_BTF>
}
 8002e0e:	e012      	b.n	8002e36 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	781a      	ldrb	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e34:	e7ff      	b.n	8002e36 <I2C_MasterTransmit_TXE+0x130>
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b21      	cmp	r3, #33	; 0x21
 8002e56:	d164      	bne.n	8002f22 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d012      	beq.n	8002e88 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002e86:	e04c      	b.n	8002f22 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d01d      	beq.n	8002eca <I2C_MasterTransmit_BTF+0x8c>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d01a      	beq.n	8002eca <I2C_MasterTransmit_BTF+0x8c>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e9a:	d016      	beq.n	8002eca <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eaa:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2211      	movs	r2, #17
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff fec1 	bl	8002c4a <HAL_I2C_MasterTxCpltCallback>
}
 8002ec8:	e02b      	b.n	8002f22 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ed8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d107      	bne.n	8002f14 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff fedc 	bl	8002cca <HAL_I2C_MemTxCpltCallback>
}
 8002f12:	e006      	b.n	8002f22 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fe94 	bl	8002c4a <HAL_I2C_MasterTxCpltCallback>
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f38:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d11d      	bne.n	8002f7e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d10b      	bne.n	8002f62 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5a:	1c9a      	adds	r2, r3, #2
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002f60:	e073      	b.n	800304a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	121b      	asrs	r3, r3, #8
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f7c:	e065      	b.n	800304a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d10b      	bne.n	8002f9e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f9c:	e055      	b.n	800304a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d151      	bne.n	800304a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b22      	cmp	r3, #34	; 0x22
 8002faa:	d10d      	bne.n	8002fc8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fba:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fc6:	e040      	b.n	800304a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d015      	beq.n	8002ffe <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b21      	cmp	r3, #33	; 0x21
 8002fd6:	d112      	bne.n	8002ffe <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ffc:	e025      	b.n	800304a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d120      	bne.n	800304a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b21      	cmp	r3, #33	; 0x21
 800300c:	d11d      	bne.n	800304a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800301c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fe40 	bl	8002cca <HAL_I2C_MemTxCpltCallback>
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b22      	cmp	r3, #34	; 0x22
 8003064:	f040 80ac 	bne.w	80031c0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b03      	cmp	r3, #3
 8003074:	d921      	bls.n	80030ba <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	f040 808c 	bne.w	80031c0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80030b8:	e082      	b.n	80031c0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d075      	beq.n	80031ae <I2C_MasterReceive_RXNE+0x15c>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d002      	beq.n	80030ce <I2C_MasterReceive_RXNE+0x7c>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d16f      	bne.n	80031ae <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f001 fa8e 	bl	80045f0 <I2C_WaitOnSTOPRequestThroughIT>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d142      	bne.n	8003160 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030f8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d10a      	bne.n	800314a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fcbc 	bl	8000ac0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003148:	e03a      	b.n	80031c0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2212      	movs	r2, #18
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff fd80 	bl	8002c5e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800315e:	e02f      	b.n	80031c0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800316e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff fd99 	bl	8002cde <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031ac:	e008      	b.n	80031c0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031bc:	605a      	str	r2, [r3, #4]
}
 80031be:	e7ff      	b.n	80031c0 <I2C_MasterReceive_RXNE+0x16e>
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d11b      	bne.n	8003218 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ee:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003216:	e0bd      	b.n	8003394 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b03      	cmp	r3, #3
 8003220:	d129      	bne.n	8003276 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003230:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d00a      	beq.n	800324e <I2C_MasterReceive_BTF+0x86>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d007      	beq.n	800324e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003274:	e08e      	b.n	8003394 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d176      	bne.n	800336e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d002      	beq.n	800328c <I2C_MasterReceive_BTF+0xc4>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b10      	cmp	r3, #16
 800328a:	d108      	bne.n	800329e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e019      	b.n	80032d2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d002      	beq.n	80032aa <I2C_MasterReceive_BTF+0xe2>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d108      	bne.n	80032bc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e00a      	b.n	80032d2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b10      	cmp	r3, #16
 80032c0:	d007      	beq.n	80032d2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800332c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b40      	cmp	r3, #64	; 0x40
 8003340:	d10a      	bne.n	8003358 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7fd fbb5 	bl	8000ac0 <HAL_I2C_MemRxCpltCallback>
}
 8003356:	e01d      	b.n	8003394 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2212      	movs	r2, #18
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fc79 	bl	8002c5e <HAL_I2C_MasterRxCpltCallback>
}
 800336c:	e012      	b.n	8003394 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d117      	bne.n	80033e0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d109      	bne.n	80033cc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033c8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80033ca:	e067      	b.n	800349c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	611a      	str	r2, [r3, #16]
}
 80033de:	e05d      	b.n	800349c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033e8:	d133      	bne.n	8003452 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b21      	cmp	r3, #33	; 0x21
 80033f4:	d109      	bne.n	800340a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003406:	611a      	str	r2, [r3, #16]
 8003408:	e008      	b.n	800341c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	b2da      	uxtb	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003420:	2b00      	cmp	r3, #0
 8003422:	d004      	beq.n	800342e <I2C_Master_SB+0x92>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d108      	bne.n	8003440 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	2b00      	cmp	r3, #0
 8003434:	d032      	beq.n	800349c <I2C_Master_SB+0x100>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d02d      	beq.n	800349c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800344e:	605a      	str	r2, [r3, #4]
}
 8003450:	e024      	b.n	800349c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10e      	bne.n	8003478 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	b29b      	uxth	r3, r3
 8003460:	11db      	asrs	r3, r3, #7
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f003 0306 	and.w	r3, r3, #6
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f063 030f 	orn	r3, r3, #15
 800346e:	b2da      	uxtb	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	611a      	str	r2, [r3, #16]
}
 8003476:	e011      	b.n	800349c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10d      	bne.n	800349c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	b29b      	uxth	r3, r3
 8003486:	11db      	asrs	r3, r3, #7
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f003 0306 	and.w	r3, r3, #6
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f063 030e 	orn	r3, r3, #14
 8003494:	b2da      	uxtb	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	611a      	str	r2, [r3, #16]
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <I2C_Master_ADD10+0x26>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d108      	bne.n	80034e0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00c      	beq.n	80034f0 <I2C_Master_ADD10+0x48>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ee:	605a      	str	r2, [r3, #4]
  }
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b091      	sub	sp, #68	; 0x44
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800350a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b22      	cmp	r3, #34	; 0x22
 8003524:	f040 8169 	bne.w	80037fa <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10f      	bne.n	8003550 <I2C_Master_ADDR+0x54>
 8003530:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d10b      	bne.n	8003550 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003538:	2300      	movs	r3, #0
 800353a:	633b      	str	r3, [r7, #48]	; 0x30
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	633b      	str	r3, [r7, #48]	; 0x30
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	633b      	str	r3, [r7, #48]	; 0x30
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	e160      	b.n	8003812 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003554:	2b00      	cmp	r3, #0
 8003556:	d11d      	bne.n	8003594 <I2C_Master_ADDR+0x98>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003560:	d118      	bne.n	8003594 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003562:	2300      	movs	r3, #0
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003586:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	651a      	str	r2, [r3, #80]	; 0x50
 8003592:	e13e      	b.n	8003812 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d113      	bne.n	80035c6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359e:	2300      	movs	r3, #0
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e115      	b.n	80037f2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	f040 808a 	bne.w	80036e6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80035d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035d8:	d137      	bne.n	800364a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f8:	d113      	bne.n	8003622 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003608:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360a:	2300      	movs	r3, #0
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	e0e7      	b.n	80037f2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003622:	2300      	movs	r3, #0
 8003624:	623b      	str	r3, [r7, #32]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	623b      	str	r3, [r7, #32]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	623b      	str	r3, [r7, #32]
 8003636:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e0d3      	b.n	80037f2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	2b08      	cmp	r3, #8
 800364e:	d02e      	beq.n	80036ae <I2C_Master_ADDR+0x1b2>
 8003650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003652:	2b20      	cmp	r3, #32
 8003654:	d02b      	beq.n	80036ae <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003658:	2b12      	cmp	r3, #18
 800365a:	d102      	bne.n	8003662 <I2C_Master_ADDR+0x166>
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	2b01      	cmp	r3, #1
 8003660:	d125      	bne.n	80036ae <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	2b04      	cmp	r3, #4
 8003666:	d00e      	beq.n	8003686 <I2C_Master_ADDR+0x18a>
 8003668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366a:	2b02      	cmp	r3, #2
 800366c:	d00b      	beq.n	8003686 <I2C_Master_ADDR+0x18a>
 800366e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003670:	2b10      	cmp	r3, #16
 8003672:	d008      	beq.n	8003686 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e007      	b.n	8003696 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003694:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	e0a1      	b.n	80037f2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036bc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e085      	b.n	80037f2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d14d      	bne.n	800378c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80036f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d016      	beq.n	8003724 <I2C_Master_ADDR+0x228>
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d013      	beq.n	8003724 <I2C_Master_ADDR+0x228>
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d010      	beq.n	8003724 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003710:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e007      	b.n	8003734 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003732:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003742:	d117      	bne.n	8003774 <I2C_Master_ADDR+0x278>
 8003744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003746:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800374a:	d00b      	beq.n	8003764 <I2C_Master_ADDR+0x268>
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	2b01      	cmp	r3, #1
 8003750:	d008      	beq.n	8003764 <I2C_Master_ADDR+0x268>
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	2b08      	cmp	r3, #8
 8003756:	d005      	beq.n	8003764 <I2C_Master_ADDR+0x268>
 8003758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375a:	2b10      	cmp	r3, #16
 800375c:	d002      	beq.n	8003764 <I2C_Master_ADDR+0x268>
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	2b20      	cmp	r3, #32
 8003762:	d107      	bne.n	8003774 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003772:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	e032      	b.n	80037f2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800379a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037aa:	d117      	bne.n	80037dc <I2C_Master_ADDR+0x2e0>
 80037ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037b2:	d00b      	beq.n	80037cc <I2C_Master_ADDR+0x2d0>
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d008      	beq.n	80037cc <I2C_Master_ADDR+0x2d0>
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d005      	beq.n	80037cc <I2C_Master_ADDR+0x2d0>
 80037c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d002      	beq.n	80037cc <I2C_Master_ADDR+0x2d0>
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d107      	bne.n	80037dc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037dc:	2300      	movs	r3, #0
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80037f8:	e00b      	b.n	8003812 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
}
 8003810:	e7ff      	b.n	8003812 <I2C_Master_ADDR+0x316>
 8003812:	bf00      	nop
 8003814:	3744      	adds	r7, #68	; 0x44
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d02b      	beq.n	8003890 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d114      	bne.n	8003890 <I2C_SlaveTransmit_TXE+0x72>
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b29      	cmp	r3, #41	; 0x29
 800386a:	d111      	bne.n	8003890 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2221      	movs	r2, #33	; 0x21
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2228      	movs	r2, #40	; 0x28
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff f9f1 	bl	8002c72 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d011      	beq.n	80038ce <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d02c      	beq.n	800394e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d114      	bne.n	800394e <I2C_SlaveReceive_RXNE+0x74>
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b2a      	cmp	r3, #42	; 0x2a
 8003928:	d111      	bne.n	800394e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003938:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2222      	movs	r2, #34	; 0x22
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2228      	movs	r2, #40	; 0x28
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff f99c 	bl	8002c86 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d012      	beq.n	800398e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039b4:	2b28      	cmp	r3, #40	; 0x28
 80039b6:	d127      	bne.n	8003a08 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	09db      	lsrs	r3, r3, #7
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d103      	bne.n	80039ec <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	81bb      	strh	r3, [r7, #12]
 80039ea:	e002      	b.n	80039f2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80039fa:	89ba      	ldrh	r2, [r7, #12]
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	4619      	mov	r1, r3
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff f94a 	bl	8002c9a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a06:	e00e      	b.n	8003a26 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a4e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8c:	d172      	bne.n	8003b74 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b22      	cmp	r3, #34	; 0x22
 8003a92:	d002      	beq.n	8003a9a <I2C_Slave_STOPF+0x6a>
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b2a      	cmp	r3, #42	; 0x2a
 8003a98:	d135      	bne.n	8003b06 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f043 0204 	orr.w	r2, r3, #4
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003acc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd ff80 	bl	80019d8 <HAL_DMA_GetState>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d049      	beq.n	8003b72 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	4a69      	ldr	r2, [pc, #420]	; (8003c88 <I2C_Slave_STOPF+0x258>)
 8003ae4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd fdc8 	bl	8001680 <HAL_DMA_Abort_IT>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d03d      	beq.n	8003b72 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b00:	4610      	mov	r0, r2
 8003b02:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b04:	e035      	b.n	8003b72 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f043 0204 	orr.w	r2, r3, #4
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd ff4a 	bl	80019d8 <HAL_DMA_GetState>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d014      	beq.n	8003b74 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	4a4e      	ldr	r2, [pc, #312]	; (8003c88 <I2C_Slave_STOPF+0x258>)
 8003b50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd fd92 	bl	8001680 <HAL_DMA_Abort_IT>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4798      	blx	r3
 8003b70:	e000      	b.n	8003b74 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b72:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d03e      	beq.n	8003bfc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d112      	bne.n	8003bb2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbc:	2b40      	cmp	r3, #64	; 0x40
 8003bbe:	d112      	bne.n	8003be6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f043 0204 	orr.w	r2, r3, #4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f843 	bl	8003c90 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c0a:	e039      	b.n	8003c80 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c10:	d109      	bne.n	8003c26 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2228      	movs	r2, #40	; 0x28
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff f830 	bl	8002c86 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b28      	cmp	r3, #40	; 0x28
 8003c30:	d111      	bne.n	8003c56 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <I2C_Slave_STOPF+0x25c>)
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff f831 	bl	8002cb6 <HAL_I2C_ListenCpltCallback>
}
 8003c54:	e014      	b.n	8003c80 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	2b22      	cmp	r3, #34	; 0x22
 8003c5c:	d002      	beq.n	8003c64 <I2C_Slave_STOPF+0x234>
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	2b22      	cmp	r3, #34	; 0x22
 8003c62:	d10d      	bne.n	8003c80 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff f803 	bl	8002c86 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	080041f1 	.word	0x080041f1
 8003c8c:	ffff0000 	.word	0xffff0000

08003c90 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ca8:	7bbb      	ldrb	r3, [r7, #14]
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d002      	beq.n	8003cb4 <I2C_ITError+0x24>
 8003cae:	7bbb      	ldrb	r3, [r7, #14]
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d10a      	bne.n	8003cca <I2C_ITError+0x3a>
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	2b22      	cmp	r3, #34	; 0x22
 8003cb8:	d107      	bne.n	8003cca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cd0:	2b28      	cmp	r3, #40	; 0x28
 8003cd2:	d107      	bne.n	8003ce4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2228      	movs	r2, #40	; 0x28
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ce2:	e015      	b.n	8003d10 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf2:	d00a      	beq.n	8003d0a <I2C_ITError+0x7a>
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	2b60      	cmp	r3, #96	; 0x60
 8003cf8:	d007      	beq.n	8003d0a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1e:	d162      	bne.n	8003de6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d2e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d020      	beq.n	8003d80 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d42:	4a6a      	ldr	r2, [pc, #424]	; (8003eec <I2C_ITError+0x25c>)
 8003d44:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd fc98 	bl	8001680 <HAL_DMA_Abort_IT>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8089 	beq.w	8003e6a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4798      	blx	r3
 8003d7e:	e074      	b.n	8003e6a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	4a59      	ldr	r2, [pc, #356]	; (8003eec <I2C_ITError+0x25c>)
 8003d86:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fd fc77 	bl	8001680 <HAL_DMA_Abort_IT>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d068      	beq.n	8003e6a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	d10b      	bne.n	8003dbe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003de0:	4610      	mov	r0, r2
 8003de2:	4798      	blx	r3
 8003de4:	e041      	b.n	8003e6a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b60      	cmp	r3, #96	; 0x60
 8003df0:	d125      	bne.n	8003e3e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b40      	cmp	r3, #64	; 0x40
 8003e0c:	d10b      	bne.n	8003e26 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0201 	bic.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fe ff5b 	bl	8002cf2 <HAL_I2C_AbortCpltCallback>
 8003e3c:	e015      	b.n	8003e6a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d10b      	bne.n	8003e64 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7fe ff3a 	bl	8002cde <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10e      	bne.n	8003e98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d104      	bne.n	8003e98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ea6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d113      	bne.n	8003ee4 <I2C_ITError+0x254>
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	2b28      	cmp	r3, #40	; 0x28
 8003ec0:	d110      	bne.n	8003ee4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <I2C_ITError+0x260>)
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fe fee9 	bl	8002cb6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	080041f1 	.word	0x080041f1
 8003ef0:	ffff0000 	.word	0xffff0000

08003ef4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	4608      	mov	r0, r1
 8003efe:	4611      	mov	r1, r2
 8003f00:	461a      	mov	r2, r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	817b      	strh	r3, [r7, #10]
 8003f06:	460b      	mov	r3, r1
 8003f08:	813b      	strh	r3, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fa08 	bl	8004340 <I2C_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f44:	d103      	bne.n	8003f4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e05f      	b.n	8004012 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f52:	897b      	ldrh	r3, [r7, #10]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	6a3a      	ldr	r2, [r7, #32]
 8003f66:	492d      	ldr	r1, [pc, #180]	; (800401c <I2C_RequestMemoryWrite+0x128>)
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fa40 	bl	80043ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e04c      	b.n	8004012 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	6a39      	ldr	r1, [r7, #32]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 faaa 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d107      	bne.n	8003fb6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e02b      	b.n	8004012 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d105      	bne.n	8003fcc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc0:	893b      	ldrh	r3, [r7, #8]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	611a      	str	r2, [r3, #16]
 8003fca:	e021      	b.n	8004010 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fcc:	893b      	ldrh	r3, [r7, #8]
 8003fce:	0a1b      	lsrs	r3, r3, #8
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fdc:	6a39      	ldr	r1, [r7, #32]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 fa84 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d107      	bne.n	8004002 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004000:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e005      	b.n	8004012 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004006:	893b      	ldrh	r3, [r7, #8]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	00010002 	.word	0x00010002

08004020 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	4608      	mov	r0, r1
 800402a:	4611      	mov	r1, r2
 800402c:	461a      	mov	r2, r3
 800402e:	4603      	mov	r3, r0
 8004030:	817b      	strh	r3, [r7, #10]
 8004032:	460b      	mov	r3, r1
 8004034:	813b      	strh	r3, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004048:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004058:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	2200      	movs	r2, #0
 8004062:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f96a 	bl	8004340 <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00d      	beq.n	800408e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004080:	d103      	bne.n	800408a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e0aa      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800408e:	897b      	ldrh	r3, [r7, #10]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800409c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	6a3a      	ldr	r2, [r7, #32]
 80040a2:	4952      	ldr	r1, [pc, #328]	; (80041ec <I2C_RequestMemoryRead+0x1cc>)
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f9a2 	bl	80043ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e097      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040cc:	6a39      	ldr	r1, [r7, #32]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fa0c 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00d      	beq.n	80040f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d107      	bne.n	80040f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e076      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d105      	bne.n	8004108 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040fc:	893b      	ldrh	r3, [r7, #8]
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	611a      	str	r2, [r3, #16]
 8004106:	e021      	b.n	800414c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004108:	893b      	ldrh	r3, [r7, #8]
 800410a:	0a1b      	lsrs	r3, r3, #8
 800410c:	b29b      	uxth	r3, r3
 800410e:	b2da      	uxtb	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004118:	6a39      	ldr	r1, [r7, #32]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f9e6 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00d      	beq.n	8004142 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	2b04      	cmp	r3, #4
 800412c:	d107      	bne.n	800413e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e050      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004142:	893b      	ldrh	r3, [r7, #8]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414e:	6a39      	ldr	r1, [r7, #32]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f9cb 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00d      	beq.n	8004178 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	2b04      	cmp	r3, #4
 8004162:	d107      	bne.n	8004174 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004172:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e035      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004186:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	2200      	movs	r2, #0
 8004190:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f8d3 	bl	8004340 <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00d      	beq.n	80041bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ae:	d103      	bne.n	80041b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e013      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041bc:	897b      	ldrh	r3, [r7, #10]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	6a3a      	ldr	r2, [r7, #32]
 80041d0:	4906      	ldr	r1, [pc, #24]	; (80041ec <I2C_RequestMemoryRead+0x1cc>)
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f90b 	bl	80043ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	00010002 	.word	0x00010002

080041f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004208:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800420a:	4b4b      	ldr	r3, [pc, #300]	; (8004338 <I2C_DMAAbort+0x148>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	08db      	lsrs	r3, r3, #3
 8004210:	4a4a      	ldr	r2, [pc, #296]	; (800433c <I2C_DMAAbort+0x14c>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	0a1a      	lsrs	r2, r3, #8
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	00da      	lsls	r2, r3, #3
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f043 0220 	orr.w	r2, r3, #32
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004236:	e00a      	b.n	800424e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3b01      	subs	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424c:	d0ea      	beq.n	8004224 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425a:	2200      	movs	r2, #0
 800425c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	2200      	movs	r2, #0
 800426c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004290:	2200      	movs	r2, #0
 8004292:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	2200      	movs	r2, #0
 80042a2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b60      	cmp	r3, #96	; 0x60
 80042be:	d10e      	bne.n	80042de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2200      	movs	r2, #0
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	f7fe fd0b 	bl	8002cf2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042dc:	e027      	b.n	800432e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042e4:	2b28      	cmp	r3, #40	; 0x28
 80042e6:	d117      	bne.n	8004318 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004306:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2228      	movs	r2, #40	; 0x28
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004316:	e007      	b.n	8004328 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004328:	6978      	ldr	r0, [r7, #20]
 800432a:	f7fe fcd8 	bl	8002cde <HAL_I2C_ErrorCallback>
}
 800432e:	bf00      	nop
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000008 	.word	0x20000008
 800433c:	14f8b589 	.word	0x14f8b589

08004340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004350:	e025      	b.n	800439e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d021      	beq.n	800439e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fc ff49 	bl	80011f0 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <I2C_WaitOnFlagUntilTimeout+0x30>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d116      	bne.n	800439e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f043 0220 	orr.w	r2, r3, #32
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e023      	b.n	80043e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	0c1b      	lsrs	r3, r3, #16
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d10d      	bne.n	80043c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	43da      	mvns	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4013      	ands	r3, r2
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	bf0c      	ite	eq
 80043ba:	2301      	moveq	r3, #1
 80043bc:	2300      	movne	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	e00c      	b.n	80043de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	43da      	mvns	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4013      	ands	r3, r2
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf0c      	ite	eq
 80043d6:	2301      	moveq	r3, #1
 80043d8:	2300      	movne	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d0b6      	beq.n	8004352 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	607a      	str	r2, [r7, #4]
 80043fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043fc:	e051      	b.n	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440c:	d123      	bne.n	8004456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004426:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f043 0204 	orr.w	r2, r3, #4
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e046      	b.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d021      	beq.n	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445e:	f7fc fec7 	bl	80011f0 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d116      	bne.n	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f043 0220 	orr.w	r2, r3, #32
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e020      	b.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	0c1b      	lsrs	r3, r3, #16
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d10c      	bne.n	80044c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	43da      	mvns	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4013      	ands	r3, r2
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	bf14      	ite	ne
 80044be:	2301      	movne	r3, #1
 80044c0:	2300      	moveq	r3, #0
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	e00b      	b.n	80044de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	43da      	mvns	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4013      	ands	r3, r2
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bf14      	ite	ne
 80044d8:	2301      	movne	r3, #1
 80044da:	2300      	moveq	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d18d      	bne.n	80043fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044f8:	e02d      	b.n	8004556 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f900 	bl	8004700 <I2C_IsAcknowledgeFailed>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e02d      	b.n	8004566 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d021      	beq.n	8004556 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fc fe6d 	bl	80011f0 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d116      	bne.n	8004556 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e007      	b.n	8004566 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004560:	2b80      	cmp	r3, #128	; 0x80
 8004562:	d1ca      	bne.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800457a:	e02d      	b.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f8bf 	bl	8004700 <I2C_IsAcknowledgeFailed>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e02d      	b.n	80045e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004592:	d021      	beq.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004594:	f7fc fe2c 	bl	80011f0 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d302      	bcc.n	80045aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d116      	bne.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e007      	b.n	80045e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d1ca      	bne.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80045fc:	4b13      	ldr	r3, [pc, #76]	; (800464c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	08db      	lsrs	r3, r3, #3
 8004602:	4a13      	ldr	r2, [pc, #76]	; (8004650 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	0a1a      	lsrs	r2, r3, #8
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3b01      	subs	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e008      	b.n	8004640 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463c:	d0e9      	beq.n	8004612 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	20000008 	.word	0x20000008
 8004650:	14f8b589 	.word	0x14f8b589

08004654 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004660:	e042      	b.n	80046e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0310 	and.w	r3, r3, #16
 800466c:	2b10      	cmp	r3, #16
 800466e:	d119      	bne.n	80046a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0210 	mvn.w	r2, #16
 8004678:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e029      	b.n	80046f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a4:	f7fc fda4 	bl	80011f0 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d302      	bcc.n	80046ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d116      	bne.n	80046e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e007      	b.n	80046f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d1b5      	bne.n	8004662 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004716:	d11b      	bne.n	8004750 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004720:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	f043 0204 	orr.w	r2, r3, #4
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800476e:	d103      	bne.n	8004778 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004776:	e007      	b.n	8004788 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004780:	d102      	bne.n	8004788 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2208      	movs	r2, #8
 8004786:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e267      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d075      	beq.n	800489e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b2:	4b88      	ldr	r3, [pc, #544]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d00c      	beq.n	80047d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047be:	4b85      	ldr	r3, [pc, #532]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d112      	bne.n	80047f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ca:	4b82      	ldr	r3, [pc, #520]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d6:	d10b      	bne.n	80047f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d8:	4b7e      	ldr	r3, [pc, #504]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d05b      	beq.n	800489c <HAL_RCC_OscConfig+0x108>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d157      	bne.n	800489c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e242      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f8:	d106      	bne.n	8004808 <HAL_RCC_OscConfig+0x74>
 80047fa:	4b76      	ldr	r3, [pc, #472]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a75      	ldr	r2, [pc, #468]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e01d      	b.n	8004844 <HAL_RCC_OscConfig+0xb0>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004810:	d10c      	bne.n	800482c <HAL_RCC_OscConfig+0x98>
 8004812:	4b70      	ldr	r3, [pc, #448]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a6f      	ldr	r2, [pc, #444]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4b6d      	ldr	r3, [pc, #436]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6c      	ldr	r2, [pc, #432]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e00b      	b.n	8004844 <HAL_RCC_OscConfig+0xb0>
 800482c:	4b69      	ldr	r3, [pc, #420]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a68      	ldr	r2, [pc, #416]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	4b66      	ldr	r3, [pc, #408]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a65      	ldr	r2, [pc, #404]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800483e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d013      	beq.n	8004874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fc fcd0 	bl	80011f0 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004854:	f7fc fccc 	bl	80011f0 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	; 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e207      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	4b5b      	ldr	r3, [pc, #364]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0xc0>
 8004872:	e014      	b.n	800489e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004874:	f7fc fcbc 	bl	80011f0 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800487c:	f7fc fcb8 	bl	80011f0 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	; 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e1f3      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488e:	4b51      	ldr	r3, [pc, #324]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0xe8>
 800489a:	e000      	b.n	800489e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d063      	beq.n	8004972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048aa:	4b4a      	ldr	r3, [pc, #296]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b6:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d11c      	bne.n	80048fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048c2:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d116      	bne.n	80048fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ce:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <HAL_RCC_OscConfig+0x152>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d001      	beq.n	80048e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e1c7      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e6:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4937      	ldr	r1, [pc, #220]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048fa:	e03a      	b.n	8004972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d020      	beq.n	8004946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004904:	4b34      	ldr	r3, [pc, #208]	; (80049d8 <HAL_RCC_OscConfig+0x244>)
 8004906:	2201      	movs	r2, #1
 8004908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fc fc71 	bl	80011f0 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004912:	f7fc fc6d 	bl	80011f0 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e1a8      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004924:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004930:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4925      	ldr	r1, [pc, #148]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004940:	4313      	orrs	r3, r2
 8004942:	600b      	str	r3, [r1, #0]
 8004944:	e015      	b.n	8004972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <HAL_RCC_OscConfig+0x244>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fc fc50 	bl	80011f0 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004954:	f7fc fc4c 	bl	80011f0 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e187      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004966:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d036      	beq.n	80049ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d016      	beq.n	80049b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <HAL_RCC_OscConfig+0x248>)
 8004988:	2201      	movs	r2, #1
 800498a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498c:	f7fc fc30 	bl	80011f0 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004994:	f7fc fc2c 	bl	80011f0 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e167      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80049a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0x200>
 80049b2:	e01b      	b.n	80049ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_RCC_OscConfig+0x248>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ba:	f7fc fc19 	bl	80011f0 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c0:	e00e      	b.n	80049e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c2:	f7fc fc15 	bl	80011f0 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d907      	bls.n	80049e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e150      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
 80049d4:	40023800 	.word	0x40023800
 80049d8:	42470000 	.word	0x42470000
 80049dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e0:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 80049e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ea      	bne.n	80049c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8097 	beq.w	8004b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fe:	4b81      	ldr	r3, [pc, #516]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10f      	bne.n	8004a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60bb      	str	r3, [r7, #8]
 8004a0e:	4b7d      	ldr	r3, [pc, #500]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	4a7c      	ldr	r2, [pc, #496]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1a:	4b7a      	ldr	r3, [pc, #488]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2a:	4b77      	ldr	r3, [pc, #476]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d118      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a36:	4b74      	ldr	r3, [pc, #464]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a73      	ldr	r2, [pc, #460]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a42:	f7fc fbd5 	bl	80011f0 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4a:	f7fc fbd1 	bl	80011f0 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e10c      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5c:	4b6a      	ldr	r3, [pc, #424]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d106      	bne.n	8004a7e <HAL_RCC_OscConfig+0x2ea>
 8004a70:	4b64      	ldr	r3, [pc, #400]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	4a63      	ldr	r2, [pc, #396]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7c:	e01c      	b.n	8004ab8 <HAL_RCC_OscConfig+0x324>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b05      	cmp	r3, #5
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x30c>
 8004a86:	4b5f      	ldr	r3, [pc, #380]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	4a5e      	ldr	r2, [pc, #376]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	6713      	str	r3, [r2, #112]	; 0x70
 8004a92:	4b5c      	ldr	r3, [pc, #368]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a5b      	ldr	r2, [pc, #364]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9e:	e00b      	b.n	8004ab8 <HAL_RCC_OscConfig+0x324>
 8004aa0:	4b58      	ldr	r3, [pc, #352]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	4a57      	ldr	r2, [pc, #348]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004aac:	4b55      	ldr	r3, [pc, #340]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	4a54      	ldr	r2, [pc, #336]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	f023 0304 	bic.w	r3, r3, #4
 8004ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d015      	beq.n	8004aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fc fb96 	bl	80011f0 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac8:	f7fc fb92 	bl	80011f0 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e0cb      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ade:	4b49      	ldr	r3, [pc, #292]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0ee      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x334>
 8004aea:	e014      	b.n	8004b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aec:	f7fc fb80 	bl	80011f0 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af2:	e00a      	b.n	8004b0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af4:	f7fc fb7c 	bl	80011f0 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e0b5      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0a:	4b3e      	ldr	r3, [pc, #248]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1ee      	bne.n	8004af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d105      	bne.n	8004b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1c:	4b39      	ldr	r3, [pc, #228]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	4a38      	ldr	r2, [pc, #224]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80a1 	beq.w	8004c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b32:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d05c      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d141      	bne.n	8004bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b46:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fc fb50 	bl	80011f0 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fc fb4c 	bl	80011f0 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e087      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	019b      	lsls	r3, r3, #6
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	491b      	ldr	r1, [pc, #108]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba2:	f7fc fb25 	bl	80011f0 <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004baa:	f7fc fb21 	bl	80011f0 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e05c      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x416>
 8004bc8:	e054      	b.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fc fb0e 	bl	80011f0 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fc fb0a 	bl	80011f0 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e045      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x444>
 8004bf6:	e03d      	b.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d107      	bne.n	8004c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e038      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
 8004c04:	40023800 	.word	0x40023800
 8004c08:	40007000 	.word	0x40007000
 8004c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c10:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <HAL_RCC_OscConfig+0x4ec>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d028      	beq.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d121      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d11a      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d111      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800

08004c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0cc      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c98:	4b68      	ldr	r3, [pc, #416]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d90c      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b65      	ldr	r3, [pc, #404]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b63      	ldr	r3, [pc, #396]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0b8      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d020      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cd8:	4b59      	ldr	r3, [pc, #356]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a58      	ldr	r2, [pc, #352]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cf0:	4b53      	ldr	r3, [pc, #332]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	4a52      	ldr	r2, [pc, #328]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cfc:	4b50      	ldr	r3, [pc, #320]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	494d      	ldr	r1, [pc, #308]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d044      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d107      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	4b47      	ldr	r3, [pc, #284]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d119      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e07f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d003      	beq.n	8004d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d107      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d42:	4b3f      	ldr	r3, [pc, #252]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e06f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d52:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e067      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d62:	4b37      	ldr	r3, [pc, #220]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f023 0203 	bic.w	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4934      	ldr	r1, [pc, #208]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d74:	f7fc fa3c 	bl	80011f0 <HAL_GetTick>
 8004d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7c:	f7fc fa38 	bl	80011f0 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e04f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d92:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 020c 	and.w	r2, r3, #12
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d1eb      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da4:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d20c      	bcs.n	8004dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4b22      	ldr	r3, [pc, #136]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dba:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e032      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dd8:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4916      	ldr	r1, [pc, #88]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004df6:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	490e      	ldr	r1, [pc, #56]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e0a:	f000 f821 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	490a      	ldr	r1, [pc, #40]	; (8004e44 <HAL_RCC_ClockConfig+0x1c0>)
 8004e1c:	5ccb      	ldrb	r3, [r1, r3]
 8004e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e22:	4a09      	ldr	r2, [pc, #36]	; (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e26:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fc f99c 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023c00 	.word	0x40023c00
 8004e40:	40023800 	.word	0x40023800
 8004e44:	08006698 	.word	0x08006698
 8004e48:	20000008 	.word	0x20000008
 8004e4c:	2000000c 	.word	0x2000000c

08004e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e54:	b090      	sub	sp, #64	; 0x40
 8004e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e60:	2300      	movs	r3, #0
 8004e62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e68:	4b59      	ldr	r3, [pc, #356]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d00d      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x40>
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	f200 80a1 	bhi.w	8004fbc <HAL_RCC_GetSysClockFreq+0x16c>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x34>
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d003      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e82:	e09b      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e84:	4b53      	ldr	r3, [pc, #332]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004e88:	e09b      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e8a:	4b53      	ldr	r3, [pc, #332]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e8e:	e098      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e90:	4b4f      	ldr	r3, [pc, #316]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e9a:	4b4d      	ldr	r3, [pc, #308]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d028      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	099b      	lsrs	r3, r3, #6
 8004eac:	2200      	movs	r2, #0
 8004eae:	623b      	str	r3, [r7, #32]
 8004eb0:	627a      	str	r2, [r7, #36]	; 0x24
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4b47      	ldr	r3, [pc, #284]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ebc:	fb03 f201 	mul.w	r2, r3, r1
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	fb00 f303 	mul.w	r3, r0, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	4a43      	ldr	r2, [pc, #268]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004eca:	fba0 1202 	umull	r1, r2, r0, r2
 8004ece:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ed0:	460a      	mov	r2, r1
 8004ed2:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed6:	4413      	add	r3, r2
 8004ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004edc:	2200      	movs	r2, #0
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	61fa      	str	r2, [r7, #28]
 8004ee2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ee6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004eea:	f7fb f9c9 	bl	8000280 <__aeabi_uldivmod>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef6:	e053      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef8:	4b35      	ldr	r3, [pc, #212]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	099b      	lsrs	r3, r3, #6
 8004efe:	2200      	movs	r2, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	617a      	str	r2, [r7, #20]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f0a:	f04f 0b00 	mov.w	fp, #0
 8004f0e:	4652      	mov	r2, sl
 8004f10:	465b      	mov	r3, fp
 8004f12:	f04f 0000 	mov.w	r0, #0
 8004f16:	f04f 0100 	mov.w	r1, #0
 8004f1a:	0159      	lsls	r1, r3, #5
 8004f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f20:	0150      	lsls	r0, r2, #5
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	ebb2 080a 	subs.w	r8, r2, sl
 8004f2a:	eb63 090b 	sbc.w	r9, r3, fp
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f42:	ebb2 0408 	subs.w	r4, r2, r8
 8004f46:	eb63 0509 	sbc.w	r5, r3, r9
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	00eb      	lsls	r3, r5, #3
 8004f54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f58:	00e2      	lsls	r2, r4, #3
 8004f5a:	4614      	mov	r4, r2
 8004f5c:	461d      	mov	r5, r3
 8004f5e:	eb14 030a 	adds.w	r3, r4, sl
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	eb45 030b 	adc.w	r3, r5, fp
 8004f68:	607b      	str	r3, [r7, #4]
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f76:	4629      	mov	r1, r5
 8004f78:	028b      	lsls	r3, r1, #10
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f80:	4621      	mov	r1, r4
 8004f82:	028a      	lsls	r2, r1, #10
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	60fa      	str	r2, [r7, #12]
 8004f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f94:	f7fb f974 	bl	8000280 <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	3301      	adds	r3, #1
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004fb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fba:	e002      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3740      	adds	r7, #64	; 0x40
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	00f42400 	.word	0x00f42400
 8004fd8:	017d7840 	.word	0x017d7840

08004fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe0:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000008 	.word	0x20000008

08004ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ff8:	f7ff fff0 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	0a9b      	lsrs	r3, r3, #10
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	4903      	ldr	r1, [pc, #12]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800500a:	5ccb      	ldrb	r3, [r1, r3]
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005010:	4618      	mov	r0, r3
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40023800 	.word	0x40023800
 8005018:	080066a8 	.word	0x080066a8

0800501c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005020:	f7ff ffdc 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8005024:	4602      	mov	r2, r0
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	0b5b      	lsrs	r3, r3, #13
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	4903      	ldr	r1, [pc, #12]	; (8005040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005032:	5ccb      	ldrb	r3, [r1, r3]
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40023800 	.word	0x40023800
 8005040:	080066a8 	.word	0x080066a8

08005044 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d105      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005068:	2b00      	cmp	r3, #0
 800506a:	d038      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800506c:	4b68      	ldr	r3, [pc, #416]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005072:	f7fc f8bd 	bl	80011f0 <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005078:	e008      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800507a:	f7fc f8b9 	bl	80011f0 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e0bd      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800508c:	4b61      	ldr	r3, [pc, #388]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1f0      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	019b      	lsls	r3, r3, #6
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	071b      	lsls	r3, r3, #28
 80050aa:	495a      	ldr	r1, [pc, #360]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050b2:	4b57      	ldr	r3, [pc, #348]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050b4:	2201      	movs	r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050b8:	f7fc f89a 	bl	80011f0 <HAL_GetTick>
 80050bc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050c0:	f7fc f896 	bl	80011f0 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e09a      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050d2:	4b50      	ldr	r3, [pc, #320]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 8083 	beq.w	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	4b48      	ldr	r3, [pc, #288]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	4a47      	ldr	r2, [pc, #284]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fa:	6413      	str	r3, [r2, #64]	; 0x40
 80050fc:	4b45      	ldr	r3, [pc, #276]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005108:	4b43      	ldr	r3, [pc, #268]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a42      	ldr	r2, [pc, #264]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800510e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005112:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005114:	f7fc f86c 	bl	80011f0 <HAL_GetTick>
 8005118:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800511a:	e008      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800511c:	f7fc f868 	bl	80011f0 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e06c      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800512e:	4b3a      	ldr	r3, [pc, #232]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800513a:	4b36      	ldr	r3, [pc, #216]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005142:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d02f      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x166>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	429a      	cmp	r2, r3
 8005156:	d028      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005158:	4b2e      	ldr	r3, [pc, #184]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005160:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005162:	4b2e      	ldr	r3, [pc, #184]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005168:	4b2c      	ldr	r3, [pc, #176]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800516e:	4a29      	ldr	r2, [pc, #164]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005174:	4b27      	ldr	r3, [pc, #156]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d114      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005180:	f7fc f836 	bl	80011f0 <HAL_GetTick>
 8005184:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005186:	e00a      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005188:	f7fc f832 	bl	80011f0 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f241 3288 	movw	r2, #5000	; 0x1388
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e034      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519e:	4b1d      	ldr	r3, [pc, #116]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0ee      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b6:	d10d      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80051b8:	4b16      	ldr	r3, [pc, #88]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051cc:	4911      	ldr	r1, [pc, #68]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]
 80051d2:	e005      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80051d4:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	4a0e      	ldr	r2, [pc, #56]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051de:	6093      	str	r3, [r2, #8]
 80051e0:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ec:	4909      	ldr	r1, [pc, #36]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	7d1a      	ldrb	r2, [r3, #20]
 8005202:	4b07      	ldr	r3, [pc, #28]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005204:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	42470068 	.word	0x42470068
 8005214:	40023800 	.word	0x40023800
 8005218:	40007000 	.word	0x40007000
 800521c:	42470e40 	.word	0x42470e40
 8005220:	424711e0 	.word	0x424711e0

08005224 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e066      	b.n	8005308 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	7f5b      	ldrb	r3, [r3, #29]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d105      	bne.n	8005250 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fb fe14 	bl	8000e78 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	22ca      	movs	r2, #202	; 0xca
 800525c:	625a      	str	r2, [r3, #36]	; 0x24
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2253      	movs	r2, #83	; 0x53
 8005264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f87a 	bl	8005360 <RTC_EnterInitMode>
 800526c:	4603      	mov	r3, r0
 800526e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d12c      	bne.n	80052d0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005288:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6899      	ldr	r1, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68d2      	ldr	r2, [r2, #12]
 80052b0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6919      	ldr	r1, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	041a      	lsls	r2, r3, #16
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f881 	bl	80053ce <RTC_ExitInitMode>
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d113      	bne.n	80052fe <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	22ff      	movs	r2, #255	; 0xff
 8005304:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800532a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800532c:	f7fb ff60 	bl	80011f0 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005332:	e009      	b.n	8005348 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005334:	f7fb ff5c 	bl	80011f0 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005342:	d901      	bls.n	8005348 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e007      	b.n	8005358 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0ee      	beq.n	8005334 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d122      	bne.n	80053c4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800538c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800538e:	f7fb ff2f 	bl	80011f0 <HAL_GetTick>
 8005392:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005394:	e00c      	b.n	80053b0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005396:	f7fb ff2b 	bl	80011f0 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053a4:	d904      	bls.n	80053b0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2204      	movs	r2, #4
 80053aa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <RTC_EnterInitMode+0x64>
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d1e8      	bne.n	8005396 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053e8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10a      	bne.n	800540e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff ff89 	bl	8005310 <HAL_RTC_WaitForSynchro>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d004      	beq.n	800540e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2204      	movs	r2, #4
 8005408:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e03f      	b.n	80054aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fb fd46 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2224      	movs	r2, #36	; 0x24
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800545a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f9f5 	bl	800584c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08c      	sub	sp, #48	; 0x30
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	4613      	mov	r3, r2
 80054c0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d165      	bne.n	800559a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <HAL_UART_Transmit_DMA+0x26>
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e05e      	b.n	800559c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_UART_Transmit_DMA+0x38>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e057      	b.n	800559c <HAL_UART_Transmit_DMA+0xe8>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	88fa      	ldrh	r2, [r7, #6]
 80054fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2221      	movs	r2, #33	; 0x21
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005518:	4a22      	ldr	r2, [pc, #136]	; (80055a4 <HAL_UART_Transmit_DMA+0xf0>)
 800551a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005520:	4a21      	ldr	r2, [pc, #132]	; (80055a8 <HAL_UART_Transmit_DMA+0xf4>)
 8005522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005528:	4a20      	ldr	r2, [pc, #128]	; (80055ac <HAL_UART_Transmit_DMA+0xf8>)
 800552a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005530:	2200      	movs	r2, #0
 8005532:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005534:	f107 0308 	add.w	r3, r7, #8
 8005538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	6819      	ldr	r1, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3304      	adds	r3, #4
 8005548:	461a      	mov	r2, r3
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	f7fc f840 	bl	80015d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005558:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3314      	adds	r3, #20
 8005568:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	617b      	str	r3, [r7, #20]
   return(result);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3314      	adds	r3, #20
 8005580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005582:	627a      	str	r2, [r7, #36]	; 0x24
 8005584:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6a39      	ldr	r1, [r7, #32]
 8005588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	e000      	b.n	800559c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800559a:	2302      	movs	r3, #2
  }
}
 800559c:	4618      	mov	r0, r3
 800559e:	3730      	adds	r7, #48	; 0x30
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	080055ed 	.word	0x080055ed
 80055a8:	08005687 	.word	0x08005687
 80055ac:	080056a3 	.word	0x080056a3

080055b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b090      	sub	sp, #64	; 0x40
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d137      	bne.n	8005678 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560a:	2200      	movs	r2, #0
 800560c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800560e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3314      	adds	r3, #20
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	623b      	str	r3, [r7, #32]
   return(result);
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005624:	63bb      	str	r3, [r7, #56]	; 0x38
 8005626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3314      	adds	r3, #20
 800562c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800562e:	633a      	str	r2, [r7, #48]	; 0x30
 8005630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e5      	bne.n	800560e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	330c      	adds	r3, #12
 8005648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	60fb      	str	r3, [r7, #12]
   return(result);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005658:	637b      	str	r3, [r7, #52]	; 0x34
 800565a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	330c      	adds	r3, #12
 8005660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005662:	61fa      	str	r2, [r7, #28]
 8005664:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	69b9      	ldr	r1, [r7, #24]
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	617b      	str	r3, [r7, #20]
   return(result);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e5      	bne.n	8005642 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005676:	e002      	b.n	800567e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005678:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800567a:	f7ff ff99 	bl	80055b0 <HAL_UART_TxCpltCallback>
}
 800567e:	bf00      	nop
 8005680:	3740      	adds	r7, #64	; 0x40
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7ff ff95 	bl	80055c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056be:	2b80      	cmp	r3, #128	; 0x80
 80056c0:	bf0c      	ite	eq
 80056c2:	2301      	moveq	r3, #1
 80056c4:	2300      	movne	r3, #0
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b21      	cmp	r3, #33	; 0x21
 80056d4:	d108      	bne.n	80056e8 <UART_DMAError+0x46>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2200      	movs	r2, #0
 80056e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80056e2:	68b8      	ldr	r0, [r7, #8]
 80056e4:	f000 f827 	bl	8005736 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	bf0c      	ite	eq
 80056f6:	2301      	moveq	r3, #1
 80056f8:	2300      	movne	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b22      	cmp	r3, #34	; 0x22
 8005708:	d108      	bne.n	800571c <UART_DMAError+0x7a>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2200      	movs	r2, #0
 8005714:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005716:	68b8      	ldr	r0, [r7, #8]
 8005718:	f000 f835 	bl	8005786 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	f043 0210 	orr.w	r2, r3, #16
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005728:	68b8      	ldr	r0, [r7, #8]
 800572a:	f7ff ff55 	bl	80055d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005736:	b480      	push	{r7}
 8005738:	b089      	sub	sp, #36	; 0x24
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	60bb      	str	r3, [r7, #8]
   return(result);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	61ba      	str	r2, [r7, #24]
 8005760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6979      	ldr	r1, [r7, #20]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	613b      	str	r3, [r7, #16]
   return(result);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e5      	bne.n	800573e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800577a:	bf00      	nop
 800577c:	3724      	adds	r7, #36	; 0x24
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005786:	b480      	push	{r7}
 8005788:	b095      	sub	sp, #84	; 0x54
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057ae:	643a      	str	r2, [r7, #64]	; 0x40
 80057b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e5      	bne.n	800578e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3314      	adds	r3, #20
 80057c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f023 0301 	bic.w	r3, r3, #1
 80057d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3314      	adds	r3, #20
 80057e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e5      	bne.n	80057c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d119      	bne.n	8005832 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	60bb      	str	r3, [r7, #8]
   return(result);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f023 0310 	bic.w	r3, r3, #16
 8005814:	647b      	str	r3, [r7, #68]	; 0x44
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800581e:	61ba      	str	r2, [r7, #24]
 8005820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	6979      	ldr	r1, [r7, #20]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	613b      	str	r3, [r7, #16]
   return(result);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e5      	bne.n	80057fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005840:	bf00      	nop
 8005842:	3754      	adds	r7, #84	; 0x54
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800584c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005850:	b0c0      	sub	sp, #256	; 0x100
 8005852:	af00      	add	r7, sp, #0
 8005854:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	68d9      	ldr	r1, [r3, #12]
 800586a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	ea40 0301 	orr.w	r3, r0, r1
 8005874:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	431a      	orrs	r2, r3
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	431a      	orrs	r2, r3
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058a4:	f021 010c 	bic.w	r1, r1, #12
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058b2:	430b      	orrs	r3, r1
 80058b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c6:	6999      	ldr	r1, [r3, #24]
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	ea40 0301 	orr.w	r3, r0, r1
 80058d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b8f      	ldr	r3, [pc, #572]	; (8005b18 <UART_SetConfig+0x2cc>)
 80058dc:	429a      	cmp	r2, r3
 80058de:	d005      	beq.n	80058ec <UART_SetConfig+0xa0>
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4b8d      	ldr	r3, [pc, #564]	; (8005b1c <UART_SetConfig+0x2d0>)
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d104      	bne.n	80058f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058ec:	f7ff fb96 	bl	800501c <HAL_RCC_GetPCLK2Freq>
 80058f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058f4:	e003      	b.n	80058fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058f6:	f7ff fb7d 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 80058fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005908:	f040 810c 	bne.w	8005b24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800590c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005910:	2200      	movs	r2, #0
 8005912:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005916:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800591a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800591e:	4622      	mov	r2, r4
 8005920:	462b      	mov	r3, r5
 8005922:	1891      	adds	r1, r2, r2
 8005924:	65b9      	str	r1, [r7, #88]	; 0x58
 8005926:	415b      	adcs	r3, r3
 8005928:	65fb      	str	r3, [r7, #92]	; 0x5c
 800592a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800592e:	4621      	mov	r1, r4
 8005930:	eb12 0801 	adds.w	r8, r2, r1
 8005934:	4629      	mov	r1, r5
 8005936:	eb43 0901 	adc.w	r9, r3, r1
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005946:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800594a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800594e:	4690      	mov	r8, r2
 8005950:	4699      	mov	r9, r3
 8005952:	4623      	mov	r3, r4
 8005954:	eb18 0303 	adds.w	r3, r8, r3
 8005958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800595c:	462b      	mov	r3, r5
 800595e:	eb49 0303 	adc.w	r3, r9, r3
 8005962:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005972:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005976:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800597a:	460b      	mov	r3, r1
 800597c:	18db      	adds	r3, r3, r3
 800597e:	653b      	str	r3, [r7, #80]	; 0x50
 8005980:	4613      	mov	r3, r2
 8005982:	eb42 0303 	adc.w	r3, r2, r3
 8005986:	657b      	str	r3, [r7, #84]	; 0x54
 8005988:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800598c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005990:	f7fa fc76 	bl	8000280 <__aeabi_uldivmod>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4b61      	ldr	r3, [pc, #388]	; (8005b20 <UART_SetConfig+0x2d4>)
 800599a:	fba3 2302 	umull	r2, r3, r3, r2
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	011c      	lsls	r4, r3, #4
 80059a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	1891      	adds	r1, r2, r2
 80059ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80059bc:	415b      	adcs	r3, r3
 80059be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059c4:	4641      	mov	r1, r8
 80059c6:	eb12 0a01 	adds.w	sl, r2, r1
 80059ca:	4649      	mov	r1, r9
 80059cc:	eb43 0b01 	adc.w	fp, r3, r1
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059e4:	4692      	mov	sl, r2
 80059e6:	469b      	mov	fp, r3
 80059e8:	4643      	mov	r3, r8
 80059ea:	eb1a 0303 	adds.w	r3, sl, r3
 80059ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059f2:	464b      	mov	r3, r9
 80059f4:	eb4b 0303 	adc.w	r3, fp, r3
 80059f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a10:	460b      	mov	r3, r1
 8005a12:	18db      	adds	r3, r3, r3
 8005a14:	643b      	str	r3, [r7, #64]	; 0x40
 8005a16:	4613      	mov	r3, r2
 8005a18:	eb42 0303 	adc.w	r3, r2, r3
 8005a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a26:	f7fa fc2b 	bl	8000280 <__aeabi_uldivmod>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4611      	mov	r1, r2
 8005a30:	4b3b      	ldr	r3, [pc, #236]	; (8005b20 <UART_SetConfig+0x2d4>)
 8005a32:	fba3 2301 	umull	r2, r3, r3, r1
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	2264      	movs	r2, #100	; 0x64
 8005a3a:	fb02 f303 	mul.w	r3, r2, r3
 8005a3e:	1acb      	subs	r3, r1, r3
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a46:	4b36      	ldr	r3, [pc, #216]	; (8005b20 <UART_SetConfig+0x2d4>)
 8005a48:	fba3 2302 	umull	r2, r3, r3, r2
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a54:	441c      	add	r4, r3
 8005a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a68:	4642      	mov	r2, r8
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	1891      	adds	r1, r2, r2
 8005a6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a70:	415b      	adcs	r3, r3
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a78:	4641      	mov	r1, r8
 8005a7a:	1851      	adds	r1, r2, r1
 8005a7c:	6339      	str	r1, [r7, #48]	; 0x30
 8005a7e:	4649      	mov	r1, r9
 8005a80:	414b      	adcs	r3, r1
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a90:	4659      	mov	r1, fp
 8005a92:	00cb      	lsls	r3, r1, #3
 8005a94:	4651      	mov	r1, sl
 8005a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a9a:	4651      	mov	r1, sl
 8005a9c:	00ca      	lsls	r2, r1, #3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	189b      	adds	r3, r3, r2
 8005aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005aac:	464b      	mov	r3, r9
 8005aae:	460a      	mov	r2, r1
 8005ab0:	eb42 0303 	adc.w	r3, r2, r3
 8005ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ac4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ac8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005acc:	460b      	mov	r3, r1
 8005ace:	18db      	adds	r3, r3, r3
 8005ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	eb42 0303 	adc.w	r3, r2, r3
 8005ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ada:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ade:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ae2:	f7fa fbcd 	bl	8000280 <__aeabi_uldivmod>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4b0d      	ldr	r3, [pc, #52]	; (8005b20 <UART_SetConfig+0x2d4>)
 8005aec:	fba3 1302 	umull	r1, r3, r3, r2
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	2164      	movs	r1, #100	; 0x64
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	3332      	adds	r3, #50	; 0x32
 8005afe:	4a08      	ldr	r2, [pc, #32]	; (8005b20 <UART_SetConfig+0x2d4>)
 8005b00:	fba2 2303 	umull	r2, r3, r2, r3
 8005b04:	095b      	lsrs	r3, r3, #5
 8005b06:	f003 0207 	and.w	r2, r3, #7
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4422      	add	r2, r4
 8005b12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b14:	e105      	b.n	8005d22 <UART_SetConfig+0x4d6>
 8005b16:	bf00      	nop
 8005b18:	40011000 	.word	0x40011000
 8005b1c:	40011400 	.word	0x40011400
 8005b20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b36:	4642      	mov	r2, r8
 8005b38:	464b      	mov	r3, r9
 8005b3a:	1891      	adds	r1, r2, r2
 8005b3c:	6239      	str	r1, [r7, #32]
 8005b3e:	415b      	adcs	r3, r3
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
 8005b42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b46:	4641      	mov	r1, r8
 8005b48:	1854      	adds	r4, r2, r1
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	eb43 0501 	adc.w	r5, r3, r1
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	00eb      	lsls	r3, r5, #3
 8005b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b5e:	00e2      	lsls	r2, r4, #3
 8005b60:	4614      	mov	r4, r2
 8005b62:	461d      	mov	r5, r3
 8005b64:	4643      	mov	r3, r8
 8005b66:	18e3      	adds	r3, r4, r3
 8005b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	eb45 0303 	adc.w	r3, r5, r3
 8005b72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	f04f 0300 	mov.w	r3, #0
 8005b8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b92:	4629      	mov	r1, r5
 8005b94:	008b      	lsls	r3, r1, #2
 8005b96:	4621      	mov	r1, r4
 8005b98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	008a      	lsls	r2, r1, #2
 8005ba0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ba4:	f7fa fb6c 	bl	8000280 <__aeabi_uldivmod>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4b60      	ldr	r3, [pc, #384]	; (8005d30 <UART_SetConfig+0x4e4>)
 8005bae:	fba3 2302 	umull	r2, r3, r3, r2
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	011c      	lsls	r4, r3, #4
 8005bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005bc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005bc8:	4642      	mov	r2, r8
 8005bca:	464b      	mov	r3, r9
 8005bcc:	1891      	adds	r1, r2, r2
 8005bce:	61b9      	str	r1, [r7, #24]
 8005bd0:	415b      	adcs	r3, r3
 8005bd2:	61fb      	str	r3, [r7, #28]
 8005bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bd8:	4641      	mov	r1, r8
 8005bda:	1851      	adds	r1, r2, r1
 8005bdc:	6139      	str	r1, [r7, #16]
 8005bde:	4649      	mov	r1, r9
 8005be0:	414b      	adcs	r3, r1
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bf0:	4659      	mov	r1, fp
 8005bf2:	00cb      	lsls	r3, r1, #3
 8005bf4:	4651      	mov	r1, sl
 8005bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bfa:	4651      	mov	r1, sl
 8005bfc:	00ca      	lsls	r2, r1, #3
 8005bfe:	4610      	mov	r0, r2
 8005c00:	4619      	mov	r1, r3
 8005c02:	4603      	mov	r3, r0
 8005c04:	4642      	mov	r2, r8
 8005c06:	189b      	adds	r3, r3, r2
 8005c08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c0c:	464b      	mov	r3, r9
 8005c0e:	460a      	mov	r2, r1
 8005c10:	eb42 0303 	adc.w	r3, r2, r3
 8005c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c30:	4649      	mov	r1, r9
 8005c32:	008b      	lsls	r3, r1, #2
 8005c34:	4641      	mov	r1, r8
 8005c36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c3a:	4641      	mov	r1, r8
 8005c3c:	008a      	lsls	r2, r1, #2
 8005c3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c42:	f7fa fb1d 	bl	8000280 <__aeabi_uldivmod>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4b39      	ldr	r3, [pc, #228]	; (8005d30 <UART_SetConfig+0x4e4>)
 8005c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	2164      	movs	r1, #100	; 0x64
 8005c54:	fb01 f303 	mul.w	r3, r1, r3
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	3332      	adds	r3, #50	; 0x32
 8005c5e:	4a34      	ldr	r2, [pc, #208]	; (8005d30 <UART_SetConfig+0x4e4>)
 8005c60:	fba2 2303 	umull	r2, r3, r2, r3
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c6a:	441c      	add	r4, r3
 8005c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c70:	2200      	movs	r2, #0
 8005c72:	673b      	str	r3, [r7, #112]	; 0x70
 8005c74:	677a      	str	r2, [r7, #116]	; 0x74
 8005c76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c7a:	4642      	mov	r2, r8
 8005c7c:	464b      	mov	r3, r9
 8005c7e:	1891      	adds	r1, r2, r2
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	415b      	adcs	r3, r3
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c8a:	4641      	mov	r1, r8
 8005c8c:	1851      	adds	r1, r2, r1
 8005c8e:	6039      	str	r1, [r7, #0]
 8005c90:	4649      	mov	r1, r9
 8005c92:	414b      	adcs	r3, r1
 8005c94:	607b      	str	r3, [r7, #4]
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ca2:	4659      	mov	r1, fp
 8005ca4:	00cb      	lsls	r3, r1, #3
 8005ca6:	4651      	mov	r1, sl
 8005ca8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cac:	4651      	mov	r1, sl
 8005cae:	00ca      	lsls	r2, r1, #3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	4642      	mov	r2, r8
 8005cb8:	189b      	adds	r3, r3, r2
 8005cba:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	460a      	mov	r2, r1
 8005cc0:	eb42 0303 	adc.w	r3, r2, r3
 8005cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	663b      	str	r3, [r7, #96]	; 0x60
 8005cd0:	667a      	str	r2, [r7, #100]	; 0x64
 8005cd2:	f04f 0200 	mov.w	r2, #0
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cde:	4649      	mov	r1, r9
 8005ce0:	008b      	lsls	r3, r1, #2
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ce8:	4641      	mov	r1, r8
 8005cea:	008a      	lsls	r2, r1, #2
 8005cec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cf0:	f7fa fac6 	bl	8000280 <__aeabi_uldivmod>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4b0d      	ldr	r3, [pc, #52]	; (8005d30 <UART_SetConfig+0x4e4>)
 8005cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	2164      	movs	r1, #100	; 0x64
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	3332      	adds	r3, #50	; 0x32
 8005d0c:	4a08      	ldr	r2, [pc, #32]	; (8005d30 <UART_SetConfig+0x4e4>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	095b      	lsrs	r3, r3, #5
 8005d14:	f003 020f 	and.w	r2, r3, #15
 8005d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4422      	add	r2, r4
 8005d20:	609a      	str	r2, [r3, #8]
}
 8005d22:	bf00      	nop
 8005d24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d2e:	bf00      	nop
 8005d30:	51eb851f 	.word	0x51eb851f

08005d34 <__errno>:
 8005d34:	4b01      	ldr	r3, [pc, #4]	; (8005d3c <__errno+0x8>)
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000014 	.word	0x20000014

08005d40 <__libc_init_array>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	4d0d      	ldr	r5, [pc, #52]	; (8005d78 <__libc_init_array+0x38>)
 8005d44:	4c0d      	ldr	r4, [pc, #52]	; (8005d7c <__libc_init_array+0x3c>)
 8005d46:	1b64      	subs	r4, r4, r5
 8005d48:	10a4      	asrs	r4, r4, #2
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	42a6      	cmp	r6, r4
 8005d4e:	d109      	bne.n	8005d64 <__libc_init_array+0x24>
 8005d50:	4d0b      	ldr	r5, [pc, #44]	; (8005d80 <__libc_init_array+0x40>)
 8005d52:	4c0c      	ldr	r4, [pc, #48]	; (8005d84 <__libc_init_array+0x44>)
 8005d54:	f000 fc8e 	bl	8006674 <_init>
 8005d58:	1b64      	subs	r4, r4, r5
 8005d5a:	10a4      	asrs	r4, r4, #2
 8005d5c:	2600      	movs	r6, #0
 8005d5e:	42a6      	cmp	r6, r4
 8005d60:	d105      	bne.n	8005d6e <__libc_init_array+0x2e>
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d68:	4798      	blx	r3
 8005d6a:	3601      	adds	r6, #1
 8005d6c:	e7ee      	b.n	8005d4c <__libc_init_array+0xc>
 8005d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d72:	4798      	blx	r3
 8005d74:	3601      	adds	r6, #1
 8005d76:	e7f2      	b.n	8005d5e <__libc_init_array+0x1e>
 8005d78:	080066f4 	.word	0x080066f4
 8005d7c:	080066f4 	.word	0x080066f4
 8005d80:	080066f4 	.word	0x080066f4
 8005d84:	080066f8 	.word	0x080066f8

08005d88 <memset>:
 8005d88:	4402      	add	r2, r0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d100      	bne.n	8005d92 <memset+0xa>
 8005d90:	4770      	bx	lr
 8005d92:	f803 1b01 	strb.w	r1, [r3], #1
 8005d96:	e7f9      	b.n	8005d8c <memset+0x4>

08005d98 <siprintf>:
 8005d98:	b40e      	push	{r1, r2, r3}
 8005d9a:	b500      	push	{lr}
 8005d9c:	b09c      	sub	sp, #112	; 0x70
 8005d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8005da0:	9002      	str	r0, [sp, #8]
 8005da2:	9006      	str	r0, [sp, #24]
 8005da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005da8:	4809      	ldr	r0, [pc, #36]	; (8005dd0 <siprintf+0x38>)
 8005daa:	9107      	str	r1, [sp, #28]
 8005dac:	9104      	str	r1, [sp, #16]
 8005dae:	4909      	ldr	r1, [pc, #36]	; (8005dd4 <siprintf+0x3c>)
 8005db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db4:	9105      	str	r1, [sp, #20]
 8005db6:	6800      	ldr	r0, [r0, #0]
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	a902      	add	r1, sp, #8
 8005dbc:	f000 f868 	bl	8005e90 <_svfiprintf_r>
 8005dc0:	9b02      	ldr	r3, [sp, #8]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	b01c      	add	sp, #112	; 0x70
 8005dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dcc:	b003      	add	sp, #12
 8005dce:	4770      	bx	lr
 8005dd0:	20000014 	.word	0x20000014
 8005dd4:	ffff0208 	.word	0xffff0208

08005dd8 <__ssputs_r>:
 8005dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ddc:	688e      	ldr	r6, [r1, #8]
 8005dde:	429e      	cmp	r6, r3
 8005de0:	4682      	mov	sl, r0
 8005de2:	460c      	mov	r4, r1
 8005de4:	4690      	mov	r8, r2
 8005de6:	461f      	mov	r7, r3
 8005de8:	d838      	bhi.n	8005e5c <__ssputs_r+0x84>
 8005dea:	898a      	ldrh	r2, [r1, #12]
 8005dec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005df0:	d032      	beq.n	8005e58 <__ssputs_r+0x80>
 8005df2:	6825      	ldr	r5, [r4, #0]
 8005df4:	6909      	ldr	r1, [r1, #16]
 8005df6:	eba5 0901 	sub.w	r9, r5, r1
 8005dfa:	6965      	ldr	r5, [r4, #20]
 8005dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e04:	3301      	adds	r3, #1
 8005e06:	444b      	add	r3, r9
 8005e08:	106d      	asrs	r5, r5, #1
 8005e0a:	429d      	cmp	r5, r3
 8005e0c:	bf38      	it	cc
 8005e0e:	461d      	movcc	r5, r3
 8005e10:	0553      	lsls	r3, r2, #21
 8005e12:	d531      	bpl.n	8005e78 <__ssputs_r+0xa0>
 8005e14:	4629      	mov	r1, r5
 8005e16:	f000 fb63 	bl	80064e0 <_malloc_r>
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	b950      	cbnz	r0, 8005e34 <__ssputs_r+0x5c>
 8005e1e:	230c      	movs	r3, #12
 8005e20:	f8ca 3000 	str.w	r3, [sl]
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2a:	81a3      	strh	r3, [r4, #12]
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e34:	6921      	ldr	r1, [r4, #16]
 8005e36:	464a      	mov	r2, r9
 8005e38:	f000 fabe 	bl	80063b8 <memcpy>
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e46:	81a3      	strh	r3, [r4, #12]
 8005e48:	6126      	str	r6, [r4, #16]
 8005e4a:	6165      	str	r5, [r4, #20]
 8005e4c:	444e      	add	r6, r9
 8005e4e:	eba5 0509 	sub.w	r5, r5, r9
 8005e52:	6026      	str	r6, [r4, #0]
 8005e54:	60a5      	str	r5, [r4, #8]
 8005e56:	463e      	mov	r6, r7
 8005e58:	42be      	cmp	r6, r7
 8005e5a:	d900      	bls.n	8005e5e <__ssputs_r+0x86>
 8005e5c:	463e      	mov	r6, r7
 8005e5e:	6820      	ldr	r0, [r4, #0]
 8005e60:	4632      	mov	r2, r6
 8005e62:	4641      	mov	r1, r8
 8005e64:	f000 fab6 	bl	80063d4 <memmove>
 8005e68:	68a3      	ldr	r3, [r4, #8]
 8005e6a:	1b9b      	subs	r3, r3, r6
 8005e6c:	60a3      	str	r3, [r4, #8]
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	4433      	add	r3, r6
 8005e72:	6023      	str	r3, [r4, #0]
 8005e74:	2000      	movs	r0, #0
 8005e76:	e7db      	b.n	8005e30 <__ssputs_r+0x58>
 8005e78:	462a      	mov	r2, r5
 8005e7a:	f000 fba5 	bl	80065c8 <_realloc_r>
 8005e7e:	4606      	mov	r6, r0
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d1e1      	bne.n	8005e48 <__ssputs_r+0x70>
 8005e84:	6921      	ldr	r1, [r4, #16]
 8005e86:	4650      	mov	r0, sl
 8005e88:	f000 fabe 	bl	8006408 <_free_r>
 8005e8c:	e7c7      	b.n	8005e1e <__ssputs_r+0x46>
	...

08005e90 <_svfiprintf_r>:
 8005e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e94:	4698      	mov	r8, r3
 8005e96:	898b      	ldrh	r3, [r1, #12]
 8005e98:	061b      	lsls	r3, r3, #24
 8005e9a:	b09d      	sub	sp, #116	; 0x74
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	460d      	mov	r5, r1
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	d50e      	bpl.n	8005ec2 <_svfiprintf_r+0x32>
 8005ea4:	690b      	ldr	r3, [r1, #16]
 8005ea6:	b963      	cbnz	r3, 8005ec2 <_svfiprintf_r+0x32>
 8005ea8:	2140      	movs	r1, #64	; 0x40
 8005eaa:	f000 fb19 	bl	80064e0 <_malloc_r>
 8005eae:	6028      	str	r0, [r5, #0]
 8005eb0:	6128      	str	r0, [r5, #16]
 8005eb2:	b920      	cbnz	r0, 8005ebe <_svfiprintf_r+0x2e>
 8005eb4:	230c      	movs	r3, #12
 8005eb6:	603b      	str	r3, [r7, #0]
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebc:	e0d1      	b.n	8006062 <_svfiprintf_r+0x1d2>
 8005ebe:	2340      	movs	r3, #64	; 0x40
 8005ec0:	616b      	str	r3, [r5, #20]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec6:	2320      	movs	r3, #32
 8005ec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ed0:	2330      	movs	r3, #48	; 0x30
 8005ed2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800607c <_svfiprintf_r+0x1ec>
 8005ed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eda:	f04f 0901 	mov.w	r9, #1
 8005ede:	4623      	mov	r3, r4
 8005ee0:	469a      	mov	sl, r3
 8005ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ee6:	b10a      	cbz	r2, 8005eec <_svfiprintf_r+0x5c>
 8005ee8:	2a25      	cmp	r2, #37	; 0x25
 8005eea:	d1f9      	bne.n	8005ee0 <_svfiprintf_r+0x50>
 8005eec:	ebba 0b04 	subs.w	fp, sl, r4
 8005ef0:	d00b      	beq.n	8005f0a <_svfiprintf_r+0x7a>
 8005ef2:	465b      	mov	r3, fp
 8005ef4:	4622      	mov	r2, r4
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4638      	mov	r0, r7
 8005efa:	f7ff ff6d 	bl	8005dd8 <__ssputs_r>
 8005efe:	3001      	adds	r0, #1
 8005f00:	f000 80aa 	beq.w	8006058 <_svfiprintf_r+0x1c8>
 8005f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f06:	445a      	add	r2, fp
 8005f08:	9209      	str	r2, [sp, #36]	; 0x24
 8005f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 80a2 	beq.w	8006058 <_svfiprintf_r+0x1c8>
 8005f14:	2300      	movs	r3, #0
 8005f16:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f1e:	f10a 0a01 	add.w	sl, sl, #1
 8005f22:	9304      	str	r3, [sp, #16]
 8005f24:	9307      	str	r3, [sp, #28]
 8005f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f2c:	4654      	mov	r4, sl
 8005f2e:	2205      	movs	r2, #5
 8005f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f34:	4851      	ldr	r0, [pc, #324]	; (800607c <_svfiprintf_r+0x1ec>)
 8005f36:	f7fa f953 	bl	80001e0 <memchr>
 8005f3a:	9a04      	ldr	r2, [sp, #16]
 8005f3c:	b9d8      	cbnz	r0, 8005f76 <_svfiprintf_r+0xe6>
 8005f3e:	06d0      	lsls	r0, r2, #27
 8005f40:	bf44      	itt	mi
 8005f42:	2320      	movmi	r3, #32
 8005f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f48:	0711      	lsls	r1, r2, #28
 8005f4a:	bf44      	itt	mi
 8005f4c:	232b      	movmi	r3, #43	; 0x2b
 8005f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f52:	f89a 3000 	ldrb.w	r3, [sl]
 8005f56:	2b2a      	cmp	r3, #42	; 0x2a
 8005f58:	d015      	beq.n	8005f86 <_svfiprintf_r+0xf6>
 8005f5a:	9a07      	ldr	r2, [sp, #28]
 8005f5c:	4654      	mov	r4, sl
 8005f5e:	2000      	movs	r0, #0
 8005f60:	f04f 0c0a 	mov.w	ip, #10
 8005f64:	4621      	mov	r1, r4
 8005f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f6a:	3b30      	subs	r3, #48	; 0x30
 8005f6c:	2b09      	cmp	r3, #9
 8005f6e:	d94e      	bls.n	800600e <_svfiprintf_r+0x17e>
 8005f70:	b1b0      	cbz	r0, 8005fa0 <_svfiprintf_r+0x110>
 8005f72:	9207      	str	r2, [sp, #28]
 8005f74:	e014      	b.n	8005fa0 <_svfiprintf_r+0x110>
 8005f76:	eba0 0308 	sub.w	r3, r0, r8
 8005f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	9304      	str	r3, [sp, #16]
 8005f82:	46a2      	mov	sl, r4
 8005f84:	e7d2      	b.n	8005f2c <_svfiprintf_r+0x9c>
 8005f86:	9b03      	ldr	r3, [sp, #12]
 8005f88:	1d19      	adds	r1, r3, #4
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	9103      	str	r1, [sp, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bfbb      	ittet	lt
 8005f92:	425b      	neglt	r3, r3
 8005f94:	f042 0202 	orrlt.w	r2, r2, #2
 8005f98:	9307      	strge	r3, [sp, #28]
 8005f9a:	9307      	strlt	r3, [sp, #28]
 8005f9c:	bfb8      	it	lt
 8005f9e:	9204      	strlt	r2, [sp, #16]
 8005fa0:	7823      	ldrb	r3, [r4, #0]
 8005fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8005fa4:	d10c      	bne.n	8005fc0 <_svfiprintf_r+0x130>
 8005fa6:	7863      	ldrb	r3, [r4, #1]
 8005fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8005faa:	d135      	bne.n	8006018 <_svfiprintf_r+0x188>
 8005fac:	9b03      	ldr	r3, [sp, #12]
 8005fae:	1d1a      	adds	r2, r3, #4
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	9203      	str	r2, [sp, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	bfb8      	it	lt
 8005fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fbc:	3402      	adds	r4, #2
 8005fbe:	9305      	str	r3, [sp, #20]
 8005fc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800608c <_svfiprintf_r+0x1fc>
 8005fc4:	7821      	ldrb	r1, [r4, #0]
 8005fc6:	2203      	movs	r2, #3
 8005fc8:	4650      	mov	r0, sl
 8005fca:	f7fa f909 	bl	80001e0 <memchr>
 8005fce:	b140      	cbz	r0, 8005fe2 <_svfiprintf_r+0x152>
 8005fd0:	2340      	movs	r3, #64	; 0x40
 8005fd2:	eba0 000a 	sub.w	r0, r0, sl
 8005fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8005fda:	9b04      	ldr	r3, [sp, #16]
 8005fdc:	4303      	orrs	r3, r0
 8005fde:	3401      	adds	r4, #1
 8005fe0:	9304      	str	r3, [sp, #16]
 8005fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe6:	4826      	ldr	r0, [pc, #152]	; (8006080 <_svfiprintf_r+0x1f0>)
 8005fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fec:	2206      	movs	r2, #6
 8005fee:	f7fa f8f7 	bl	80001e0 <memchr>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d038      	beq.n	8006068 <_svfiprintf_r+0x1d8>
 8005ff6:	4b23      	ldr	r3, [pc, #140]	; (8006084 <_svfiprintf_r+0x1f4>)
 8005ff8:	bb1b      	cbnz	r3, 8006042 <_svfiprintf_r+0x1b2>
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	3307      	adds	r3, #7
 8005ffe:	f023 0307 	bic.w	r3, r3, #7
 8006002:	3308      	adds	r3, #8
 8006004:	9303      	str	r3, [sp, #12]
 8006006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006008:	4433      	add	r3, r6
 800600a:	9309      	str	r3, [sp, #36]	; 0x24
 800600c:	e767      	b.n	8005ede <_svfiprintf_r+0x4e>
 800600e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006012:	460c      	mov	r4, r1
 8006014:	2001      	movs	r0, #1
 8006016:	e7a5      	b.n	8005f64 <_svfiprintf_r+0xd4>
 8006018:	2300      	movs	r3, #0
 800601a:	3401      	adds	r4, #1
 800601c:	9305      	str	r3, [sp, #20]
 800601e:	4619      	mov	r1, r3
 8006020:	f04f 0c0a 	mov.w	ip, #10
 8006024:	4620      	mov	r0, r4
 8006026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800602a:	3a30      	subs	r2, #48	; 0x30
 800602c:	2a09      	cmp	r2, #9
 800602e:	d903      	bls.n	8006038 <_svfiprintf_r+0x1a8>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0c5      	beq.n	8005fc0 <_svfiprintf_r+0x130>
 8006034:	9105      	str	r1, [sp, #20]
 8006036:	e7c3      	b.n	8005fc0 <_svfiprintf_r+0x130>
 8006038:	fb0c 2101 	mla	r1, ip, r1, r2
 800603c:	4604      	mov	r4, r0
 800603e:	2301      	movs	r3, #1
 8006040:	e7f0      	b.n	8006024 <_svfiprintf_r+0x194>
 8006042:	ab03      	add	r3, sp, #12
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	462a      	mov	r2, r5
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <_svfiprintf_r+0x1f8>)
 800604a:	a904      	add	r1, sp, #16
 800604c:	4638      	mov	r0, r7
 800604e:	f3af 8000 	nop.w
 8006052:	1c42      	adds	r2, r0, #1
 8006054:	4606      	mov	r6, r0
 8006056:	d1d6      	bne.n	8006006 <_svfiprintf_r+0x176>
 8006058:	89ab      	ldrh	r3, [r5, #12]
 800605a:	065b      	lsls	r3, r3, #25
 800605c:	f53f af2c 	bmi.w	8005eb8 <_svfiprintf_r+0x28>
 8006060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006062:	b01d      	add	sp, #116	; 0x74
 8006064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006068:	ab03      	add	r3, sp, #12
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	462a      	mov	r2, r5
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <_svfiprintf_r+0x1f8>)
 8006070:	a904      	add	r1, sp, #16
 8006072:	4638      	mov	r0, r7
 8006074:	f000 f87a 	bl	800616c <_printf_i>
 8006078:	e7eb      	b.n	8006052 <_svfiprintf_r+0x1c2>
 800607a:	bf00      	nop
 800607c:	080066b8 	.word	0x080066b8
 8006080:	080066c2 	.word	0x080066c2
 8006084:	00000000 	.word	0x00000000
 8006088:	08005dd9 	.word	0x08005dd9
 800608c:	080066be 	.word	0x080066be

08006090 <_printf_common>:
 8006090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	4616      	mov	r6, r2
 8006096:	4699      	mov	r9, r3
 8006098:	688a      	ldr	r2, [r1, #8]
 800609a:	690b      	ldr	r3, [r1, #16]
 800609c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060a0:	4293      	cmp	r3, r2
 80060a2:	bfb8      	it	lt
 80060a4:	4613      	movlt	r3, r2
 80060a6:	6033      	str	r3, [r6, #0]
 80060a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060ac:	4607      	mov	r7, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	b10a      	cbz	r2, 80060b6 <_printf_common+0x26>
 80060b2:	3301      	adds	r3, #1
 80060b4:	6033      	str	r3, [r6, #0]
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	0699      	lsls	r1, r3, #26
 80060ba:	bf42      	ittt	mi
 80060bc:	6833      	ldrmi	r3, [r6, #0]
 80060be:	3302      	addmi	r3, #2
 80060c0:	6033      	strmi	r3, [r6, #0]
 80060c2:	6825      	ldr	r5, [r4, #0]
 80060c4:	f015 0506 	ands.w	r5, r5, #6
 80060c8:	d106      	bne.n	80060d8 <_printf_common+0x48>
 80060ca:	f104 0a19 	add.w	sl, r4, #25
 80060ce:	68e3      	ldr	r3, [r4, #12]
 80060d0:	6832      	ldr	r2, [r6, #0]
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	42ab      	cmp	r3, r5
 80060d6:	dc26      	bgt.n	8006126 <_printf_common+0x96>
 80060d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060dc:	1e13      	subs	r3, r2, #0
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	bf18      	it	ne
 80060e2:	2301      	movne	r3, #1
 80060e4:	0692      	lsls	r2, r2, #26
 80060e6:	d42b      	bmi.n	8006140 <_printf_common+0xb0>
 80060e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060ec:	4649      	mov	r1, r9
 80060ee:	4638      	mov	r0, r7
 80060f0:	47c0      	blx	r8
 80060f2:	3001      	adds	r0, #1
 80060f4:	d01e      	beq.n	8006134 <_printf_common+0xa4>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	68e5      	ldr	r5, [r4, #12]
 80060fa:	6832      	ldr	r2, [r6, #0]
 80060fc:	f003 0306 	and.w	r3, r3, #6
 8006100:	2b04      	cmp	r3, #4
 8006102:	bf08      	it	eq
 8006104:	1aad      	subeq	r5, r5, r2
 8006106:	68a3      	ldr	r3, [r4, #8]
 8006108:	6922      	ldr	r2, [r4, #16]
 800610a:	bf0c      	ite	eq
 800610c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006110:	2500      	movne	r5, #0
 8006112:	4293      	cmp	r3, r2
 8006114:	bfc4      	itt	gt
 8006116:	1a9b      	subgt	r3, r3, r2
 8006118:	18ed      	addgt	r5, r5, r3
 800611a:	2600      	movs	r6, #0
 800611c:	341a      	adds	r4, #26
 800611e:	42b5      	cmp	r5, r6
 8006120:	d11a      	bne.n	8006158 <_printf_common+0xc8>
 8006122:	2000      	movs	r0, #0
 8006124:	e008      	b.n	8006138 <_printf_common+0xa8>
 8006126:	2301      	movs	r3, #1
 8006128:	4652      	mov	r2, sl
 800612a:	4649      	mov	r1, r9
 800612c:	4638      	mov	r0, r7
 800612e:	47c0      	blx	r8
 8006130:	3001      	adds	r0, #1
 8006132:	d103      	bne.n	800613c <_printf_common+0xac>
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613c:	3501      	adds	r5, #1
 800613e:	e7c6      	b.n	80060ce <_printf_common+0x3e>
 8006140:	18e1      	adds	r1, r4, r3
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	2030      	movs	r0, #48	; 0x30
 8006146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800614a:	4422      	add	r2, r4
 800614c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006154:	3302      	adds	r3, #2
 8006156:	e7c7      	b.n	80060e8 <_printf_common+0x58>
 8006158:	2301      	movs	r3, #1
 800615a:	4622      	mov	r2, r4
 800615c:	4649      	mov	r1, r9
 800615e:	4638      	mov	r0, r7
 8006160:	47c0      	blx	r8
 8006162:	3001      	adds	r0, #1
 8006164:	d0e6      	beq.n	8006134 <_printf_common+0xa4>
 8006166:	3601      	adds	r6, #1
 8006168:	e7d9      	b.n	800611e <_printf_common+0x8e>
	...

0800616c <_printf_i>:
 800616c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	7e0f      	ldrb	r7, [r1, #24]
 8006172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006174:	2f78      	cmp	r7, #120	; 0x78
 8006176:	4691      	mov	r9, r2
 8006178:	4680      	mov	r8, r0
 800617a:	460c      	mov	r4, r1
 800617c:	469a      	mov	sl, r3
 800617e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006182:	d807      	bhi.n	8006194 <_printf_i+0x28>
 8006184:	2f62      	cmp	r7, #98	; 0x62
 8006186:	d80a      	bhi.n	800619e <_printf_i+0x32>
 8006188:	2f00      	cmp	r7, #0
 800618a:	f000 80d8 	beq.w	800633e <_printf_i+0x1d2>
 800618e:	2f58      	cmp	r7, #88	; 0x58
 8006190:	f000 80a3 	beq.w	80062da <_printf_i+0x16e>
 8006194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800619c:	e03a      	b.n	8006214 <_printf_i+0xa8>
 800619e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061a2:	2b15      	cmp	r3, #21
 80061a4:	d8f6      	bhi.n	8006194 <_printf_i+0x28>
 80061a6:	a101      	add	r1, pc, #4	; (adr r1, 80061ac <_printf_i+0x40>)
 80061a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061ac:	08006205 	.word	0x08006205
 80061b0:	08006219 	.word	0x08006219
 80061b4:	08006195 	.word	0x08006195
 80061b8:	08006195 	.word	0x08006195
 80061bc:	08006195 	.word	0x08006195
 80061c0:	08006195 	.word	0x08006195
 80061c4:	08006219 	.word	0x08006219
 80061c8:	08006195 	.word	0x08006195
 80061cc:	08006195 	.word	0x08006195
 80061d0:	08006195 	.word	0x08006195
 80061d4:	08006195 	.word	0x08006195
 80061d8:	08006325 	.word	0x08006325
 80061dc:	08006249 	.word	0x08006249
 80061e0:	08006307 	.word	0x08006307
 80061e4:	08006195 	.word	0x08006195
 80061e8:	08006195 	.word	0x08006195
 80061ec:	08006347 	.word	0x08006347
 80061f0:	08006195 	.word	0x08006195
 80061f4:	08006249 	.word	0x08006249
 80061f8:	08006195 	.word	0x08006195
 80061fc:	08006195 	.word	0x08006195
 8006200:	0800630f 	.word	0x0800630f
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	1d1a      	adds	r2, r3, #4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	602a      	str	r2, [r5, #0]
 800620c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006214:	2301      	movs	r3, #1
 8006216:	e0a3      	b.n	8006360 <_printf_i+0x1f4>
 8006218:	6820      	ldr	r0, [r4, #0]
 800621a:	6829      	ldr	r1, [r5, #0]
 800621c:	0606      	lsls	r6, r0, #24
 800621e:	f101 0304 	add.w	r3, r1, #4
 8006222:	d50a      	bpl.n	800623a <_printf_i+0xce>
 8006224:	680e      	ldr	r6, [r1, #0]
 8006226:	602b      	str	r3, [r5, #0]
 8006228:	2e00      	cmp	r6, #0
 800622a:	da03      	bge.n	8006234 <_printf_i+0xc8>
 800622c:	232d      	movs	r3, #45	; 0x2d
 800622e:	4276      	negs	r6, r6
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006234:	485e      	ldr	r0, [pc, #376]	; (80063b0 <_printf_i+0x244>)
 8006236:	230a      	movs	r3, #10
 8006238:	e019      	b.n	800626e <_printf_i+0x102>
 800623a:	680e      	ldr	r6, [r1, #0]
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006242:	bf18      	it	ne
 8006244:	b236      	sxthne	r6, r6
 8006246:	e7ef      	b.n	8006228 <_printf_i+0xbc>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	6820      	ldr	r0, [r4, #0]
 800624c:	1d19      	adds	r1, r3, #4
 800624e:	6029      	str	r1, [r5, #0]
 8006250:	0601      	lsls	r1, r0, #24
 8006252:	d501      	bpl.n	8006258 <_printf_i+0xec>
 8006254:	681e      	ldr	r6, [r3, #0]
 8006256:	e002      	b.n	800625e <_printf_i+0xf2>
 8006258:	0646      	lsls	r6, r0, #25
 800625a:	d5fb      	bpl.n	8006254 <_printf_i+0xe8>
 800625c:	881e      	ldrh	r6, [r3, #0]
 800625e:	4854      	ldr	r0, [pc, #336]	; (80063b0 <_printf_i+0x244>)
 8006260:	2f6f      	cmp	r7, #111	; 0x6f
 8006262:	bf0c      	ite	eq
 8006264:	2308      	moveq	r3, #8
 8006266:	230a      	movne	r3, #10
 8006268:	2100      	movs	r1, #0
 800626a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800626e:	6865      	ldr	r5, [r4, #4]
 8006270:	60a5      	str	r5, [r4, #8]
 8006272:	2d00      	cmp	r5, #0
 8006274:	bfa2      	ittt	ge
 8006276:	6821      	ldrge	r1, [r4, #0]
 8006278:	f021 0104 	bicge.w	r1, r1, #4
 800627c:	6021      	strge	r1, [r4, #0]
 800627e:	b90e      	cbnz	r6, 8006284 <_printf_i+0x118>
 8006280:	2d00      	cmp	r5, #0
 8006282:	d04d      	beq.n	8006320 <_printf_i+0x1b4>
 8006284:	4615      	mov	r5, r2
 8006286:	fbb6 f1f3 	udiv	r1, r6, r3
 800628a:	fb03 6711 	mls	r7, r3, r1, r6
 800628e:	5dc7      	ldrb	r7, [r0, r7]
 8006290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006294:	4637      	mov	r7, r6
 8006296:	42bb      	cmp	r3, r7
 8006298:	460e      	mov	r6, r1
 800629a:	d9f4      	bls.n	8006286 <_printf_i+0x11a>
 800629c:	2b08      	cmp	r3, #8
 800629e:	d10b      	bne.n	80062b8 <_printf_i+0x14c>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	07de      	lsls	r6, r3, #31
 80062a4:	d508      	bpl.n	80062b8 <_printf_i+0x14c>
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	6861      	ldr	r1, [r4, #4]
 80062aa:	4299      	cmp	r1, r3
 80062ac:	bfde      	ittt	le
 80062ae:	2330      	movle	r3, #48	; 0x30
 80062b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062b8:	1b52      	subs	r2, r2, r5
 80062ba:	6122      	str	r2, [r4, #16]
 80062bc:	f8cd a000 	str.w	sl, [sp]
 80062c0:	464b      	mov	r3, r9
 80062c2:	aa03      	add	r2, sp, #12
 80062c4:	4621      	mov	r1, r4
 80062c6:	4640      	mov	r0, r8
 80062c8:	f7ff fee2 	bl	8006090 <_printf_common>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d14c      	bne.n	800636a <_printf_i+0x1fe>
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	b004      	add	sp, #16
 80062d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062da:	4835      	ldr	r0, [pc, #212]	; (80063b0 <_printf_i+0x244>)
 80062dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062e0:	6829      	ldr	r1, [r5, #0]
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80062e8:	6029      	str	r1, [r5, #0]
 80062ea:	061d      	lsls	r5, r3, #24
 80062ec:	d514      	bpl.n	8006318 <_printf_i+0x1ac>
 80062ee:	07df      	lsls	r7, r3, #31
 80062f0:	bf44      	itt	mi
 80062f2:	f043 0320 	orrmi.w	r3, r3, #32
 80062f6:	6023      	strmi	r3, [r4, #0]
 80062f8:	b91e      	cbnz	r6, 8006302 <_printf_i+0x196>
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	f023 0320 	bic.w	r3, r3, #32
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	2310      	movs	r3, #16
 8006304:	e7b0      	b.n	8006268 <_printf_i+0xfc>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	f043 0320 	orr.w	r3, r3, #32
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	2378      	movs	r3, #120	; 0x78
 8006310:	4828      	ldr	r0, [pc, #160]	; (80063b4 <_printf_i+0x248>)
 8006312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006316:	e7e3      	b.n	80062e0 <_printf_i+0x174>
 8006318:	0659      	lsls	r1, r3, #25
 800631a:	bf48      	it	mi
 800631c:	b2b6      	uxthmi	r6, r6
 800631e:	e7e6      	b.n	80062ee <_printf_i+0x182>
 8006320:	4615      	mov	r5, r2
 8006322:	e7bb      	b.n	800629c <_printf_i+0x130>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	6826      	ldr	r6, [r4, #0]
 8006328:	6961      	ldr	r1, [r4, #20]
 800632a:	1d18      	adds	r0, r3, #4
 800632c:	6028      	str	r0, [r5, #0]
 800632e:	0635      	lsls	r5, r6, #24
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	d501      	bpl.n	8006338 <_printf_i+0x1cc>
 8006334:	6019      	str	r1, [r3, #0]
 8006336:	e002      	b.n	800633e <_printf_i+0x1d2>
 8006338:	0670      	lsls	r0, r6, #25
 800633a:	d5fb      	bpl.n	8006334 <_printf_i+0x1c8>
 800633c:	8019      	strh	r1, [r3, #0]
 800633e:	2300      	movs	r3, #0
 8006340:	6123      	str	r3, [r4, #16]
 8006342:	4615      	mov	r5, r2
 8006344:	e7ba      	b.n	80062bc <_printf_i+0x150>
 8006346:	682b      	ldr	r3, [r5, #0]
 8006348:	1d1a      	adds	r2, r3, #4
 800634a:	602a      	str	r2, [r5, #0]
 800634c:	681d      	ldr	r5, [r3, #0]
 800634e:	6862      	ldr	r2, [r4, #4]
 8006350:	2100      	movs	r1, #0
 8006352:	4628      	mov	r0, r5
 8006354:	f7f9 ff44 	bl	80001e0 <memchr>
 8006358:	b108      	cbz	r0, 800635e <_printf_i+0x1f2>
 800635a:	1b40      	subs	r0, r0, r5
 800635c:	6060      	str	r0, [r4, #4]
 800635e:	6863      	ldr	r3, [r4, #4]
 8006360:	6123      	str	r3, [r4, #16]
 8006362:	2300      	movs	r3, #0
 8006364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006368:	e7a8      	b.n	80062bc <_printf_i+0x150>
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	462a      	mov	r2, r5
 800636e:	4649      	mov	r1, r9
 8006370:	4640      	mov	r0, r8
 8006372:	47d0      	blx	sl
 8006374:	3001      	adds	r0, #1
 8006376:	d0ab      	beq.n	80062d0 <_printf_i+0x164>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	079b      	lsls	r3, r3, #30
 800637c:	d413      	bmi.n	80063a6 <_printf_i+0x23a>
 800637e:	68e0      	ldr	r0, [r4, #12]
 8006380:	9b03      	ldr	r3, [sp, #12]
 8006382:	4298      	cmp	r0, r3
 8006384:	bfb8      	it	lt
 8006386:	4618      	movlt	r0, r3
 8006388:	e7a4      	b.n	80062d4 <_printf_i+0x168>
 800638a:	2301      	movs	r3, #1
 800638c:	4632      	mov	r2, r6
 800638e:	4649      	mov	r1, r9
 8006390:	4640      	mov	r0, r8
 8006392:	47d0      	blx	sl
 8006394:	3001      	adds	r0, #1
 8006396:	d09b      	beq.n	80062d0 <_printf_i+0x164>
 8006398:	3501      	adds	r5, #1
 800639a:	68e3      	ldr	r3, [r4, #12]
 800639c:	9903      	ldr	r1, [sp, #12]
 800639e:	1a5b      	subs	r3, r3, r1
 80063a0:	42ab      	cmp	r3, r5
 80063a2:	dcf2      	bgt.n	800638a <_printf_i+0x21e>
 80063a4:	e7eb      	b.n	800637e <_printf_i+0x212>
 80063a6:	2500      	movs	r5, #0
 80063a8:	f104 0619 	add.w	r6, r4, #25
 80063ac:	e7f5      	b.n	800639a <_printf_i+0x22e>
 80063ae:	bf00      	nop
 80063b0:	080066c9 	.word	0x080066c9
 80063b4:	080066da 	.word	0x080066da

080063b8 <memcpy>:
 80063b8:	440a      	add	r2, r1
 80063ba:	4291      	cmp	r1, r2
 80063bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80063c0:	d100      	bne.n	80063c4 <memcpy+0xc>
 80063c2:	4770      	bx	lr
 80063c4:	b510      	push	{r4, lr}
 80063c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ce:	4291      	cmp	r1, r2
 80063d0:	d1f9      	bne.n	80063c6 <memcpy+0xe>
 80063d2:	bd10      	pop	{r4, pc}

080063d4 <memmove>:
 80063d4:	4288      	cmp	r0, r1
 80063d6:	b510      	push	{r4, lr}
 80063d8:	eb01 0402 	add.w	r4, r1, r2
 80063dc:	d902      	bls.n	80063e4 <memmove+0x10>
 80063de:	4284      	cmp	r4, r0
 80063e0:	4623      	mov	r3, r4
 80063e2:	d807      	bhi.n	80063f4 <memmove+0x20>
 80063e4:	1e43      	subs	r3, r0, #1
 80063e6:	42a1      	cmp	r1, r4
 80063e8:	d008      	beq.n	80063fc <memmove+0x28>
 80063ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063f2:	e7f8      	b.n	80063e6 <memmove+0x12>
 80063f4:	4402      	add	r2, r0
 80063f6:	4601      	mov	r1, r0
 80063f8:	428a      	cmp	r2, r1
 80063fa:	d100      	bne.n	80063fe <memmove+0x2a>
 80063fc:	bd10      	pop	{r4, pc}
 80063fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006406:	e7f7      	b.n	80063f8 <memmove+0x24>

08006408 <_free_r>:
 8006408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800640a:	2900      	cmp	r1, #0
 800640c:	d044      	beq.n	8006498 <_free_r+0x90>
 800640e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006412:	9001      	str	r0, [sp, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f1a1 0404 	sub.w	r4, r1, #4
 800641a:	bfb8      	it	lt
 800641c:	18e4      	addlt	r4, r4, r3
 800641e:	f000 f913 	bl	8006648 <__malloc_lock>
 8006422:	4a1e      	ldr	r2, [pc, #120]	; (800649c <_free_r+0x94>)
 8006424:	9801      	ldr	r0, [sp, #4]
 8006426:	6813      	ldr	r3, [r2, #0]
 8006428:	b933      	cbnz	r3, 8006438 <_free_r+0x30>
 800642a:	6063      	str	r3, [r4, #4]
 800642c:	6014      	str	r4, [r2, #0]
 800642e:	b003      	add	sp, #12
 8006430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006434:	f000 b90e 	b.w	8006654 <__malloc_unlock>
 8006438:	42a3      	cmp	r3, r4
 800643a:	d908      	bls.n	800644e <_free_r+0x46>
 800643c:	6825      	ldr	r5, [r4, #0]
 800643e:	1961      	adds	r1, r4, r5
 8006440:	428b      	cmp	r3, r1
 8006442:	bf01      	itttt	eq
 8006444:	6819      	ldreq	r1, [r3, #0]
 8006446:	685b      	ldreq	r3, [r3, #4]
 8006448:	1949      	addeq	r1, r1, r5
 800644a:	6021      	streq	r1, [r4, #0]
 800644c:	e7ed      	b.n	800642a <_free_r+0x22>
 800644e:	461a      	mov	r2, r3
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	b10b      	cbz	r3, 8006458 <_free_r+0x50>
 8006454:	42a3      	cmp	r3, r4
 8006456:	d9fa      	bls.n	800644e <_free_r+0x46>
 8006458:	6811      	ldr	r1, [r2, #0]
 800645a:	1855      	adds	r5, r2, r1
 800645c:	42a5      	cmp	r5, r4
 800645e:	d10b      	bne.n	8006478 <_free_r+0x70>
 8006460:	6824      	ldr	r4, [r4, #0]
 8006462:	4421      	add	r1, r4
 8006464:	1854      	adds	r4, r2, r1
 8006466:	42a3      	cmp	r3, r4
 8006468:	6011      	str	r1, [r2, #0]
 800646a:	d1e0      	bne.n	800642e <_free_r+0x26>
 800646c:	681c      	ldr	r4, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	6053      	str	r3, [r2, #4]
 8006472:	4421      	add	r1, r4
 8006474:	6011      	str	r1, [r2, #0]
 8006476:	e7da      	b.n	800642e <_free_r+0x26>
 8006478:	d902      	bls.n	8006480 <_free_r+0x78>
 800647a:	230c      	movs	r3, #12
 800647c:	6003      	str	r3, [r0, #0]
 800647e:	e7d6      	b.n	800642e <_free_r+0x26>
 8006480:	6825      	ldr	r5, [r4, #0]
 8006482:	1961      	adds	r1, r4, r5
 8006484:	428b      	cmp	r3, r1
 8006486:	bf04      	itt	eq
 8006488:	6819      	ldreq	r1, [r3, #0]
 800648a:	685b      	ldreq	r3, [r3, #4]
 800648c:	6063      	str	r3, [r4, #4]
 800648e:	bf04      	itt	eq
 8006490:	1949      	addeq	r1, r1, r5
 8006492:	6021      	streq	r1, [r4, #0]
 8006494:	6054      	str	r4, [r2, #4]
 8006496:	e7ca      	b.n	800642e <_free_r+0x26>
 8006498:	b003      	add	sp, #12
 800649a:	bd30      	pop	{r4, r5, pc}
 800649c:	20000240 	.word	0x20000240

080064a0 <sbrk_aligned>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	4e0e      	ldr	r6, [pc, #56]	; (80064dc <sbrk_aligned+0x3c>)
 80064a4:	460c      	mov	r4, r1
 80064a6:	6831      	ldr	r1, [r6, #0]
 80064a8:	4605      	mov	r5, r0
 80064aa:	b911      	cbnz	r1, 80064b2 <sbrk_aligned+0x12>
 80064ac:	f000 f8bc 	bl	8006628 <_sbrk_r>
 80064b0:	6030      	str	r0, [r6, #0]
 80064b2:	4621      	mov	r1, r4
 80064b4:	4628      	mov	r0, r5
 80064b6:	f000 f8b7 	bl	8006628 <_sbrk_r>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	d00a      	beq.n	80064d4 <sbrk_aligned+0x34>
 80064be:	1cc4      	adds	r4, r0, #3
 80064c0:	f024 0403 	bic.w	r4, r4, #3
 80064c4:	42a0      	cmp	r0, r4
 80064c6:	d007      	beq.n	80064d8 <sbrk_aligned+0x38>
 80064c8:	1a21      	subs	r1, r4, r0
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 f8ac 	bl	8006628 <_sbrk_r>
 80064d0:	3001      	adds	r0, #1
 80064d2:	d101      	bne.n	80064d8 <sbrk_aligned+0x38>
 80064d4:	f04f 34ff 	mov.w	r4, #4294967295
 80064d8:	4620      	mov	r0, r4
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	20000244 	.word	0x20000244

080064e0 <_malloc_r>:
 80064e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e4:	1ccd      	adds	r5, r1, #3
 80064e6:	f025 0503 	bic.w	r5, r5, #3
 80064ea:	3508      	adds	r5, #8
 80064ec:	2d0c      	cmp	r5, #12
 80064ee:	bf38      	it	cc
 80064f0:	250c      	movcc	r5, #12
 80064f2:	2d00      	cmp	r5, #0
 80064f4:	4607      	mov	r7, r0
 80064f6:	db01      	blt.n	80064fc <_malloc_r+0x1c>
 80064f8:	42a9      	cmp	r1, r5
 80064fa:	d905      	bls.n	8006508 <_malloc_r+0x28>
 80064fc:	230c      	movs	r3, #12
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	2600      	movs	r6, #0
 8006502:	4630      	mov	r0, r6
 8006504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006508:	4e2e      	ldr	r6, [pc, #184]	; (80065c4 <_malloc_r+0xe4>)
 800650a:	f000 f89d 	bl	8006648 <__malloc_lock>
 800650e:	6833      	ldr	r3, [r6, #0]
 8006510:	461c      	mov	r4, r3
 8006512:	bb34      	cbnz	r4, 8006562 <_malloc_r+0x82>
 8006514:	4629      	mov	r1, r5
 8006516:	4638      	mov	r0, r7
 8006518:	f7ff ffc2 	bl	80064a0 <sbrk_aligned>
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	4604      	mov	r4, r0
 8006520:	d14d      	bne.n	80065be <_malloc_r+0xde>
 8006522:	6834      	ldr	r4, [r6, #0]
 8006524:	4626      	mov	r6, r4
 8006526:	2e00      	cmp	r6, #0
 8006528:	d140      	bne.n	80065ac <_malloc_r+0xcc>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	4631      	mov	r1, r6
 800652e:	4638      	mov	r0, r7
 8006530:	eb04 0803 	add.w	r8, r4, r3
 8006534:	f000 f878 	bl	8006628 <_sbrk_r>
 8006538:	4580      	cmp	r8, r0
 800653a:	d13a      	bne.n	80065b2 <_malloc_r+0xd2>
 800653c:	6821      	ldr	r1, [r4, #0]
 800653e:	3503      	adds	r5, #3
 8006540:	1a6d      	subs	r5, r5, r1
 8006542:	f025 0503 	bic.w	r5, r5, #3
 8006546:	3508      	adds	r5, #8
 8006548:	2d0c      	cmp	r5, #12
 800654a:	bf38      	it	cc
 800654c:	250c      	movcc	r5, #12
 800654e:	4629      	mov	r1, r5
 8006550:	4638      	mov	r0, r7
 8006552:	f7ff ffa5 	bl	80064a0 <sbrk_aligned>
 8006556:	3001      	adds	r0, #1
 8006558:	d02b      	beq.n	80065b2 <_malloc_r+0xd2>
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	442b      	add	r3, r5
 800655e:	6023      	str	r3, [r4, #0]
 8006560:	e00e      	b.n	8006580 <_malloc_r+0xa0>
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	1b52      	subs	r2, r2, r5
 8006566:	d41e      	bmi.n	80065a6 <_malloc_r+0xc6>
 8006568:	2a0b      	cmp	r2, #11
 800656a:	d916      	bls.n	800659a <_malloc_r+0xba>
 800656c:	1961      	adds	r1, r4, r5
 800656e:	42a3      	cmp	r3, r4
 8006570:	6025      	str	r5, [r4, #0]
 8006572:	bf18      	it	ne
 8006574:	6059      	strne	r1, [r3, #4]
 8006576:	6863      	ldr	r3, [r4, #4]
 8006578:	bf08      	it	eq
 800657a:	6031      	streq	r1, [r6, #0]
 800657c:	5162      	str	r2, [r4, r5]
 800657e:	604b      	str	r3, [r1, #4]
 8006580:	4638      	mov	r0, r7
 8006582:	f104 060b 	add.w	r6, r4, #11
 8006586:	f000 f865 	bl	8006654 <__malloc_unlock>
 800658a:	f026 0607 	bic.w	r6, r6, #7
 800658e:	1d23      	adds	r3, r4, #4
 8006590:	1af2      	subs	r2, r6, r3
 8006592:	d0b6      	beq.n	8006502 <_malloc_r+0x22>
 8006594:	1b9b      	subs	r3, r3, r6
 8006596:	50a3      	str	r3, [r4, r2]
 8006598:	e7b3      	b.n	8006502 <_malloc_r+0x22>
 800659a:	6862      	ldr	r2, [r4, #4]
 800659c:	42a3      	cmp	r3, r4
 800659e:	bf0c      	ite	eq
 80065a0:	6032      	streq	r2, [r6, #0]
 80065a2:	605a      	strne	r2, [r3, #4]
 80065a4:	e7ec      	b.n	8006580 <_malloc_r+0xa0>
 80065a6:	4623      	mov	r3, r4
 80065a8:	6864      	ldr	r4, [r4, #4]
 80065aa:	e7b2      	b.n	8006512 <_malloc_r+0x32>
 80065ac:	4634      	mov	r4, r6
 80065ae:	6876      	ldr	r6, [r6, #4]
 80065b0:	e7b9      	b.n	8006526 <_malloc_r+0x46>
 80065b2:	230c      	movs	r3, #12
 80065b4:	603b      	str	r3, [r7, #0]
 80065b6:	4638      	mov	r0, r7
 80065b8:	f000 f84c 	bl	8006654 <__malloc_unlock>
 80065bc:	e7a1      	b.n	8006502 <_malloc_r+0x22>
 80065be:	6025      	str	r5, [r4, #0]
 80065c0:	e7de      	b.n	8006580 <_malloc_r+0xa0>
 80065c2:	bf00      	nop
 80065c4:	20000240 	.word	0x20000240

080065c8 <_realloc_r>:
 80065c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065cc:	4680      	mov	r8, r0
 80065ce:	4614      	mov	r4, r2
 80065d0:	460e      	mov	r6, r1
 80065d2:	b921      	cbnz	r1, 80065de <_realloc_r+0x16>
 80065d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065d8:	4611      	mov	r1, r2
 80065da:	f7ff bf81 	b.w	80064e0 <_malloc_r>
 80065de:	b92a      	cbnz	r2, 80065ec <_realloc_r+0x24>
 80065e0:	f7ff ff12 	bl	8006408 <_free_r>
 80065e4:	4625      	mov	r5, r4
 80065e6:	4628      	mov	r0, r5
 80065e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ec:	f000 f838 	bl	8006660 <_malloc_usable_size_r>
 80065f0:	4284      	cmp	r4, r0
 80065f2:	4607      	mov	r7, r0
 80065f4:	d802      	bhi.n	80065fc <_realloc_r+0x34>
 80065f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065fa:	d812      	bhi.n	8006622 <_realloc_r+0x5a>
 80065fc:	4621      	mov	r1, r4
 80065fe:	4640      	mov	r0, r8
 8006600:	f7ff ff6e 	bl	80064e0 <_malloc_r>
 8006604:	4605      	mov	r5, r0
 8006606:	2800      	cmp	r0, #0
 8006608:	d0ed      	beq.n	80065e6 <_realloc_r+0x1e>
 800660a:	42bc      	cmp	r4, r7
 800660c:	4622      	mov	r2, r4
 800660e:	4631      	mov	r1, r6
 8006610:	bf28      	it	cs
 8006612:	463a      	movcs	r2, r7
 8006614:	f7ff fed0 	bl	80063b8 <memcpy>
 8006618:	4631      	mov	r1, r6
 800661a:	4640      	mov	r0, r8
 800661c:	f7ff fef4 	bl	8006408 <_free_r>
 8006620:	e7e1      	b.n	80065e6 <_realloc_r+0x1e>
 8006622:	4635      	mov	r5, r6
 8006624:	e7df      	b.n	80065e6 <_realloc_r+0x1e>
	...

08006628 <_sbrk_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4d06      	ldr	r5, [pc, #24]	; (8006644 <_sbrk_r+0x1c>)
 800662c:	2300      	movs	r3, #0
 800662e:	4604      	mov	r4, r0
 8006630:	4608      	mov	r0, r1
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	f7fa fd04 	bl	8001040 <_sbrk>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	d102      	bne.n	8006642 <_sbrk_r+0x1a>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	b103      	cbz	r3, 8006642 <_sbrk_r+0x1a>
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	20000248 	.word	0x20000248

08006648 <__malloc_lock>:
 8006648:	4801      	ldr	r0, [pc, #4]	; (8006650 <__malloc_lock+0x8>)
 800664a:	f000 b811 	b.w	8006670 <__retarget_lock_acquire_recursive>
 800664e:	bf00      	nop
 8006650:	2000024c 	.word	0x2000024c

08006654 <__malloc_unlock>:
 8006654:	4801      	ldr	r0, [pc, #4]	; (800665c <__malloc_unlock+0x8>)
 8006656:	f000 b80c 	b.w	8006672 <__retarget_lock_release_recursive>
 800665a:	bf00      	nop
 800665c:	2000024c 	.word	0x2000024c

08006660 <_malloc_usable_size_r>:
 8006660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006664:	1f18      	subs	r0, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	bfbc      	itt	lt
 800666a:	580b      	ldrlt	r3, [r1, r0]
 800666c:	18c0      	addlt	r0, r0, r3
 800666e:	4770      	bx	lr

08006670 <__retarget_lock_acquire_recursive>:
 8006670:	4770      	bx	lr

08006672 <__retarget_lock_release_recursive>:
 8006672:	4770      	bx	lr

08006674 <_init>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	bf00      	nop
 8006678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667a:	bc08      	pop	{r3}
 800667c:	469e      	mov	lr, r3
 800667e:	4770      	bx	lr

08006680 <_fini>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	bf00      	nop
 8006684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006686:	bc08      	pop	{r3}
 8006688:	469e      	mov	lr, r3
 800668a:	4770      	bx	lr
