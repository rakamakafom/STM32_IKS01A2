
PROJEKT_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800bb50  0800bb50  0001bb50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c04c  0800c04c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c04c  0800c04c  0001c04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c054  0800c054  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c054  0800c054  0001c054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c058  0800c058  0001c058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001e8  0800c244  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  0800c244  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebb7  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002104  00000000  00000000  0002edcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00030ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  00031aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d06  00000000  00000000  000325b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f866  00000000  00000000  0004a2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090bd8  00000000  00000000  00059b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea6fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000466c  00000000  00000000  000ea74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb38 	.word	0x0800bb38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800bb38 	.word	0x0800bb38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f001 f987 	bl	8002320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001012:	f000 f9a3 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001016:	f000 fab1 	bl	800157c <MX_GPIO_Init>
  MX_DMA_Init();
 800101a:	f000 fa87 	bl	800152c <MX_DMA_Init>
  MX_I2C1_Init();
 800101e:	f000 fa07 	bl	8001430 <MX_I2C1_Init>
  MX_RTC_Init();
 8001022:	f000 fa33 	bl	800148c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001026:	f000 fa57 	bl	80014d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */



  //Read WHOAMI for HTS221 - temperature, humidity
      HAL_I2C_Mem_Read(&hi2c1, HTS221_ADR, HTS221_ADR_WHO_AM_I,1, &HTS221_WHOAMI_buf, 1, 5);
 800102a:	2305      	movs	r3, #5
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	2301      	movs	r3, #1
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	4ba8      	ldr	r3, [pc, #672]	; (80012d4 <main+0x2cc>)
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	220f      	movs	r2, #15
 800103a:	21be      	movs	r1, #190	; 0xbe
 800103c:	48a6      	ldr	r0, [pc, #664]	; (80012d8 <main+0x2d0>)
 800103e:	f002 fa6f 	bl	8003520 <HAL_I2C_Mem_Read>
    //Read WHOAMI for LSM6DSL -  accelerometer,  gyroscope
      HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_ADR, LSM6DSL_ADR_WHOAMI, 1, &LSM6DSL_WHOAMI_buf, 1, 5);
 8001042:	2305      	movs	r3, #5
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2301      	movs	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	4ba4      	ldr	r3, [pc, #656]	; (80012dc <main+0x2d4>)
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	220f      	movs	r2, #15
 8001052:	21d6      	movs	r1, #214	; 0xd6
 8001054:	48a0      	ldr	r0, [pc, #640]	; (80012d8 <main+0x2d0>)
 8001056:	f002 fa63 	bl	8003520 <HAL_I2C_Mem_Read>
  	  //Read WHOAMI for LSM303AGR - accelerometer
  		HAL_I2C_Mem_Read(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_ADR_WHOAMI_ACCE, 1, &LSM303AGR_ACCE_WHOAMI_buff, 1, 5);
 800105a:	2305      	movs	r3, #5
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2301      	movs	r3, #1
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	4b9f      	ldr	r3, [pc, #636]	; (80012e0 <main+0x2d8>)
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	220f      	movs	r2, #15
 800106a:	2132      	movs	r1, #50	; 0x32
 800106c:	489a      	ldr	r0, [pc, #616]	; (80012d8 <main+0x2d0>)
 800106e:	f002 fa57 	bl	8003520 <HAL_I2C_Mem_Read>
  	  //Read WHOAMI for LSM303AGR - gyroscope
  		HAL_I2C_Mem_Read(&hi2c1, LSM303AGR_ADR_GYRO, LSM303AGR_ADR_WHOAMI_GYRO, 1, &LSM303AGR_GYRO_WHOAMI_buff, 1, 5);
 8001072:	2305      	movs	r3, #5
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	2301      	movs	r3, #1
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	4b9a      	ldr	r3, [pc, #616]	; (80012e4 <main+0x2dc>)
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	224f      	movs	r2, #79	; 0x4f
 8001082:	213c      	movs	r1, #60	; 0x3c
 8001084:	4894      	ldr	r0, [pc, #592]	; (80012d8 <main+0x2d0>)
 8001086:	f002 fa4b 	bl	8003520 <HAL_I2C_Mem_Read>
    //Read WHOAMI for LPS22HB MEMS pressure sensor, 260-1260 hPa absolute digital output barometer
      HAL_I2C_Mem_Read(&hi2c1, LPS22HB_ADR, LPS22HB_ADR_WHOAMI, 1, &LPS22HB_WHOAMI_buf, 1, 50);
 800108a:	2332      	movs	r3, #50	; 0x32
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	4b95      	ldr	r3, [pc, #596]	; (80012e8 <main+0x2e0>)
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	220f      	movs	r2, #15
 800109a:	21ba      	movs	r1, #186	; 0xba
 800109c:	488e      	ldr	r0, [pc, #568]	; (80012d8 <main+0x2d0>)
 800109e:	f002 fa3f 	bl	8003520 <HAL_I2C_Mem_Read>

    //LSM6DSL SET REGISTER
      HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_ADR, LSM6DSL_ADR_CTRL1_XL, 1, &LSM6DSL_CTRL1_XL, 1, 5);
 80010a2:	2305      	movs	r3, #5
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	2301      	movs	r3, #1
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	4b90      	ldr	r3, [pc, #576]	; (80012ec <main+0x2e4>)
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	2210      	movs	r2, #16
 80010b2:	21d6      	movs	r1, #214	; 0xd6
 80010b4:	4888      	ldr	r0, [pc, #544]	; (80012d8 <main+0x2d0>)
 80010b6:	f002 f939 	bl	800332c <HAL_I2C_Mem_Write>
      HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_ADR, LSM6DSL_GYRRO_CTRL2_G, 1, &LSM6DSL_GYRRO_CTRL2_G_sett, 1, 5);
 80010ba:	2305      	movs	r3, #5
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	2301      	movs	r3, #1
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	4b8b      	ldr	r3, [pc, #556]	; (80012f0 <main+0x2e8>)
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	2211      	movs	r2, #17
 80010ca:	21d6      	movs	r1, #214	; 0xd6
 80010cc:	4882      	ldr	r0, [pc, #520]	; (80012d8 <main+0x2d0>)
 80010ce:	f002 f92d 	bl	800332c <HAL_I2C_Mem_Write>
    //LSM303AGR SET REGISTER
      HAL_I2C_Mem_Write(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_TEMP_CFG_REG_A, 1, &LSM303AGR_TEMP_CFG_REG_A_settings, 1, 5); //ON TEMPERATURE
 80010d2:	2305      	movs	r3, #5
 80010d4:	9302      	str	r3, [sp, #8]
 80010d6:	2301      	movs	r3, #1
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	4b86      	ldr	r3, [pc, #536]	; (80012f4 <main+0x2ec>)
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	221f      	movs	r2, #31
 80010e2:	2132      	movs	r1, #50	; 0x32
 80010e4:	487c      	ldr	r0, [pc, #496]	; (80012d8 <main+0x2d0>)
 80010e6:	f002 f921 	bl	800332c <HAL_I2C_Mem_Write>
      HAL_I2C_Mem_Write(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_CTRL_REG2_A, 1, &LSM303AGR_CTRL_REG2_A_settings, 1, 5);
 80010ea:	2305      	movs	r3, #5
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	2301      	movs	r3, #1
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	4b81      	ldr	r3, [pc, #516]	; (80012f8 <main+0x2f0>)
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	2221      	movs	r2, #33	; 0x21
 80010fa:	2132      	movs	r1, #50	; 0x32
 80010fc:	4876      	ldr	r0, [pc, #472]	; (80012d8 <main+0x2d0>)
 80010fe:	f002 f915 	bl	800332c <HAL_I2C_Mem_Write>
      HAL_I2C_Mem_Write(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_CTRL_REG3_A, 1, &LSM303AGR_CTRL_REG3_A_settings, 1, 5);
 8001102:	2305      	movs	r3, #5
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	2301      	movs	r3, #1
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	4b7c      	ldr	r3, [pc, #496]	; (80012fc <main+0x2f4>)
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2301      	movs	r3, #1
 8001110:	2222      	movs	r2, #34	; 0x22
 8001112:	2132      	movs	r1, #50	; 0x32
 8001114:	4870      	ldr	r0, [pc, #448]	; (80012d8 <main+0x2d0>)
 8001116:	f002 f909 	bl	800332c <HAL_I2C_Mem_Write>
      HAL_I2C_Mem_Write(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_CTRL_REG4_A, 1, &LSM303AGR_CTRL_REG4_A_settings, 1, 5);
 800111a:	2305      	movs	r3, #5
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	4b77      	ldr	r3, [pc, #476]	; (8001300 <main+0x2f8>)
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	2223      	movs	r2, #35	; 0x23
 800112a:	2132      	movs	r1, #50	; 0x32
 800112c:	486a      	ldr	r0, [pc, #424]	; (80012d8 <main+0x2d0>)
 800112e:	f002 f8fd 	bl	800332c <HAL_I2C_Mem_Write>
      HAL_I2C_Mem_Write(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_CTRL_REG1_A, 1, &LSM303AGR_CTRL_REG1_A_settings, 1, 5);
 8001132:	2305      	movs	r3, #5
 8001134:	9302      	str	r3, [sp, #8]
 8001136:	2301      	movs	r3, #1
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	4b72      	ldr	r3, [pc, #456]	; (8001304 <main+0x2fc>)
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	2220      	movs	r2, #32
 8001142:	2132      	movs	r1, #50	; 0x32
 8001144:	4864      	ldr	r0, [pc, #400]	; (80012d8 <main+0x2d0>)
 8001146:	f002 f8f1 	bl	800332c <HAL_I2C_Mem_Write>

      //LPS22HB SET REGISTER
      HAL_I2C_Mem_Write(&hi2c1, LPS22HB_ADR, LPS22HB_LPS22HB_CTRL_REG1, 1, &LPS22HB_CTRL_REG1_A_settings, 1, 5);
 800114a:	2305      	movs	r3, #5
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	2301      	movs	r3, #1
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	4b6d      	ldr	r3, [pc, #436]	; (8001308 <main+0x300>)
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	2210      	movs	r2, #16
 800115a:	21ba      	movs	r1, #186	; 0xba
 800115c:	485e      	ldr	r0, [pc, #376]	; (80012d8 <main+0x2d0>)
 800115e:	f002 f8e5 	bl	800332c <HAL_I2C_Mem_Write>

     //HTS221 SET REGISTER

      HAL_I2C_Mem_Write(&hi2c1, HTS221_ADR, HTS221_CTR_REG_1, 1,  &HTTS221_CTR_REG_1_settings, 1, 5);
 8001162:	2305      	movs	r3, #5
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	2301      	movs	r3, #1
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	4b68      	ldr	r3, [pc, #416]	; (800130c <main+0x304>)
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	2220      	movs	r2, #32
 8001172:	21be      	movs	r1, #190	; 0xbe
 8001174:	4858      	ldr	r0, [pc, #352]	; (80012d8 <main+0x2d0>)
 8001176:	f002 f8d9 	bl	800332c <HAL_I2C_Mem_Write>
     //HTS221 READ CONTROL DATA Interpolation TEMP
		  HAL_I2C_Mem_Read(&hi2c1, HTS221_ADR, HTS221_T0_degC_x8, 1, HTS221_Data_buff, 2, 5);
 800117a:	2305      	movs	r3, #5
 800117c:	9302      	str	r3, [sp, #8]
 800117e:	2302      	movs	r3, #2
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	4b63      	ldr	r3, [pc, #396]	; (8001310 <main+0x308>)
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	22b2      	movs	r2, #178	; 0xb2
 800118a:	21be      	movs	r1, #190	; 0xbe
 800118c:	4852      	ldr	r0, [pc, #328]	; (80012d8 <main+0x2d0>)
 800118e:	f002 f9c7 	bl	8003520 <HAL_I2C_Mem_Read>
		  HTTS221_T0_degC = HTS221_Data_buff[0];
 8001192:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <main+0x308>)
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <main+0x30c>)
 8001198:	701a      	strb	r2, [r3, #0]
		  HTTS221_T1_degC = HTS221_Data_buff[1];
 800119a:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <main+0x308>)
 800119c:	785a      	ldrb	r2, [r3, #1]
 800119e:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <main+0x310>)
 80011a0:	701a      	strb	r2, [r3, #0]
		  HAL_I2C_Mem_Read(&hi2c1, HTS221_ADR, HTS221_T1T0_MSB, 1, HTS221_Data_buff, 1, 5);
 80011a2:	2305      	movs	r3, #5
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	2301      	movs	r3, #1
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	4b59      	ldr	r3, [pc, #356]	; (8001310 <main+0x308>)
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2301      	movs	r3, #1
 80011b0:	22b5      	movs	r2, #181	; 0xb5
 80011b2:	21be      	movs	r1, #190	; 0xbe
 80011b4:	4848      	ldr	r0, [pc, #288]	; (80012d8 <main+0x2d0>)
 80011b6:	f002 f9b3 	bl	8003520 <HAL_I2C_Mem_Read>
		  HTTS221_T_MSB = HTS221_Data_buff[0];
 80011ba:	4b55      	ldr	r3, [pc, #340]	; (8001310 <main+0x308>)
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	4b57      	ldr	r3, [pc, #348]	; (800131c <main+0x314>)
 80011c0:	701a      	strb	r2, [r3, #0]
		  HAL_I2C_Mem_Read(&hi2c1, HTS221_ADR, HTS221_TEMP_T0_OUT, 1,  HTS221_Data_buff, 4, 5);
 80011c2:	2305      	movs	r3, #5
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2304      	movs	r3, #4
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	4b51      	ldr	r3, [pc, #324]	; (8001310 <main+0x308>)
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	22bc      	movs	r2, #188	; 0xbc
 80011d2:	21be      	movs	r1, #190	; 0xbe
 80011d4:	4840      	ldr	r0, [pc, #256]	; (80012d8 <main+0x2d0>)
 80011d6:	f002 f9a3 	bl	8003520 <HAL_I2C_Mem_Read>
		  HTTS221_T0_OUT = (HTS221_Data_buff[1] << 8) + HTS221_Data_buff[0];
 80011da:	4b4d      	ldr	r3, [pc, #308]	; (8001310 <main+0x308>)
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b4a      	ldr	r3, [pc, #296]	; (8001310 <main+0x308>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4413      	add	r3, r2
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	4b4b      	ldr	r3, [pc, #300]	; (8001320 <main+0x318>)
 80011f2:	801a      	strh	r2, [r3, #0]
		  HTTS221_T1_OUT = (HTS221_Data_buff[3] << 8) + HTS221_Data_buff[2];
 80011f4:	4b46      	ldr	r3, [pc, #280]	; (8001310 <main+0x308>)
 80011f6:	78db      	ldrb	r3, [r3, #3]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	4b44      	ldr	r3, [pc, #272]	; (8001310 <main+0x308>)
 8001200:	789b      	ldrb	r3, [r3, #2]
 8001202:	b29b      	uxth	r3, r3
 8001204:	4413      	add	r3, r2
 8001206:	b29b      	uxth	r3, r3
 8001208:	b21a      	sxth	r2, r3
 800120a:	4b46      	ldr	r3, [pc, #280]	; (8001324 <main+0x31c>)
 800120c:	801a      	strh	r2, [r3, #0]
		  HTTS221_T0_degC = HTTS221_T0_degC / 8;
 800120e:	4b41      	ldr	r3, [pc, #260]	; (8001314 <main+0x30c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	08db      	lsrs	r3, r3, #3
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <main+0x30c>)
 8001218:	701a      	strb	r2, [r3, #0]
		  HTTS221_T1_degC = HTTS221_T1_degC / 8;
 800121a:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <main+0x310>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	08db      	lsrs	r3, r3, #3
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <main+0x310>)
 8001224:	701a      	strb	r2, [r3, #0]

	 //HTS221 READ CONTROL DATA Interpolation HUMI
		  HAL_I2C_Mem_Read(&hi2c1, HTS221_ADR, HTS221_H0_rH_x2, 1, HTS221_Data_buff, 2, 5);
 8001226:	2305      	movs	r3, #5
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2302      	movs	r3, #2
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <main+0x308>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	22b0      	movs	r2, #176	; 0xb0
 8001236:	21be      	movs	r1, #190	; 0xbe
 8001238:	4827      	ldr	r0, [pc, #156]	; (80012d8 <main+0x2d0>)
 800123a:	f002 f971 	bl	8003520 <HAL_I2C_Mem_Read>
		  HTTS221_H0_rH_x2 =  HTS221_Data_buff[0] / 2;
 800123e:	4b34      	ldr	r3, [pc, #208]	; (8001310 <main+0x308>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	085b      	lsrs	r3, r3, #1
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b38      	ldr	r3, [pc, #224]	; (8001328 <main+0x320>)
 8001248:	701a      	strb	r2, [r3, #0]
		  HTTS221_H1_rH_x2 =  HTS221_Data_buff[1] / 2;
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <main+0x308>)
 800124c:	785b      	ldrb	r3, [r3, #1]
 800124e:	085b      	lsrs	r3, r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b36      	ldr	r3, [pc, #216]	; (800132c <main+0x324>)
 8001254:	701a      	strb	r2, [r3, #0]

		  HAL_I2C_Mem_Read(&hi2c1, HTS221_ADR, HTS221_H0_T0_OUT, 1, HTS221_Data_buff, 2, 5);
 8001256:	2305      	movs	r3, #5
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	2302      	movs	r3, #2
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <main+0x308>)
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	22b6      	movs	r2, #182	; 0xb6
 8001266:	21be      	movs	r1, #190	; 0xbe
 8001268:	481b      	ldr	r0, [pc, #108]	; (80012d8 <main+0x2d0>)
 800126a:	f002 f959 	bl	8003520 <HAL_I2C_Mem_Read>
		  HTTS221_H0_T0_OUT = (HTS221_Data_buff[1] << 8) + HTS221_Data_buff[0];
 800126e:	4b28      	ldr	r3, [pc, #160]	; (8001310 <main+0x308>)
 8001270:	785b      	ldrb	r3, [r3, #1]
 8001272:	b29b      	uxth	r3, r3
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <main+0x308>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	b29b      	uxth	r3, r3
 8001282:	b21a      	sxth	r2, r3
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <main+0x328>)
 8001286:	801a      	strh	r2, [r3, #0]
		  HAL_I2C_Mem_Read(&hi2c1, HTS221_ADR, HTS221_H1_T0_OUT, 1, HTS221_Data_buff, 2, 5);
 8001288:	2305      	movs	r3, #5
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2302      	movs	r3, #2
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <main+0x308>)
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	22ba      	movs	r2, #186	; 0xba
 8001298:	21be      	movs	r1, #190	; 0xbe
 800129a:	480f      	ldr	r0, [pc, #60]	; (80012d8 <main+0x2d0>)
 800129c:	f002 f940 	bl	8003520 <HAL_I2C_Mem_Read>
		  HTTS221_H1_T0_OUT = (HTS221_Data_buff[1] << 8) + HTS221_Data_buff[0];
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <main+0x308>)
 80012a2:	785b      	ldrb	r3, [r3, #1]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <main+0x308>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <main+0x32c>)
 80012b8:	801a      	strh	r2, [r3, #0]
//      HTTS221_H1_rH_x2_sett = HTTS221_CTR_CALIBRATION_REG[1];
//      HTTS221_H0_T0_OUT_sett = (HTTS221_CTR_CALIBRATION_REG[3] << 8) + HTTS221_CTR_CALIBRATION_REG[2];
//      HTTS221_H1_T0_OUT_sett = (HTTS221_CTR_CALIBRATION_REG[5] << 8) + HTTS221_CTR_CALIBRATION_REG[4];

      //First Interrupt
      HAL_I2C_Mem_Read_IT(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_OUT_X_L_A, 1, LSM303AGR_DATA_ACCE_buff, 6);
 80012ba:	2306      	movs	r3, #6
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <main+0x330>)
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2301      	movs	r3, #1
 80012c4:	22a8      	movs	r2, #168	; 0xa8
 80012c6:	2132      	movs	r1, #50	; 0x32
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <main+0x2d0>)
 80012ca:	f002 fb4f 	bl	800396c <HAL_I2C_Mem_Read_IT>

      //START UART_DMA
      HAL_UART_Transmit_DMA(&huart2, (uint8_t*) UART_BUFFOR, 70);
 80012ce:	2246      	movs	r2, #70	; 0x46
 80012d0:	e034      	b.n	800133c <main+0x334>
 80012d2:	bf00      	nop
 80012d4:	2000037c 	.word	0x2000037c
 80012d8:	20000204 	.word	0x20000204
 80012dc:	20000392 	.word	0x20000392
 80012e0:	20000393 	.word	0x20000393
 80012e4:	20000394 	.word	0x20000394
 80012e8:	2000039e 	.word	0x2000039e
 80012ec:	20000001 	.word	0x20000001
 80012f0:	20000002 	.word	0x20000002
 80012f4:	20000005 	.word	0x20000005
 80012f8:	20000395 	.word	0x20000395
 80012fc:	20000396 	.word	0x20000396
 8001300:	20000004 	.word	0x20000004
 8001304:	20000003 	.word	0x20000003
 8001308:	20000006 	.word	0x20000006
 800130c:	20000000 	.word	0x20000000
 8001310:	20000380 	.word	0x20000380
 8001314:	20000384 	.word	0x20000384
 8001318:	20000385 	.word	0x20000385
 800131c:	20000386 	.word	0x20000386
 8001320:	20000388 	.word	0x20000388
 8001324:	2000038a 	.word	0x2000038a
 8001328:	2000038c 	.word	0x2000038c
 800132c:	2000038d 	.word	0x2000038d
 8001330:	2000038e 	.word	0x2000038e
 8001334:	20000390 	.word	0x20000390
 8001338:	20000398 	.word	0x20000398
 800133c:	4904      	ldr	r1, [pc, #16]	; (8001350 <main+0x348>)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <main+0x34c>)
 8001340:	f005 f978 	bl	8006634 <HAL_UART_Transmit_DMA>
      HAL_UART_Receive_DMA(&huart2, (uint8_t*) &UART_RECEIVE_BUFFOR, 1);
 8001344:	2201      	movs	r2, #1
 8001346:	4904      	ldr	r1, [pc, #16]	; (8001358 <main+0x350>)
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <main+0x34c>)
 800134a:	f005 f9f1 	bl	8006730 <HAL_UART_Receive_DMA>
      //uart_send_string_DMA( (char*) UART_BUFFOR, 50); //test
      //uart_send_string_DMA((char*) "HELLO", 50);   //test


  while (1)
 800134e:	e7fe      	b.n	800134e <main+0x346>
 8001350:	200003a0 	.word	0x200003a0
 8001354:	20000278 	.word	0x20000278
 8001358:	20000404 	.word	0x20000404

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b094      	sub	sp, #80	; 0x50
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2230      	movs	r2, #48	; 0x30
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f005 ff6a 	bl	8007244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	4b28      	ldr	r3, [pc, #160]	; (8001428 <SystemClock_Config+0xcc>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <SystemClock_Config+0xcc>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <SystemClock_Config+0xcc>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <SystemClock_Config+0xd0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a21      	ldr	r2, [pc, #132]	; (800142c <SystemClock_Config+0xd0>)
 80013a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <SystemClock_Config+0xd0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013b8:	230a      	movs	r3, #10
 80013ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013bc:	2301      	movs	r3, #1
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c0:	2310      	movs	r3, #16
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	2302      	movs	r3, #2
 80013ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013d0:	2310      	movs	r3, #16
 80013d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80013d4:	23c0      	movs	r3, #192	; 0xc0
 80013d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d8:	2302      	movs	r3, #2
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013dc:	2304      	movs	r3, #4
 80013de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 0320 	add.w	r3, r7, #32
 80013e4:	4618      	mov	r0, r3
 80013e6:	f004 fa95 	bl	8005914 <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013f0:	f000 f922 	bl	8001638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	230f      	movs	r3, #15
 80013f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f8:	2302      	movs	r3, #2
 80013fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2103      	movs	r1, #3
 8001410:	4618      	mov	r0, r3
 8001412:	f004 fcf7 	bl	8005e04 <HAL_RCC_ClockConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800141c:	f000 f90c 	bl	8001638 <Error_Handler>
  }
}
 8001420:	bf00      	nop
 8001422:	3750      	adds	r7, #80	; 0x50
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800
 800142c:	40007000 	.word	0x40007000

08001430 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_I2C1_Init+0x50>)
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <MX_I2C1_Init+0x54>)
 8001438:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_I2C1_Init+0x50>)
 800143c:	4a12      	ldr	r2, [pc, #72]	; (8001488 <MX_I2C1_Init+0x58>)
 800143e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_I2C1_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_I2C1_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_I2C1_Init+0x50>)
 800144e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001452:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_I2C1_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_I2C1_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <MX_I2C1_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_I2C1_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_I2C1_Init+0x50>)
 800146e:	f001 fe19 	bl	80030a4 <HAL_I2C_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001478:	f000 f8de 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000204 	.word	0x20000204
 8001484:	40005400 	.word	0x40005400
 8001488:	000186a0 	.word	0x000186a0

0800148c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_RTC_Init+0x44>)
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <MX_RTC_Init+0x48>)
 8001494:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_RTC_Init+0x44>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_RTC_Init+0x44>)
 800149e:	227f      	movs	r2, #127	; 0x7f
 80014a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_RTC_Init+0x44>)
 80014a4:	22ff      	movs	r2, #255	; 0xff
 80014a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_RTC_Init+0x44>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_RTC_Init+0x44>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_RTC_Init+0x44>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_RTC_Init+0x44>)
 80014bc:	f004 ff72 	bl	80063a4 <HAL_RTC_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80014c6:	f000 f8b7 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000258 	.word	0x20000258
 80014d4:	40002800 	.word	0x40002800

080014d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_USART2_UART_Init+0x4c>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <MX_USART2_UART_Init+0x50>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_USART2_UART_Init+0x4c>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_USART2_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_USART2_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_USART2_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_USART2_UART_Init+0x4c>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_USART2_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_USART2_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_USART2_UART_Init+0x4c>)
 8001510:	f005 f842 	bl	8006598 <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800151a:	f000 f88d 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000278 	.word	0x20000278
 8001528:	40004400 	.word	0x40004400

0800152c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_DMA_Init+0x4c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <MX_DMA_Init+0x4c>)
 800153c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <MX_DMA_Init+0x4c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	2010      	movs	r0, #16
 8001554:	f001 f831 	bl	80025ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001558:	2010      	movs	r0, #16
 800155a:	f001 f84a 	bl	80025f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	2011      	movs	r0, #17
 8001564:	f001 f829 	bl	80025ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001568:	2011      	movs	r0, #17
 800156a:	f001 f842 	bl	80025f2 <HAL_NVIC_EnableIRQ>

}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <MX_GPIO_Init+0xb4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a25      	ldr	r2, [pc, #148]	; (8001630 <MX_GPIO_Init+0xb4>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b23      	ldr	r3, [pc, #140]	; (8001630 <MX_GPIO_Init+0xb4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <MX_GPIO_Init+0xb4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <MX_GPIO_Init+0xb4>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_GPIO_Init+0xb4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <MX_GPIO_Init+0xb4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <MX_GPIO_Init+0xb4>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <MX_GPIO_Init+0xb4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_GPIO_Init+0xb4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a10      	ldr	r2, [pc, #64]	; (8001630 <MX_GPIO_Init+0xb4>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_GPIO_Init+0xb4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2120      	movs	r1, #32
 8001606:	480b      	ldr	r0, [pc, #44]	; (8001634 <MX_GPIO_Init+0xb8>)
 8001608:	f001 fd32 	bl	8003070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800160c:	2320      	movs	r3, #32
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_GPIO_Init+0xb8>)
 8001624:	f001 fba0 	bl	8002d68 <HAL_GPIO_Init>

}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001640:	e7fe      	b.n	8001640 <Error_Handler+0x8>
	...

08001644 <HAL_I2C_MemRxCpltCallback>:
//{
//	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) string, length);

//}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001648:	b09c      	sub	sp, #112	; 0x70
 800164a:	af10      	add	r7, sp, #64	; 0x40
 800164c:	62f8      	str	r0, [r7, #44]	; 0x2c

	//ACCE LSM303AGR
	if(Call_Back_Flag == 0){
 800164e:	4b99      	ldr	r3, [pc, #612]	; (80018b4 <HAL_I2C_MemRxCpltCallback+0x270>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d155      	bne.n	8001702 <HAL_I2C_MemRxCpltCallback+0xbe>
		LSM303AGR_OUTX_ACCE_buf = (LSM303AGR_DATA_ACCE_buff[1] << 8) + LSM303AGR_DATA_ACCE_buff[0];
 8001656:	4b98      	ldr	r3, [pc, #608]	; (80018b8 <HAL_I2C_MemRxCpltCallback+0x274>)
 8001658:	785b      	ldrb	r3, [r3, #1]
 800165a:	b29b      	uxth	r3, r3
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b95      	ldr	r3, [pc, #596]	; (80018b8 <HAL_I2C_MemRxCpltCallback+0x274>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b29b      	uxth	r3, r3
 8001666:	4413      	add	r3, r2
 8001668:	b29b      	uxth	r3, r3
 800166a:	b21a      	sxth	r2, r3
 800166c:	4b93      	ldr	r3, [pc, #588]	; (80018bc <HAL_I2C_MemRxCpltCallback+0x278>)
 800166e:	801a      	strh	r2, [r3, #0]
		LSM303AGR_OUTY_ACCE_buf = (LSM303AGR_DATA_ACCE_buff[3] << 8) + LSM303AGR_DATA_ACCE_buff[2];
 8001670:	4b91      	ldr	r3, [pc, #580]	; (80018b8 <HAL_I2C_MemRxCpltCallback+0x274>)
 8001672:	78db      	ldrb	r3, [r3, #3]
 8001674:	b29b      	uxth	r3, r3
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <HAL_I2C_MemRxCpltCallback+0x274>)
 800167c:	789b      	ldrb	r3, [r3, #2]
 800167e:	b29b      	uxth	r3, r3
 8001680:	4413      	add	r3, r2
 8001682:	b29b      	uxth	r3, r3
 8001684:	b21a      	sxth	r2, r3
 8001686:	4b8e      	ldr	r3, [pc, #568]	; (80018c0 <HAL_I2C_MemRxCpltCallback+0x27c>)
 8001688:	801a      	strh	r2, [r3, #0]
		LSM303AGR_OUTZ_ACCE_buf = (LSM303AGR_DATA_ACCE_buff[5] << 8) + LSM303AGR_DATA_ACCE_buff[4];
 800168a:	4b8b      	ldr	r3, [pc, #556]	; (80018b8 <HAL_I2C_MemRxCpltCallback+0x274>)
 800168c:	795b      	ldrb	r3, [r3, #5]
 800168e:	b29b      	uxth	r3, r3
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <HAL_I2C_MemRxCpltCallback+0x274>)
 8001696:	791b      	ldrb	r3, [r3, #4]
 8001698:	b29b      	uxth	r3, r3
 800169a:	4413      	add	r3, r2
 800169c:	b29b      	uxth	r3, r3
 800169e:	b21a      	sxth	r2, r3
 80016a0:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <HAL_I2C_MemRxCpltCallback+0x280>)
 80016a2:	801a      	strh	r2, [r3, #0]
		LSM303AGR_OUTX_ACCE_in_g = scale_acce_8g(LSM303AGR_OUTX_ACCE_buf);
 80016a4:	4b85      	ldr	r3, [pc, #532]	; (80018bc <HAL_I2C_MemRxCpltCallback+0x278>)
 80016a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fb74 	bl	8001d98 <scale_acce_8g>
 80016b0:	eef0 7a40 	vmov.f32	s15, s0
 80016b4:	4b84      	ldr	r3, [pc, #528]	; (80018c8 <HAL_I2C_MemRxCpltCallback+0x284>)
 80016b6:	edc3 7a00 	vstr	s15, [r3]
		LSM303AGR_OUTY_ACCE_in_g = scale_acce_8g(LSM303AGR_OUTY_ACCE_buf);
 80016ba:	4b81      	ldr	r3, [pc, #516]	; (80018c0 <HAL_I2C_MemRxCpltCallback+0x27c>)
 80016bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 fb69 	bl	8001d98 <scale_acce_8g>
 80016c6:	eef0 7a40 	vmov.f32	s15, s0
 80016ca:	4b80      	ldr	r3, [pc, #512]	; (80018cc <HAL_I2C_MemRxCpltCallback+0x288>)
 80016cc:	edc3 7a00 	vstr	s15, [r3]
		LSM303AGR_OUTZ_ACCE_in_g = scale_acce_8g(LSM303AGR_OUTZ_ACCE_buf);
 80016d0:	4b7c      	ldr	r3, [pc, #496]	; (80018c4 <HAL_I2C_MemRxCpltCallback+0x280>)
 80016d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fb5e 	bl	8001d98 <scale_acce_8g>
 80016dc:	eef0 7a40 	vmov.f32	s15, s0
 80016e0:	4b7b      	ldr	r3, [pc, #492]	; (80018d0 <HAL_I2C_MemRxCpltCallback+0x28c>)
 80016e2:	edc3 7a00 	vstr	s15, [r3]
		Call_Back_Flag = 1;
 80016e6:	4b73      	ldr	r3, [pc, #460]	; (80018b4 <HAL_I2C_MemRxCpltCallback+0x270>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1, LSM6DSL_ADR, LSM6DSL_OUTX_L_XL, 1, LSM6DSL_DATA_ACCE_buff, 6);
 80016ec:	2306      	movs	r3, #6
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	4b78      	ldr	r3, [pc, #480]	; (80018d4 <HAL_I2C_MemRxCpltCallback+0x290>)
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	2228      	movs	r2, #40	; 0x28
 80016f8:	21d6      	movs	r1, #214	; 0xd6
 80016fa:	4877      	ldr	r0, [pc, #476]	; (80018d8 <HAL_I2C_MemRxCpltCallback+0x294>)
 80016fc:	f002 f936 	bl	800396c <HAL_I2C_Mem_Read_IT>
		}




}
 8001700:	e22a      	b.n	8001b58 <HAL_I2C_MemRxCpltCallback+0x514>
	else if(Call_Back_Flag == 1){
 8001702:	4b6c      	ldr	r3, [pc, #432]	; (80018b4 <HAL_I2C_MemRxCpltCallback+0x270>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d155      	bne.n	80017b6 <HAL_I2C_MemRxCpltCallback+0x172>
		LSM6DSL_OUTX_ACCE_buff = (LSM6DSL_DATA_ACCE_buff[1] << 8) + LSM6DSL_DATA_ACCE_buff[0];
 800170a:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <HAL_I2C_MemRxCpltCallback+0x290>)
 800170c:	785b      	ldrb	r3, [r3, #1]
 800170e:	b29b      	uxth	r3, r3
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <HAL_I2C_MemRxCpltCallback+0x290>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b29b      	uxth	r3, r3
 800171a:	4413      	add	r3, r2
 800171c:	b29b      	uxth	r3, r3
 800171e:	b21a      	sxth	r2, r3
 8001720:	4b6e      	ldr	r3, [pc, #440]	; (80018dc <HAL_I2C_MemRxCpltCallback+0x298>)
 8001722:	801a      	strh	r2, [r3, #0]
		LSM6DSL_OUTY_ACCE_buff = (LSM6DSL_DATA_ACCE_buff[3] << 8) + LSM6DSL_DATA_ACCE_buff[2];
 8001724:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <HAL_I2C_MemRxCpltCallback+0x290>)
 8001726:	78db      	ldrb	r3, [r3, #3]
 8001728:	b29b      	uxth	r3, r3
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	b29a      	uxth	r2, r3
 800172e:	4b69      	ldr	r3, [pc, #420]	; (80018d4 <HAL_I2C_MemRxCpltCallback+0x290>)
 8001730:	789b      	ldrb	r3, [r3, #2]
 8001732:	b29b      	uxth	r3, r3
 8001734:	4413      	add	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	b21a      	sxth	r2, r3
 800173a:	4b69      	ldr	r3, [pc, #420]	; (80018e0 <HAL_I2C_MemRxCpltCallback+0x29c>)
 800173c:	801a      	strh	r2, [r3, #0]
		LSM6DSL_OUTZ_ACCE_buff = (LSM6DSL_DATA_ACCE_buff[5] << 8) + LSM6DSL_DATA_ACCE_buff[4];
 800173e:	4b65      	ldr	r3, [pc, #404]	; (80018d4 <HAL_I2C_MemRxCpltCallback+0x290>)
 8001740:	795b      	ldrb	r3, [r3, #5]
 8001742:	b29b      	uxth	r3, r3
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b62      	ldr	r3, [pc, #392]	; (80018d4 <HAL_I2C_MemRxCpltCallback+0x290>)
 800174a:	791b      	ldrb	r3, [r3, #4]
 800174c:	b29b      	uxth	r3, r3
 800174e:	4413      	add	r3, r2
 8001750:	b29b      	uxth	r3, r3
 8001752:	b21a      	sxth	r2, r3
 8001754:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <HAL_I2C_MemRxCpltCallback+0x2a0>)
 8001756:	801a      	strh	r2, [r3, #0]
		LSM6DSL_OUTX_ACCE_in_g = scale_acce_8g(LSM6DSL_OUTX_ACCE_buff);
 8001758:	4b60      	ldr	r3, [pc, #384]	; (80018dc <HAL_I2C_MemRxCpltCallback+0x298>)
 800175a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fb1a 	bl	8001d98 <scale_acce_8g>
 8001764:	eef0 7a40 	vmov.f32	s15, s0
 8001768:	4b5f      	ldr	r3, [pc, #380]	; (80018e8 <HAL_I2C_MemRxCpltCallback+0x2a4>)
 800176a:	edc3 7a00 	vstr	s15, [r3]
		LSM6DSL_OUTY_ACCE_in_g = scale_acce_8g(LSM6DSL_OUTY_ACCE_buff);
 800176e:	4b5c      	ldr	r3, [pc, #368]	; (80018e0 <HAL_I2C_MemRxCpltCallback+0x29c>)
 8001770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fb0f 	bl	8001d98 <scale_acce_8g>
 800177a:	eef0 7a40 	vmov.f32	s15, s0
 800177e:	4b5b      	ldr	r3, [pc, #364]	; (80018ec <HAL_I2C_MemRxCpltCallback+0x2a8>)
 8001780:	edc3 7a00 	vstr	s15, [r3]
		LSM6DSL_OUTZ_ACCE_in_g = scale_acce_8g(LSM6DSL_OUTZ_ACCE_buff);
 8001784:	4b57      	ldr	r3, [pc, #348]	; (80018e4 <HAL_I2C_MemRxCpltCallback+0x2a0>)
 8001786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fb04 	bl	8001d98 <scale_acce_8g>
 8001790:	eef0 7a40 	vmov.f32	s15, s0
 8001794:	4b56      	ldr	r3, [pc, #344]	; (80018f0 <HAL_I2C_MemRxCpltCallback+0x2ac>)
 8001796:	edc3 7a00 	vstr	s15, [r3]
		Call_Back_Flag = 2;
 800179a:	4b46      	ldr	r3, [pc, #280]	; (80018b4 <HAL_I2C_MemRxCpltCallback+0x270>)
 800179c:	2202      	movs	r2, #2
 800179e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1, LPS22HB_ADR, LPS22HB_PRESS_OUT_XL, 1, LPS22HB_DATA_buff, 5);
 80017a0:	2305      	movs	r3, #5
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2301      	movs	r3, #1
 80017aa:	2228      	movs	r2, #40	; 0x28
 80017ac:	21ba      	movs	r1, #186	; 0xba
 80017ae:	484a      	ldr	r0, [pc, #296]	; (80018d8 <HAL_I2C_MemRxCpltCallback+0x294>)
 80017b0:	f002 f8dc 	bl	800396c <HAL_I2C_Mem_Read_IT>
}
 80017b4:	e1d0      	b.n	8001b58 <HAL_I2C_MemRxCpltCallback+0x514>
	else if(Call_Back_Flag == 2){
 80017b6:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <HAL_I2C_MemRxCpltCallback+0x270>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d142      	bne.n	8001844 <HAL_I2C_MemRxCpltCallback+0x200>
		LPS22HB_TEMP_DATA =  (LPS22HB_DATA_buff[4] << 8) + LPS22HB_DATA_buff[3] ;
 80017be:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 80017c0:	791b      	ldrb	r3, [r3, #4]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 80017ca:	78db      	ldrb	r3, [r3, #3]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <HAL_I2C_MemRxCpltCallback+0x2b4>)
 80017d6:	801a      	strh	r2, [r3, #0]
		LPS22HB_TEMP_DATA_IN_C = ((float)LPS22HB_TEMP_DATA/100);
 80017d8:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_I2C_MemRxCpltCallback+0x2b4>)
 80017da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e6:	eddf 6a45 	vldr	s13, [pc, #276]	; 80018fc <HAL_I2C_MemRxCpltCallback+0x2b8>
 80017ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ee:	4b44      	ldr	r3, [pc, #272]	; (8001900 <HAL_I2C_MemRxCpltCallback+0x2bc>)
 80017f0:	edc3 7a00 	vstr	s15, [r3]
		LPS22HB_OUT_PRESS_DATA = ((LPS22HB_DATA_buff[2] << 16) + (LPS22HB_DATA_buff[1] << 8) + LPS22HB_DATA_buff[0]);
 80017f4:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 80017f6:	789b      	ldrb	r3, [r3, #2]
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 80017fc:	785b      	ldrb	r3, [r3, #1]
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	4413      	add	r3, r2
 8001802:	4a3c      	ldr	r2, [pc, #240]	; (80018f4 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 8001804:	7812      	ldrb	r2, [r2, #0]
 8001806:	4413      	add	r3, r2
 8001808:	461a      	mov	r2, r3
 800180a:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <HAL_I2C_MemRxCpltCallback+0x2c0>)
 800180c:	601a      	str	r2, [r3, #0]
		LPS22HB_OUT_PRESS_DATA_IN_HPA = ((float) LPS22HB_OUT_PRESS_DATA / 4096);
 800180e:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <HAL_I2C_MemRxCpltCallback+0x2c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800181a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001908 <HAL_I2C_MemRxCpltCallback+0x2c4>
 800181e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001822:	4b3a      	ldr	r3, [pc, #232]	; (800190c <HAL_I2C_MemRxCpltCallback+0x2c8>)
 8001824:	edc3 7a00 	vstr	s15, [r3]
		Call_Back_Flag = 3;
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <HAL_I2C_MemRxCpltCallback+0x270>)
 800182a:	2203      	movs	r2, #3
 800182c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1, HTS221_ADR, HTS221_TEMP_OUT_L, 1, HTS221_DATA_buff, 2);
 800182e:	2302      	movs	r3, #2
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	4b37      	ldr	r3, [pc, #220]	; (8001910 <HAL_I2C_MemRxCpltCallback+0x2cc>)
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2301      	movs	r3, #1
 8001838:	22aa      	movs	r2, #170	; 0xaa
 800183a:	21be      	movs	r1, #190	; 0xbe
 800183c:	4826      	ldr	r0, [pc, #152]	; (80018d8 <HAL_I2C_MemRxCpltCallback+0x294>)
 800183e:	f002 f895 	bl	800396c <HAL_I2C_Mem_Read_IT>
}
 8001842:	e189      	b.n	8001b58 <HAL_I2C_MemRxCpltCallback+0x514>
	else if(Call_Back_Flag == 3){
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_I2C_MemRxCpltCallback+0x270>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d16f      	bne.n	800192c <HAL_I2C_MemRxCpltCallback+0x2e8>
		HTS221_TEMP_DATA = ((HTS221_DATA_buff[1] << 8) + HTS221_DATA_buff[0]);
 800184c:	4b30      	ldr	r3, [pc, #192]	; (8001910 <HAL_I2C_MemRxCpltCallback+0x2cc>)
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	b29b      	uxth	r3, r3
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	b29a      	uxth	r2, r3
 8001856:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <HAL_I2C_MemRxCpltCallback+0x2cc>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4413      	add	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <HAL_I2C_MemRxCpltCallback+0x2d0>)
 8001864:	801a      	strh	r2, [r3, #0]
		HTS221_TEMP_DATA_IN_C = hts221_compute_temp(HTS221_TEMP_DATA, HTTS221_T0_OUT, HTTS221_T1_OUT, HTTS221_T0_degC, HTTS221_T1_degC);
 8001866:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <HAL_I2C_MemRxCpltCallback+0x2d0>)
 8001868:	f9b3 0000 	ldrsh.w	r0, [r3]
 800186c:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <HAL_I2C_MemRxCpltCallback+0x2d4>)
 800186e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001872:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_I2C_MemRxCpltCallback+0x2d8>)
 8001874:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <HAL_I2C_MemRxCpltCallback+0x2dc>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b21c      	sxth	r4, r3
 800187e:	4b29      	ldr	r3, [pc, #164]	; (8001924 <HAL_I2C_MemRxCpltCallback+0x2e0>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b21b      	sxth	r3, r3
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	4623      	mov	r3, r4
 8001888:	f000 f9a6 	bl	8001bd8 <hts221_compute_temp>
 800188c:	eef0 7a40 	vmov.f32	s15, s0
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <HAL_I2C_MemRxCpltCallback+0x2e4>)
 8001892:	edc3 7a00 	vstr	s15, [r3]
		Call_Back_Flag = 4;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_I2C_MemRxCpltCallback+0x270>)
 8001898:	2204      	movs	r2, #4
 800189a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_OUT_TEMP_L_A, 1, LSM303AGR_DATA_ACCE_buff, 2);
 800189c:	2302      	movs	r3, #2
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_I2C_MemRxCpltCallback+0x274>)
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2301      	movs	r3, #1
 80018a6:	228c      	movs	r2, #140	; 0x8c
 80018a8:	2132      	movs	r1, #50	; 0x32
 80018aa:	480b      	ldr	r0, [pc, #44]	; (80018d8 <HAL_I2C_MemRxCpltCallback+0x294>)
 80018ac:	f002 f85e 	bl	800396c <HAL_I2C_Mem_Read_IT>
}
 80018b0:	e152      	b.n	8001b58 <HAL_I2C_MemRxCpltCallback+0x514>
 80018b2:	bf00      	nop
 80018b4:	20000405 	.word	0x20000405
 80018b8:	20000398 	.word	0x20000398
 80018bc:	20000406 	.word	0x20000406
 80018c0:	20000408 	.word	0x20000408
 80018c4:	2000040a 	.word	0x2000040a
 80018c8:	2000040c 	.word	0x2000040c
 80018cc:	20000410 	.word	0x20000410
 80018d0:	20000414 	.word	0x20000414
 80018d4:	20000420 	.word	0x20000420
 80018d8:	20000204 	.word	0x20000204
 80018dc:	20000426 	.word	0x20000426
 80018e0:	20000428 	.word	0x20000428
 80018e4:	2000042a 	.word	0x2000042a
 80018e8:	2000042c 	.word	0x2000042c
 80018ec:	20000430 	.word	0x20000430
 80018f0:	20000434 	.word	0x20000434
 80018f4:	20000450 	.word	0x20000450
 80018f8:	2000045c 	.word	0x2000045c
 80018fc:	42c80000 	.word	0x42c80000
 8001900:	20000460 	.word	0x20000460
 8001904:	20000458 	.word	0x20000458
 8001908:	45800000 	.word	0x45800000
 800190c:	20000464 	.word	0x20000464
 8001910:	20000468 	.word	0x20000468
 8001914:	2000046e 	.word	0x2000046e
 8001918:	20000388 	.word	0x20000388
 800191c:	2000038a 	.word	0x2000038a
 8001920:	20000384 	.word	0x20000384
 8001924:	20000385 	.word	0x20000385
 8001928:	20000470 	.word	0x20000470
	else if(Call_Back_Flag == 4){
 800192c:	4b8d      	ldr	r3, [pc, #564]	; (8001b64 <HAL_I2C_MemRxCpltCallback+0x520>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b04      	cmp	r3, #4
 8001932:	d125      	bne.n	8001980 <HAL_I2C_MemRxCpltCallback+0x33c>
		LSM303AGR_OUT_TEMP_data = (LSM303AGR_DATA_ACCE_buff[1] << 8) + LSM303AGR_DATA_ACCE_buff[0];
 8001934:	4b8c      	ldr	r3, [pc, #560]	; (8001b68 <HAL_I2C_MemRxCpltCallback+0x524>)
 8001936:	785b      	ldrb	r3, [r3, #1]
 8001938:	b29b      	uxth	r3, r3
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b8a      	ldr	r3, [pc, #552]	; (8001b68 <HAL_I2C_MemRxCpltCallback+0x524>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4413      	add	r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	b21a      	sxth	r2, r3
 800194a:	4b88      	ldr	r3, [pc, #544]	; (8001b6c <HAL_I2C_MemRxCpltCallback+0x528>)
 800194c:	801a      	strh	r2, [r3, #0]
		LSM303AGR_OUT_TEMP_IN_C = lsm303agr_from_lsb_nm_to_celsius(LSM303AGR_OUT_TEMP_data);
 800194e:	4b87      	ldr	r3, [pc, #540]	; (8001b6c <HAL_I2C_MemRxCpltCallback+0x528>)
 8001950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f9ff 	bl	8001d58 <lsm303agr_from_lsb_nm_to_celsius>
 800195a:	eef0 7a40 	vmov.f32	s15, s0
 800195e:	4b84      	ldr	r3, [pc, #528]	; (8001b70 <HAL_I2C_MemRxCpltCallback+0x52c>)
 8001960:	edc3 7a00 	vstr	s15, [r3]
		Call_Back_Flag = 5;
 8001964:	4b7f      	ldr	r3, [pc, #508]	; (8001b64 <HAL_I2C_MemRxCpltCallback+0x520>)
 8001966:	2205      	movs	r2, #5
 8001968:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1, LSM6DSL_ADR, LSM6DSL_OUTX_L_G, 1, LSM6DSL_DATA_GYRRO_buff, 6);
 800196a:	2306      	movs	r3, #6
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	4b81      	ldr	r3, [pc, #516]	; (8001b74 <HAL_I2C_MemRxCpltCallback+0x530>)
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	2222      	movs	r2, #34	; 0x22
 8001976:	21d6      	movs	r1, #214	; 0xd6
 8001978:	487f      	ldr	r0, [pc, #508]	; (8001b78 <HAL_I2C_MemRxCpltCallback+0x534>)
 800197a:	f001 fff7 	bl	800396c <HAL_I2C_Mem_Read_IT>
}
 800197e:	e0eb      	b.n	8001b58 <HAL_I2C_MemRxCpltCallback+0x514>
	else if(Call_Back_Flag == 5){
 8001980:	4b78      	ldr	r3, [pc, #480]	; (8001b64 <HAL_I2C_MemRxCpltCallback+0x520>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b05      	cmp	r3, #5
 8001986:	d155      	bne.n	8001a34 <HAL_I2C_MemRxCpltCallback+0x3f0>
		LSM6DSL_OUTX_GYRRO_buff = (LSM6DSL_DATA_GYRRO_buff[1] << 8) + LSM6DSL_DATA_GYRRO_buff[0];
 8001988:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <HAL_I2C_MemRxCpltCallback+0x530>)
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	b29b      	uxth	r3, r3
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	b29a      	uxth	r2, r3
 8001992:	4b78      	ldr	r3, [pc, #480]	; (8001b74 <HAL_I2C_MemRxCpltCallback+0x530>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	4413      	add	r3, r2
 800199a:	b29b      	uxth	r3, r3
 800199c:	b21a      	sxth	r2, r3
 800199e:	4b77      	ldr	r3, [pc, #476]	; (8001b7c <HAL_I2C_MemRxCpltCallback+0x538>)
 80019a0:	801a      	strh	r2, [r3, #0]
		LSM6DSL_OUTY_GYRRO_buff = (LSM6DSL_DATA_GYRRO_buff[3] << 8) + LSM6DSL_DATA_GYRRO_buff[2];
 80019a2:	4b74      	ldr	r3, [pc, #464]	; (8001b74 <HAL_I2C_MemRxCpltCallback+0x530>)
 80019a4:	78db      	ldrb	r3, [r3, #3]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b71      	ldr	r3, [pc, #452]	; (8001b74 <HAL_I2C_MemRxCpltCallback+0x530>)
 80019ae:	789b      	ldrb	r3, [r3, #2]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <HAL_I2C_MemRxCpltCallback+0x53c>)
 80019ba:	801a      	strh	r2, [r3, #0]
		LSM6DSL_OUTZ_GYRRO_buff = (LSM6DSL_DATA_GYRRO_buff[5] << 8) + LSM6DSL_DATA_GYRRO_buff[4];
 80019bc:	4b6d      	ldr	r3, [pc, #436]	; (8001b74 <HAL_I2C_MemRxCpltCallback+0x530>)
 80019be:	795b      	ldrb	r3, [r3, #5]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	4b6b      	ldr	r3, [pc, #428]	; (8001b74 <HAL_I2C_MemRxCpltCallback+0x530>)
 80019c8:	791b      	ldrb	r3, [r3, #4]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	4b6c      	ldr	r3, [pc, #432]	; (8001b84 <HAL_I2C_MemRxCpltCallback+0x540>)
 80019d4:	801a      	strh	r2, [r3, #0]
		LSM6DSL_OUTX_GYRRO_in_ = scale_acce_8g(LSM6DSL_OUTX_GYRRO_buff);
 80019d6:	4b69      	ldr	r3, [pc, #420]	; (8001b7c <HAL_I2C_MemRxCpltCallback+0x538>)
 80019d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 f9db 	bl	8001d98 <scale_acce_8g>
 80019e2:	eef0 7a40 	vmov.f32	s15, s0
 80019e6:	4b68      	ldr	r3, [pc, #416]	; (8001b88 <HAL_I2C_MemRxCpltCallback+0x544>)
 80019e8:	edc3 7a00 	vstr	s15, [r3]
		LSM6DSL_OUTY_GYRRO_in_ = scale_acce_8g(LSM6DSL_OUTY_GYRRO_buff);
 80019ec:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <HAL_I2C_MemRxCpltCallback+0x53c>)
 80019ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f9d0 	bl	8001d98 <scale_acce_8g>
 80019f8:	eef0 7a40 	vmov.f32	s15, s0
 80019fc:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <HAL_I2C_MemRxCpltCallback+0x548>)
 80019fe:	edc3 7a00 	vstr	s15, [r3]
		LSM6DSL_OUTZ_GYRRO_in_ = scale_acce_8g(LSM6DSL_OUTZ_GYRRO_buff);
 8001a02:	4b60      	ldr	r3, [pc, #384]	; (8001b84 <HAL_I2C_MemRxCpltCallback+0x540>)
 8001a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f9c5 	bl	8001d98 <scale_acce_8g>
 8001a0e:	eef0 7a40 	vmov.f32	s15, s0
 8001a12:	4b5f      	ldr	r3, [pc, #380]	; (8001b90 <HAL_I2C_MemRxCpltCallback+0x54c>)
 8001a14:	edc3 7a00 	vstr	s15, [r3]
		Call_Back_Flag = 6;
 8001a18:	4b52      	ldr	r3, [pc, #328]	; (8001b64 <HAL_I2C_MemRxCpltCallback+0x520>)
 8001a1a:	2206      	movs	r2, #6
 8001a1c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1, HTS221_ADR, HTS221_HUMIDITY_OUT_L, 1, HTS221_DATA_buff, 2);
 8001a1e:	2302      	movs	r3, #2
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HAL_I2C_MemRxCpltCallback+0x550>)
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	22a8      	movs	r2, #168	; 0xa8
 8001a2a:	21be      	movs	r1, #190	; 0xbe
 8001a2c:	4852      	ldr	r0, [pc, #328]	; (8001b78 <HAL_I2C_MemRxCpltCallback+0x534>)
 8001a2e:	f001 ff9d 	bl	800396c <HAL_I2C_Mem_Read_IT>
}
 8001a32:	e091      	b.n	8001b58 <HAL_I2C_MemRxCpltCallback+0x514>
	else if(Call_Back_Flag == 6){
 8001a34:	4b4b      	ldr	r3, [pc, #300]	; (8001b64 <HAL_I2C_MemRxCpltCallback+0x520>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b06      	cmp	r3, #6
 8001a3a:	f040 808d 	bne.w	8001b58 <HAL_I2C_MemRxCpltCallback+0x514>
		HTS221_HUMI_DATA= ((HTS221_DATA_buff[1] << 8) + HTS221_DATA_buff[0]);
 8001a3e:	4b55      	ldr	r3, [pc, #340]	; (8001b94 <HAL_I2C_MemRxCpltCallback+0x550>)
 8001a40:	785b      	ldrb	r3, [r3, #1]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	4b52      	ldr	r3, [pc, #328]	; (8001b94 <HAL_I2C_MemRxCpltCallback+0x550>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <HAL_I2C_MemRxCpltCallback+0x554>)
 8001a56:	801a      	strh	r2, [r3, #0]
		HTS221_HUMI_DATA_IN_PER = hts221_compute_hummidity(HTS221_HUMI_DATA, HTTS221_H0_rH_x2, HTTS221_H1_rH_x2,  HTTS221_H0_T0_OUT, HTTS221_H1_T0_OUT);
 8001a58:	4b4f      	ldr	r3, [pc, #316]	; (8001b98 <HAL_I2C_MemRxCpltCallback+0x554>)
 8001a5a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001a5e:	4b4f      	ldr	r3, [pc, #316]	; (8001b9c <HAL_I2C_MemRxCpltCallback+0x558>)
 8001a60:	7819      	ldrb	r1, [r3, #0]
 8001a62:	4b4f      	ldr	r3, [pc, #316]	; (8001ba0 <HAL_I2C_MemRxCpltCallback+0x55c>)
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <HAL_I2C_MemRxCpltCallback+0x560>)
 8001a68:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001a6c:	4b4e      	ldr	r3, [pc, #312]	; (8001ba8 <HAL_I2C_MemRxCpltCallback+0x564>)
 8001a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	4623      	mov	r3, r4
 8001a76:	f000 f909 	bl	8001c8c <hts221_compute_hummidity>
 8001a7a:	eef0 7a40 	vmov.f32	s15, s0
 8001a7e:	4b4b      	ldr	r3, [pc, #300]	; (8001bac <HAL_I2C_MemRxCpltCallback+0x568>)
 8001a80:	edc3 7a00 	vstr	s15, [r3]
		sprintf((char*) UART_BUFFOR, "FFF%.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f\n\r",LSM6DSL_OUTX_ACCE_in_g, LSM6DSL_OUTY_ACCE_in_g, LSM6DSL_OUTZ_ACCE_in_g, LSM303AGR_OUTX_ACCE_in_g, LSM303AGR_OUTY_ACCE_in_g, LSM303AGR_OUTZ_ACCE_in_g, LPS22HB_OUT_PRESS_DATA_IN_HPA, LPS22HB_TEMP_DATA_IN_C, HTS221_HUMI_DATA_IN_PER);
 8001a84:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_I2C_MemRxCpltCallback+0x56c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd65 	bl	8000558 <__aeabi_f2d>
 8001a8e:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001a92:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <HAL_I2C_MemRxCpltCallback+0x570>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fd5e 	bl	8000558 <__aeabi_f2d>
 8001a9c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001aa0:	4b45      	ldr	r3, [pc, #276]	; (8001bb8 <HAL_I2C_MemRxCpltCallback+0x574>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd57 	bl	8000558 <__aeabi_f2d>
 8001aaa:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001aae:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <HAL_I2C_MemRxCpltCallback+0x578>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd50 	bl	8000558 <__aeabi_f2d>
 8001ab8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001abc:	4b40      	ldr	r3, [pc, #256]	; (8001bc0 <HAL_I2C_MemRxCpltCallback+0x57c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd49 	bl	8000558 <__aeabi_f2d>
 8001ac6:	e9c7 0100 	strd	r0, r1, [r7]
 8001aca:	4b3e      	ldr	r3, [pc, #248]	; (8001bc4 <HAL_I2C_MemRxCpltCallback+0x580>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd42 	bl	8000558 <__aeabi_f2d>
 8001ad4:	4682      	mov	sl, r0
 8001ad6:	468b      	mov	fp, r1
 8001ad8:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_I2C_MemRxCpltCallback+0x584>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fd3b 	bl	8000558 <__aeabi_f2d>
 8001ae2:	4680      	mov	r8, r0
 8001ae4:	4689      	mov	r9, r1
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_I2C_MemRxCpltCallback+0x588>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd34 	bl	8000558 <__aeabi_f2d>
 8001af0:	4604      	mov	r4, r0
 8001af2:	460d      	mov	r5, r1
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <HAL_I2C_MemRxCpltCallback+0x568>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2d 	bl	8000558 <__aeabi_f2d>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001b06:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8001b0a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8001b0e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001b12:	ed97 7b00 	vldr	d7, [r7]
 8001b16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001b1a:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b1e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001b22:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b26:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001b2a:	ed97 7b06 	vldr	d7, [r7, #24]
 8001b2e:	ed8d 7b00 	vstr	d7, [sp]
 8001b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b36:	4926      	ldr	r1, [pc, #152]	; (8001bd0 <HAL_I2C_MemRxCpltCallback+0x58c>)
 8001b38:	4826      	ldr	r0, [pc, #152]	; (8001bd4 <HAL_I2C_MemRxCpltCallback+0x590>)
 8001b3a:	f006 fa0b 	bl	8007f54 <siprintf>
		Call_Back_Flag = 0;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_I2C_MemRxCpltCallback+0x520>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1, LSM303AGR_ADR_ACCE, LSM303AGR_OUT_X_L_A, 1, LSM303AGR_DATA_ACCE_buff, 6);
 8001b44:	2306      	movs	r3, #6
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_I2C_MemRxCpltCallback+0x524>)
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	22a8      	movs	r2, #168	; 0xa8
 8001b50:	2132      	movs	r1, #50	; 0x32
 8001b52:	4809      	ldr	r0, [pc, #36]	; (8001b78 <HAL_I2C_MemRxCpltCallback+0x534>)
 8001b54:	f001 ff0a 	bl	800396c <HAL_I2C_Mem_Read_IT>
}
 8001b58:	bf00      	nop
 8001b5a:	3730      	adds	r7, #48	; 0x30
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b62:	bf00      	nop
 8001b64:	20000405 	.word	0x20000405
 8001b68:	20000398 	.word	0x20000398
 8001b6c:	20000418 	.word	0x20000418
 8001b70:	2000041c 	.word	0x2000041c
 8001b74:	20000438 	.word	0x20000438
 8001b78:	20000204 	.word	0x20000204
 8001b7c:	2000043e 	.word	0x2000043e
 8001b80:	20000440 	.word	0x20000440
 8001b84:	20000442 	.word	0x20000442
 8001b88:	20000444 	.word	0x20000444
 8001b8c:	20000448 	.word	0x20000448
 8001b90:	2000044c 	.word	0x2000044c
 8001b94:	20000468 	.word	0x20000468
 8001b98:	2000046c 	.word	0x2000046c
 8001b9c:	2000038c 	.word	0x2000038c
 8001ba0:	2000038d 	.word	0x2000038d
 8001ba4:	2000038e 	.word	0x2000038e
 8001ba8:	20000390 	.word	0x20000390
 8001bac:	20000474 	.word	0x20000474
 8001bb0:	2000042c 	.word	0x2000042c
 8001bb4:	20000430 	.word	0x20000430
 8001bb8:	20000434 	.word	0x20000434
 8001bbc:	2000040c 	.word	0x2000040c
 8001bc0:	20000410 	.word	0x20000410
 8001bc4:	20000414 	.word	0x20000414
 8001bc8:	20000464 	.word	0x20000464
 8001bcc:	20000460 	.word	0x20000460
 8001bd0:	0800bb50 	.word	0x0800bb50
 8001bd4:	200003a0 	.word	0x200003a0

08001bd8 <hts221_compute_temp>:



float_t hts221_compute_temp(int16_t T_OUT, int16_t T0_OUT, int16_t T1_OUT, int16_t T0_degC, int16_t T1_degC)
{
 8001bd8:	b490      	push	{r4, r7}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4604      	mov	r4, r0
 8001be0:	4608      	mov	r0, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	4623      	mov	r3, r4
 8001be8:	80fb      	strh	r3, [r7, #6]
 8001bea:	4603      	mov	r3, r0
 8001bec:	80bb      	strh	r3, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	807b      	strh	r3, [r7, #2]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	803b      	strh	r3, [r7, #0]

	float_t val1 = 0, val2 = 0, val3 = 0, val_total = 0;
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
	val1 = (float_t) ( T1_degC - T0_degC );
 8001c0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001c12:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c20:	edc7 7a05 	vstr	s15, [r7, #20]
	val2 = (float_t) ( T_OUT - T0_OUT );
 8001c24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c36:	edc7 7a04 	vstr	s15, [r7, #16]
	val3 = (float_t) ( T1_OUT - T0_OUT );
 8001c3a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4c:	edc7 7a03 	vstr	s15, [r7, #12]
	val_total = ((val1 * val2) / (val3)) + T0_degC;
 8001c50:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c58:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c74:	edc7 7a02 	vstr	s15, [r7, #8]

	return val_total;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	ee07 3a90 	vmov	s15, r3

}
 8001c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc90      	pop	{r4, r7}
 8001c88:	4770      	bx	lr
	...

08001c8c <hts221_compute_hummidity>:

float_t hts221_compute_hummidity(int16_t H_T_OUT, uint8_t H0_rH, uint8_t H1_rH, int16_t H0_T0_OUT, int16_t H1_T0_OUT)
{
 8001c8c:	b490      	push	{r4, r7}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4604      	mov	r4, r0
 8001c94:	4608      	mov	r0, r1
 8001c96:	4611      	mov	r1, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	80fb      	strh	r3, [r7, #6]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	717b      	strb	r3, [r7, #5]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	713b      	strb	r3, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	807b      	strh	r3, [r7, #2]
	float_t val1 = 0, val2 = 0, val3 = 0, val_total = 0;
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
	val1 = (float_t) (H1_rH - H0_rH);
 8001cc2:	793a      	ldrb	r2, [r7, #4]
 8001cc4:	797b      	ldrb	r3, [r7, #5]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	ee07 3a90 	vmov	s15, r3
 8001ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd0:	edc7 7a04 	vstr	s15, [r7, #16]
	val2 = (float_t) (H_T_OUT - H0_T0_OUT);
 8001cd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce6:	edc7 7a03 	vstr	s15, [r7, #12]
	val3 = (float_t) (H1_T0_OUT - H0_T0_OUT);
 8001cea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001cee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfc:	edc7 7a02 	vstr	s15, [r7, #8]
	val_total = ((val1 * val2) / (val3)) + H0_rH;
 8001d00:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d08:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d14:	797b      	ldrb	r3, [r7, #5]
 8001d16:	ee07 3a90 	vmov	s15, r3
 8001d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d22:	edc7 7a05 	vstr	s15, [r7, #20]
	if(val_total >= 100.00) val_total = 100.00;
 8001d26:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d2a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001d50 <hts221_compute_hummidity+0xc4>
 8001d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	db01      	blt.n	8001d3c <hts221_compute_hummidity+0xb0>
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <hts221_compute_hummidity+0xc8>)
 8001d3a:	617b      	str	r3, [r7, #20]

	return val_total;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	ee07 3a90 	vmov	s15, r3

}
 8001d42:	eeb0 0a67 	vmov.f32	s0, s15
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc90      	pop	{r4, r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	42c80000 	.word	0x42c80000
 8001d54:	42c80000 	.word	0x42c80000

08001d58 <lsm303agr_from_lsb_nm_to_celsius>:

float_t lsm303agr_from_lsb_nm_to_celsius(int16_t lsb)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]
	return ( ( (float_t)lsb / 64.0f ) / 4.0f ) + 25.0f;
 8001d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001d94 <lsm303agr_from_lsb_nm_to_celsius+0x3c>
 8001d72:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d76:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d7e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001d82:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001d86:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	42800000 	.word	0x42800000

08001d98 <scale_acce_8g>:

float_t scale_acce_8g(int16_t data)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	80fb      	strh	r3, [r7, #6]
	return ((float_t) data * (float_t) 8)/ (float_t) 32768;
 8001da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dae:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001dd0 <scale_acce_8g+0x38>
 8001dba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dbe:	eef0 7a66 	vmov.f32	s15, s13
}
 8001dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	47000000 	.word	0x47000000

08001dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_MspInit+0x4c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <HAL_MspInit+0x4c>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_MspInit+0x4c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_MspInit+0x4c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_MspInit+0x4c>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_MspInit+0x4c>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <HAL_I2C_MspInit+0x94>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d134      	bne.n	8001eb0 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <HAL_I2C_MspInit+0x98>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <HAL_I2C_MspInit+0x98>)
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_I2C_MspInit+0x98>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e68:	2312      	movs	r3, #18
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e74:	2304      	movs	r3, #4
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4810      	ldr	r0, [pc, #64]	; (8001ec0 <HAL_I2C_MspInit+0x9c>)
 8001e80:	f000 ff72 	bl	8002d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_I2C_MspInit+0x98>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <HAL_I2C_MspInit+0x98>)
 8001e8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_I2C_MspInit+0x98>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	201f      	movs	r0, #31
 8001ea6:	f000 fb88 	bl	80025ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001eaa:	201f      	movs	r0, #31
 8001eac:	f000 fba1 	bl	80025f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	; 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40005400 	.word	0x40005400
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020400 	.word	0x40020400

08001ec4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ecc:	f107 0308 	add.w	r3, r7, #8
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
 8001edc:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <HAL_RTC_MspInit+0x50>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d111      	bne.n	8001f0c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f004 f964 	bl	80061c4 <HAL_RCCEx_PeriphCLKConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001f02:	f7ff fb99 	bl	8001638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <HAL_RTC_MspInit+0x54>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40002800 	.word	0x40002800
 8001f18:	42470e3c 	.word	0x42470e3c

08001f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a48      	ldr	r2, [pc, #288]	; (800205c <HAL_UART_MspInit+0x140>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	f040 808a 	bne.w	8002054 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	4b46      	ldr	r3, [pc, #280]	; (8002060 <HAL_UART_MspInit+0x144>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	4a45      	ldr	r2, [pc, #276]	; (8002060 <HAL_UART_MspInit+0x144>)
 8001f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f50:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_UART_MspInit+0x144>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	4b3f      	ldr	r3, [pc, #252]	; (8002060 <HAL_UART_MspInit+0x144>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	4a3e      	ldr	r2, [pc, #248]	; (8002060 <HAL_UART_MspInit+0x144>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6c:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <HAL_UART_MspInit+0x144>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f78:	230c      	movs	r3, #12
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	4834      	ldr	r0, [pc, #208]	; (8002064 <HAL_UART_MspInit+0x148>)
 8001f94:	f000 fee8 	bl	8002d68 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001f98:	4b33      	ldr	r3, [pc, #204]	; (8002068 <HAL_UART_MspInit+0x14c>)
 8001f9a:	4a34      	ldr	r2, [pc, #208]	; (800206c <HAL_UART_MspInit+0x150>)
 8001f9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001f9e:	4b32      	ldr	r3, [pc, #200]	; (8002068 <HAL_UART_MspInit+0x14c>)
 8001fa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fa4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <HAL_UART_MspInit+0x14c>)
 8001fa8:	2240      	movs	r2, #64	; 0x40
 8001faa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fac:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <HAL_UART_MspInit+0x14c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_UART_MspInit+0x14c>)
 8001fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fba:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <HAL_UART_MspInit+0x14c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc0:	4b29      	ldr	r3, [pc, #164]	; (8002068 <HAL_UART_MspInit+0x14c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001fc6:	4b28      	ldr	r3, [pc, #160]	; (8002068 <HAL_UART_MspInit+0x14c>)
 8001fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fcc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_UART_MspInit+0x14c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_UART_MspInit+0x14c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001fda:	4823      	ldr	r0, [pc, #140]	; (8002068 <HAL_UART_MspInit+0x14c>)
 8001fdc:	f000 fb24 	bl	8002628 <HAL_DMA_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001fe6:	f7ff fb27 	bl	8001638 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <HAL_UART_MspInit+0x14c>)
 8001fee:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_UART_MspInit+0x14c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_UART_MspInit+0x154>)
 8001ff8:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <HAL_UART_MspInit+0x158>)
 8001ffa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <HAL_UART_MspInit+0x154>)
 8001ffe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002002:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_UART_MspInit+0x154>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_UART_MspInit+0x154>)
 800200c:	2200      	movs	r2, #0
 800200e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_UART_MspInit+0x154>)
 8002012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002016:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_UART_MspInit+0x154>)
 800201a:	2200      	movs	r2, #0
 800201c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_UART_MspInit+0x154>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_UART_MspInit+0x154>)
 8002026:	f44f 7280 	mov.w	r2, #256	; 0x100
 800202a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_UART_MspInit+0x154>)
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <HAL_UART_MspInit+0x154>)
 8002034:	2200      	movs	r2, #0
 8002036:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <HAL_UART_MspInit+0x154>)
 800203a:	f000 faf5 	bl	8002628 <HAL_DMA_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002044:	f7ff faf8 	bl	8001638 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_UART_MspInit+0x154>)
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
 800204e:	4a08      	ldr	r2, [pc, #32]	; (8002070 <HAL_UART_MspInit+0x154>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002054:	bf00      	nop
 8002056:	3728      	adds	r7, #40	; 0x28
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40004400 	.word	0x40004400
 8002060:	40023800 	.word	0x40023800
 8002064:	40020000 	.word	0x40020000
 8002068:	200002bc 	.word	0x200002bc
 800206c:	400260a0 	.word	0x400260a0
 8002070:	2000031c 	.word	0x2000031c
 8002074:	40026088 	.word	0x40026088

08002078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800207c:	e7fe      	b.n	800207c <NMI_Handler+0x4>

0800207e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002082:	e7fe      	b.n	8002082 <HardFault_Handler+0x4>

08002084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <MemManage_Handler+0x4>

0800208a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208e:	e7fe      	b.n	800208e <BusFault_Handler+0x4>

08002090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <UsageFault_Handler+0x4>

08002096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c4:	f000 f97e 	bl	80023c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <DMA1_Stream5_IRQHandler+0x1c>)
 80020d2:	f000 fbd1 	bl	8002878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
 HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, UART_RECEIVE_BUFFOR);
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <DMA1_Stream5_IRQHandler+0x20>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	2120      	movs	r1, #32
 80020de:	4804      	ldr	r0, [pc, #16]	; (80020f0 <DMA1_Stream5_IRQHandler+0x24>)
 80020e0:	f000 ffc6 	bl	8003070 <HAL_GPIO_WritePin>
  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2000031c 	.word	0x2000031c
 80020ec:	20000404 	.word	0x20000404
 80020f0:	40020000 	.word	0x40020000

080020f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <DMA1_Stream6_IRQHandler+0x10>)
 80020fa:	f000 fbbd 	bl	8002878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200002bc 	.word	0x200002bc

08002108 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <I2C1_EV_IRQHandler+0x10>)
 800210e:	f001 fceb 	bl	8003ae8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000204 	.word	0x20000204

0800211c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
	return 1;
 8002120:	2301      	movs	r3, #1
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <_kill>:

int _kill(int pid, int sig)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002136:	f005 f85b 	bl	80071f0 <__errno>
 800213a:	4603      	mov	r3, r0
 800213c:	2216      	movs	r2, #22
 800213e:	601a      	str	r2, [r3, #0]
	return -1;
 8002140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_exit>:

void _exit (int status)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ffe7 	bl	800212c <_kill>
	while (1) {}		/* Make sure we hang here */
 800215e:	e7fe      	b.n	800215e <_exit+0x12>

08002160 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e00a      	b.n	8002188 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002172:	f3af 8000 	nop.w
 8002176:	4601      	mov	r1, r0
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	60ba      	str	r2, [r7, #8]
 800217e:	b2ca      	uxtb	r2, r1
 8002180:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	429a      	cmp	r2, r3
 800218e:	dbf0      	blt.n	8002172 <_read+0x12>
	}

return len;
 8002190:	687b      	ldr	r3, [r7, #4]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	e009      	b.n	80021c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	60ba      	str	r2, [r7, #8]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dbf1      	blt.n	80021ac <_write+0x12>
	}
	return len;
 80021c8:	687b      	ldr	r3, [r7, #4]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_close>:

int _close(int file)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
	return -1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021fa:	605a      	str	r2, [r3, #4]
	return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <_isatty>:

int _isatty(int file)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
	return 1;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
	return 0;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <_sbrk+0x5c>)
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <_sbrk+0x60>)
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <_sbrk+0x64>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d102      	bne.n	800225e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <_sbrk+0x64>)
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <_sbrk+0x68>)
 800225c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	429a      	cmp	r2, r3
 800226a:	d207      	bcs.n	800227c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800226c:	f004 ffc0 	bl	80071f0 <__errno>
 8002270:	4603      	mov	r3, r0
 8002272:	220c      	movs	r2, #12
 8002274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	e009      	b.n	8002290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <_sbrk+0x64>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <_sbrk+0x64>)
 800228c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228e:	68fb      	ldr	r3, [r7, #12]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20020000 	.word	0x20020000
 800229c:	00000400 	.word	0x00000400
 80022a0:	20000478 	.word	0x20000478
 80022a4:	20000490 	.word	0x20000490

080022a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <SystemInit+0x20>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <SystemInit+0x20>)
 80022b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d0:	480d      	ldr	r0, [pc, #52]	; (8002308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022d2:	490e      	ldr	r1, [pc, #56]	; (800230c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022d4:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d8:	e002      	b.n	80022e0 <LoopCopyDataInit>

080022da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022de:	3304      	adds	r3, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e4:	d3f9      	bcc.n	80022da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e6:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022e8:	4c0b      	ldr	r4, [pc, #44]	; (8002318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ec:	e001      	b.n	80022f2 <LoopFillZerobss>

080022ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f0:	3204      	adds	r2, #4

080022f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f4:	d3fb      	bcc.n	80022ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022f6:	f7ff ffd7 	bl	80022a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022fa:	f004 ff7f 	bl	80071fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022fe:	f7fe fe83 	bl	8001008 <main>
  bx  lr    
 8002302:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800230c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002310:	0800c05c 	.word	0x0800c05c
  ldr r2, =_sbss
 8002314:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002318:	20000490 	.word	0x20000490

0800231c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800231c:	e7fe      	b.n	800231c <ADC_IRQHandler>
	...

08002320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_Init+0x40>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <HAL_Init+0x40>)
 800232a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800232e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_Init+0x40>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_Init+0x40>)
 8002336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_Init+0x40>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <HAL_Init+0x40>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002348:	2003      	movs	r0, #3
 800234a:	f000 f92b 	bl	80025a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800234e:	200f      	movs	r0, #15
 8002350:	f000 f808 	bl	8002364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002354:	f7ff fd3e 	bl	8001dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023c00 	.word	0x40023c00

08002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_InitTick+0x54>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_InitTick+0x58>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	4619      	mov	r1, r3
 8002376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237a:	fbb3 f3f1 	udiv	r3, r3, r1
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f943 	bl	800260e <HAL_SYSTICK_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e00e      	b.n	80023b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b0f      	cmp	r3, #15
 8002396:	d80a      	bhi.n	80023ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002398:	2200      	movs	r2, #0
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	f000 f90b 	bl	80025ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a4:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <HAL_InitTick+0x5c>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000008 	.word	0x20000008
 80023bc:	20000010 	.word	0x20000010
 80023c0:	2000000c 	.word	0x2000000c

080023c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_IncTick+0x20>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_IncTick+0x24>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_IncTick+0x24>)
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000010 	.word	0x20000010
 80023e8:	2000047c 	.word	0x2000047c

080023ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return uwTick;
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <HAL_GetTick+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	2000047c 	.word	0x2000047c

08002404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800242c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002436:	4a04      	ldr	r2, [pc, #16]	; (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60d3      	str	r3, [r2, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <__NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	db0b      	blt.n	8002492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4907      	ldr	r1, [pc, #28]	; (80024a0 <__NVIC_EnableIRQ+0x38>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2001      	movs	r0, #1
 800248a:	fa00 f202 	lsl.w	r2, r0, r2
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	db0a      	blt.n	80024ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	490c      	ldr	r1, [pc, #48]	; (80024f0 <__NVIC_SetPriority+0x4c>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024cc:	e00a      	b.n	80024e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4908      	ldr	r1, [pc, #32]	; (80024f4 <__NVIC_SetPriority+0x50>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3b04      	subs	r3, #4
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	761a      	strb	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	bf28      	it	cs
 8002516:	2304      	movcs	r3, #4
 8002518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3304      	adds	r3, #4
 800251e:	2b06      	cmp	r3, #6
 8002520:	d902      	bls.n	8002528 <NVIC_EncodePriority+0x30>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3b03      	subs	r3, #3
 8002526:	e000      	b.n	800252a <NVIC_EncodePriority+0x32>
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	f04f 32ff 	mov.w	r2, #4294967295
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	401a      	ands	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43d9      	mvns	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	4313      	orrs	r3, r2
         );
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	; 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002570:	d301      	bcc.n	8002576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002572:	2301      	movs	r3, #1
 8002574:	e00f      	b.n	8002596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <SysTick_Config+0x40>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800257e:	210f      	movs	r1, #15
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	f7ff ff8e 	bl	80024a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <SysTick_Config+0x40>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800258e:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <SysTick_Config+0x40>)
 8002590:	2207      	movs	r2, #7
 8002592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	e000e010 	.word	0xe000e010

080025a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff29 	bl	8002404 <__NVIC_SetPriorityGrouping>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025cc:	f7ff ff3e 	bl	800244c <__NVIC_GetPriorityGrouping>
 80025d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	6978      	ldr	r0, [r7, #20]
 80025d8:	f7ff ff8e 	bl	80024f8 <NVIC_EncodePriority>
 80025dc:	4602      	mov	r2, r0
 80025de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff5d 	bl	80024a4 <__NVIC_SetPriority>
}
 80025ea:	bf00      	nop
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4603      	mov	r3, r0
 80025fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff31 	bl	8002468 <__NVIC_EnableIRQ>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff ffa2 	bl	8002560 <SysTick_Config>
 800261c:	4603      	mov	r3, r0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff feda 	bl	80023ec <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e099      	b.n	8002778 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002664:	e00f      	b.n	8002686 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002666:	f7ff fec1 	bl	80023ec <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b05      	cmp	r3, #5
 8002672:	d908      	bls.n	8002686 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2203      	movs	r2, #3
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e078      	b.n	8002778 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e8      	bne.n	8002666 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4b38      	ldr	r3, [pc, #224]	; (8002780 <HAL_DMA_Init+0x158>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d107      	bne.n	80026f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	4313      	orrs	r3, r2
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f023 0307 	bic.w	r3, r3, #7
 8002706:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	2b04      	cmp	r3, #4
 8002718:	d117      	bne.n	800274a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00e      	beq.n	800274a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fa9f 	bl	8002c70 <DMA_CheckFifoParam>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002746:	2301      	movs	r3, #1
 8002748:	e016      	b.n	8002778 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa56 	bl	8002c04 <DMA_CalcBaseAndBitshift>
 8002758:	4603      	mov	r3, r0
 800275a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002760:	223f      	movs	r2, #63	; 0x3f
 8002762:	409a      	lsls	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	f010803f 	.word	0xf010803f

08002784 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_DMA_Start_IT+0x26>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e040      	b.n	800282c <HAL_DMA_Start_IT+0xa8>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d12f      	bne.n	800281e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f9e8 	bl	8002ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027dc:	223f      	movs	r2, #63	; 0x3f
 80027de:	409a      	lsls	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0216 	orr.w	r2, r2, #22
 80027f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0208 	orr.w	r2, r2, #8
 800280a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	e005      	b.n	800282a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002826:	2302      	movs	r3, #2
 8002828:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800282a:	7dfb      	ldrb	r3, [r7, #23]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d004      	beq.n	8002852 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00c      	b.n	800286c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2205      	movs	r2, #5
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002884:	4b8e      	ldr	r3, [pc, #568]	; (8002ac0 <HAL_DMA_IRQHandler+0x248>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a8e      	ldr	r2, [pc, #568]	; (8002ac4 <HAL_DMA_IRQHandler+0x24c>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	0a9b      	lsrs	r3, r3, #10
 8002890:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002896:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	2208      	movs	r2, #8
 80028a4:	409a      	lsls	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d01a      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0204 	bic.w	r2, r2, #4
 80028ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	2208      	movs	r2, #8
 80028d2:	409a      	lsls	r2, r3
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	2201      	movs	r2, #1
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d012      	beq.n	800291a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002906:	2201      	movs	r2, #1
 8002908:	409a      	lsls	r2, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f043 0202 	orr.w	r2, r3, #2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	2204      	movs	r2, #4
 8002920:	409a      	lsls	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d012      	beq.n	8002950 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00b      	beq.n	8002950 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	2204      	movs	r2, #4
 800293e:	409a      	lsls	r2, r3
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002948:	f043 0204 	orr.w	r2, r3, #4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002954:	2210      	movs	r2, #16
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d043      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d03c      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	2210      	movs	r2, #16
 8002974:	409a      	lsls	r2, r3
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d018      	beq.n	80029ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d108      	bne.n	80029a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d024      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	4798      	blx	r3
 80029a6:	e01f      	b.n	80029e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
 80029b8:	e016      	b.n	80029e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d107      	bne.n	80029d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0208 	bic.w	r2, r2, #8
 80029d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	2220      	movs	r2, #32
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 808f 	beq.w	8002b18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8087 	beq.w	8002b18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	2220      	movs	r2, #32
 8002a10:	409a      	lsls	r2, r3
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d136      	bne.n	8002a90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0216 	bic.w	r2, r2, #22
 8002a30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d103      	bne.n	8002a52 <HAL_DMA_IRQHandler+0x1da>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0208 	bic.w	r2, r2, #8
 8002a60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	223f      	movs	r2, #63	; 0x3f
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d07e      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
        }
        return;
 8002a8e:	e079      	b.n	8002b84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01d      	beq.n	8002ada <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10d      	bne.n	8002ac8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d031      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
 8002abc:	e02c      	b.n	8002b18 <HAL_DMA_IRQHandler+0x2a0>
 8002abe:	bf00      	nop
 8002ac0:	20000008 	.word	0x20000008
 8002ac4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d023      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
 8002ad8:	e01e      	b.n	8002b18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10f      	bne.n	8002b08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0210 	bic.w	r2, r2, #16
 8002af6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d032      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d022      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2205      	movs	r2, #5
 8002b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	3301      	adds	r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d307      	bcc.n	8002b60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f2      	bne.n	8002b44 <HAL_DMA_IRQHandler+0x2cc>
 8002b5e:	e000      	b.n	8002b62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4798      	blx	r3
 8002b82:	e000      	b.n	8002b86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b84:	bf00      	nop
    }
  }
}
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b9a:	b2db      	uxtb	r3, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	d108      	bne.n	8002be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002be6:	e007      	b.n	8002bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	60da      	str	r2, [r3, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	3b10      	subs	r3, #16
 8002c14:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <DMA_CalcBaseAndBitshift+0x64>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c1e:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <DMA_CalcBaseAndBitshift+0x68>)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d909      	bls.n	8002c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	1d1a      	adds	r2, r3, #4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	659a      	str	r2, [r3, #88]	; 0x58
 8002c44:	e007      	b.n	8002c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	aaaaaaab 	.word	0xaaaaaaab
 8002c6c:	0800bb9c 	.word	0x0800bb9c

08002c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d11f      	bne.n	8002cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d856      	bhi.n	8002d3e <DMA_CheckFifoParam+0xce>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <DMA_CheckFifoParam+0x28>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002cbb 	.word	0x08002cbb
 8002ca0:	08002ca9 	.word	0x08002ca9
 8002ca4:	08002d3f 	.word	0x08002d3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d046      	beq.n	8002d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb8:	e043      	b.n	8002d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cc2:	d140      	bne.n	8002d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc8:	e03d      	b.n	8002d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd2:	d121      	bne.n	8002d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d837      	bhi.n	8002d4a <DMA_CheckFifoParam+0xda>
 8002cda:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <DMA_CheckFifoParam+0x70>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002cf1 	.word	0x08002cf1
 8002ce4:	08002cf7 	.word	0x08002cf7
 8002ce8:	08002cf1 	.word	0x08002cf1
 8002cec:	08002d09 	.word	0x08002d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf4:	e030      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d025      	beq.n	8002d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d06:	e022      	b.n	8002d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d10:	d11f      	bne.n	8002d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d16:	e01c      	b.n	8002d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d903      	bls.n	8002d26 <DMA_CheckFifoParam+0xb6>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d003      	beq.n	8002d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d24:	e018      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2a:	e015      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00e      	beq.n	8002d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3c:	e00b      	b.n	8002d56 <DMA_CheckFifoParam+0xe6>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e00a      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d42:	bf00      	nop
 8002d44:	e008      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d46:	bf00      	nop
 8002d48:	e006      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e004      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e002      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d52:	bf00      	nop
 8002d54:	e000      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
    }
  } 
  
  return status; 
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	; 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	e159      	b.n	8003038 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	f040 8148 	bne.w	8003032 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d005      	beq.n	8002dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d130      	bne.n	8002e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 0201 	and.w	r2, r3, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d017      	beq.n	8002e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d123      	bne.n	8002eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	08da      	lsrs	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0203 	and.w	r2, r3, #3
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80a2 	beq.w	8003032 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b57      	ldr	r3, [pc, #348]	; (8003050 <HAL_GPIO_Init+0x2e8>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	4a56      	ldr	r2, [pc, #344]	; (8003050 <HAL_GPIO_Init+0x2e8>)
 8002ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002efc:	6453      	str	r3, [r2, #68]	; 0x44
 8002efe:	4b54      	ldr	r3, [pc, #336]	; (8003050 <HAL_GPIO_Init+0x2e8>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f0a:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_GPIO_Init+0x2ec>)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	3302      	adds	r3, #2
 8002f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	220f      	movs	r2, #15
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a49      	ldr	r2, [pc, #292]	; (8003058 <HAL_GPIO_Init+0x2f0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d019      	beq.n	8002f6a <HAL_GPIO_Init+0x202>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a48      	ldr	r2, [pc, #288]	; (800305c <HAL_GPIO_Init+0x2f4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <HAL_GPIO_Init+0x1fe>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a47      	ldr	r2, [pc, #284]	; (8003060 <HAL_GPIO_Init+0x2f8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00d      	beq.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a46      	ldr	r2, [pc, #280]	; (8003064 <HAL_GPIO_Init+0x2fc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <HAL_GPIO_Init+0x1f6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a45      	ldr	r2, [pc, #276]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <HAL_GPIO_Init+0x1f2>
 8002f56:	2304      	movs	r3, #4
 8002f58:	e008      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	e006      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e004      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	f002 0203 	and.w	r2, r2, #3
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4093      	lsls	r3, r2
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f7c:	4935      	ldr	r1, [pc, #212]	; (8003054 <HAL_GPIO_Init+0x2ec>)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f8a:	4b38      	ldr	r3, [pc, #224]	; (800306c <HAL_GPIO_Init+0x304>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fae:	4a2f      	ldr	r2, [pc, #188]	; (800306c <HAL_GPIO_Init+0x304>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_GPIO_Init+0x304>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fd8:	4a24      	ldr	r2, [pc, #144]	; (800306c <HAL_GPIO_Init+0x304>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <HAL_GPIO_Init+0x304>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003002:	4a1a      	ldr	r2, [pc, #104]	; (800306c <HAL_GPIO_Init+0x304>)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <HAL_GPIO_Init+0x304>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800302c:	4a0f      	ldr	r2, [pc, #60]	; (800306c <HAL_GPIO_Init+0x304>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3301      	adds	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	f67f aea2 	bls.w	8002d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3724      	adds	r7, #36	; 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	40013800 	.word	0x40013800
 8003058:	40020000 	.word	0x40020000
 800305c:	40020400 	.word	0x40020400
 8003060:	40020800 	.word	0x40020800
 8003064:	40020c00 	.word	0x40020c00
 8003068:	40021000 	.word	0x40021000
 800306c:	40013c00 	.word	0x40013c00

08003070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
 800307c:	4613      	mov	r3, r2
 800307e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003080:	787b      	ldrb	r3, [r7, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003086:	887a      	ldrh	r2, [r7, #2]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800308c:	e003      	b.n	8003096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800308e:	887b      	ldrh	r3, [r7, #2]
 8003090:	041a      	lsls	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	619a      	str	r2, [r3, #24]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e12b      	b.n	800330e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fe feaa 	bl	8001e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2224      	movs	r2, #36	; 0x24
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003106:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003108:	f003 f834 	bl	8006174 <HAL_RCC_GetPCLK1Freq>
 800310c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4a81      	ldr	r2, [pc, #516]	; (8003318 <HAL_I2C_Init+0x274>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d807      	bhi.n	8003128 <HAL_I2C_Init+0x84>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4a80      	ldr	r2, [pc, #512]	; (800331c <HAL_I2C_Init+0x278>)
 800311c:	4293      	cmp	r3, r2
 800311e:	bf94      	ite	ls
 8003120:	2301      	movls	r3, #1
 8003122:	2300      	movhi	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e006      	b.n	8003136 <HAL_I2C_Init+0x92>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a7d      	ldr	r2, [pc, #500]	; (8003320 <HAL_I2C_Init+0x27c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	bf94      	ite	ls
 8003130:	2301      	movls	r3, #1
 8003132:	2300      	movhi	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e0e7      	b.n	800330e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4a78      	ldr	r2, [pc, #480]	; (8003324 <HAL_I2C_Init+0x280>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	0c9b      	lsrs	r3, r3, #18
 8003148:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a6a      	ldr	r2, [pc, #424]	; (8003318 <HAL_I2C_Init+0x274>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d802      	bhi.n	8003178 <HAL_I2C_Init+0xd4>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	3301      	adds	r3, #1
 8003176:	e009      	b.n	800318c <HAL_I2C_Init+0xe8>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800317e:	fb02 f303 	mul.w	r3, r2, r3
 8003182:	4a69      	ldr	r2, [pc, #420]	; (8003328 <HAL_I2C_Init+0x284>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	3301      	adds	r3, #1
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	430b      	orrs	r3, r1
 8003192:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800319e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	495c      	ldr	r1, [pc, #368]	; (8003318 <HAL_I2C_Init+0x274>)
 80031a8:	428b      	cmp	r3, r1
 80031aa:	d819      	bhi.n	80031e0 <HAL_I2C_Init+0x13c>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e59      	subs	r1, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ba:	1c59      	adds	r1, r3, #1
 80031bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031c0:	400b      	ands	r3, r1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_I2C_Init+0x138>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1e59      	subs	r1, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d4:	3301      	adds	r3, #1
 80031d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031da:	e051      	b.n	8003280 <HAL_I2C_Init+0x1dc>
 80031dc:	2304      	movs	r3, #4
 80031de:	e04f      	b.n	8003280 <HAL_I2C_Init+0x1dc>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d111      	bne.n	800320c <HAL_I2C_Init+0x168>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1e58      	subs	r0, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	440b      	add	r3, r1
 80031f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fa:	3301      	adds	r3, #1
 80031fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	e012      	b.n	8003232 <HAL_I2C_Init+0x18e>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1e58      	subs	r0, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	0099      	lsls	r1, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Init+0x196>
 8003236:	2301      	movs	r3, #1
 8003238:	e022      	b.n	8003280 <HAL_I2C_Init+0x1dc>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10e      	bne.n	8003260 <HAL_I2C_Init+0x1bc>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1e58      	subs	r0, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6859      	ldr	r1, [r3, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	440b      	add	r3, r1
 8003250:	fbb0 f3f3 	udiv	r3, r0, r3
 8003254:	3301      	adds	r3, #1
 8003256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800325e:	e00f      	b.n	8003280 <HAL_I2C_Init+0x1dc>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1e58      	subs	r0, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	0099      	lsls	r1, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	fbb0 f3f3 	udiv	r3, r0, r3
 8003276:	3301      	adds	r3, #1
 8003278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	6809      	ldr	r1, [r1, #0]
 8003284:	4313      	orrs	r3, r2
 8003286:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6911      	ldr	r1, [r2, #16]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68d2      	ldr	r2, [r2, #12]
 80032ba:	4311      	orrs	r1, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	000186a0 	.word	0x000186a0
 800331c:	001e847f 	.word	0x001e847f
 8003320:	003d08ff 	.word	0x003d08ff
 8003324:	431bde83 	.word	0x431bde83
 8003328:	10624dd3 	.word	0x10624dd3

0800332c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af02      	add	r7, sp, #8
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	4608      	mov	r0, r1
 8003336:	4611      	mov	r1, r2
 8003338:	461a      	mov	r2, r3
 800333a:	4603      	mov	r3, r0
 800333c:	817b      	strh	r3, [r7, #10]
 800333e:	460b      	mov	r3, r1
 8003340:	813b      	strh	r3, [r7, #8]
 8003342:	4613      	mov	r3, r2
 8003344:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003346:	f7ff f851 	bl	80023ec <HAL_GetTick>
 800334a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b20      	cmp	r3, #32
 8003356:	f040 80d9 	bne.w	800350c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	2319      	movs	r3, #25
 8003360:	2201      	movs	r2, #1
 8003362:	496d      	ldr	r1, [pc, #436]	; (8003518 <HAL_I2C_Mem_Write+0x1ec>)
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f002 f8ab 	bl	80054c0 <I2C_WaitOnFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003370:	2302      	movs	r3, #2
 8003372:	e0cc      	b.n	800350e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_I2C_Mem_Write+0x56>
 800337e:	2302      	movs	r3, #2
 8003380:	e0c5      	b.n	800350e <HAL_I2C_Mem_Write+0x1e2>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d007      	beq.n	80033a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2221      	movs	r2, #33	; 0x21
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2240      	movs	r2, #64	; 0x40
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a4d      	ldr	r2, [pc, #308]	; (800351c <HAL_I2C_Mem_Write+0x1f0>)
 80033e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033ea:	88f8      	ldrh	r0, [r7, #6]
 80033ec:	893a      	ldrh	r2, [r7, #8]
 80033ee:	8979      	ldrh	r1, [r7, #10]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	4603      	mov	r3, r0
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f001 fe3a 	bl	8005074 <I2C_RequestMemoryWrite>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d052      	beq.n	80034ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e081      	b.n	800350e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f002 f92c 	bl	800566c <I2C_WaitOnTXEFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	2b04      	cmp	r3, #4
 8003420:	d107      	bne.n	8003432 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003430:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e06b      	b.n	800350e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	781a      	ldrb	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d11b      	bne.n	80034ac <HAL_I2C_Mem_Write+0x180>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	d017      	beq.n	80034ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1aa      	bne.n	800340a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f002 f918 	bl	80056ee <I2C_WaitOnBTFFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00d      	beq.n	80034e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d107      	bne.n	80034dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e016      	b.n	800350e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	00100002 	.word	0x00100002
 800351c:	ffff0000 	.word	0xffff0000

08003520 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08c      	sub	sp, #48	; 0x30
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	4608      	mov	r0, r1
 800352a:	4611      	mov	r1, r2
 800352c:	461a      	mov	r2, r3
 800352e:	4603      	mov	r3, r0
 8003530:	817b      	strh	r3, [r7, #10]
 8003532:	460b      	mov	r3, r1
 8003534:	813b      	strh	r3, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800353a:	f7fe ff57 	bl	80023ec <HAL_GetTick>
 800353e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b20      	cmp	r3, #32
 800354a:	f040 8208 	bne.w	800395e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	2319      	movs	r3, #25
 8003554:	2201      	movs	r2, #1
 8003556:	497b      	ldr	r1, [pc, #492]	; (8003744 <HAL_I2C_Mem_Read+0x224>)
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f001 ffb1 	bl	80054c0 <I2C_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003564:	2302      	movs	r3, #2
 8003566:	e1fb      	b.n	8003960 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_I2C_Mem_Read+0x56>
 8003572:	2302      	movs	r3, #2
 8003574:	e1f4      	b.n	8003960 <HAL_I2C_Mem_Read+0x440>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d007      	beq.n	800359c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2222      	movs	r2, #34	; 0x22
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2240      	movs	r2, #64	; 0x40
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a5b      	ldr	r2, [pc, #364]	; (8003748 <HAL_I2C_Mem_Read+0x228>)
 80035dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035de:	88f8      	ldrh	r0, [r7, #6]
 80035e0:	893a      	ldrh	r2, [r7, #8]
 80035e2:	8979      	ldrh	r1, [r7, #10]
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	4603      	mov	r3, r0
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f001 fdd6 	bl	80051a0 <I2C_RequestMemoryRead>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e1b0      	b.n	8003960 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	2b00      	cmp	r3, #0
 8003604:	d113      	bne.n	800362e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003606:	2300      	movs	r3, #0
 8003608:	623b      	str	r3, [r7, #32]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	623b      	str	r3, [r7, #32]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	623b      	str	r3, [r7, #32]
 800361a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e184      	b.n	8003938 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	2b01      	cmp	r3, #1
 8003634:	d11b      	bne.n	800366e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003644:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e164      	b.n	8003938 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	2b02      	cmp	r3, #2
 8003674:	d11b      	bne.n	80036ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003684:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003694:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	e144      	b.n	8003938 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036c4:	e138      	b.n	8003938 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	f200 80f1 	bhi.w	80038b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d123      	bne.n	8003720 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f002 f879 	bl	80057d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e139      	b.n	8003960 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800371e:	e10b      	b.n	8003938 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	2b02      	cmp	r3, #2
 8003726:	d14e      	bne.n	80037c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	2200      	movs	r2, #0
 8003730:	4906      	ldr	r1, [pc, #24]	; (800374c <HAL_I2C_Mem_Read+0x22c>)
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f001 fec4 	bl	80054c0 <I2C_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d008      	beq.n	8003750 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e10e      	b.n	8003960 <HAL_I2C_Mem_Read+0x440>
 8003742:	bf00      	nop
 8003744:	00100002 	.word	0x00100002
 8003748:	ffff0000 	.word	0xffff0000
 800374c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037c4:	e0b8      	b.n	8003938 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037cc:	2200      	movs	r2, #0
 80037ce:	4966      	ldr	r1, [pc, #408]	; (8003968 <HAL_I2C_Mem_Read+0x448>)
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f001 fe75 	bl	80054c0 <I2C_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0bf      	b.n	8003960 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	2200      	movs	r2, #0
 800382a:	494f      	ldr	r1, [pc, #316]	; (8003968 <HAL_I2C_Mem_Read+0x448>)
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f001 fe47 	bl	80054c0 <I2C_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e091      	b.n	8003960 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038b0:	e042      	b.n	8003938 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f001 ff8c 	bl	80057d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e04c      	b.n	8003960 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b04      	cmp	r3, #4
 8003904:	d118      	bne.n	8003938 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	2b00      	cmp	r3, #0
 800393e:	f47f aec2 	bne.w	80036c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3728      	adds	r7, #40	; 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	00010004 	.word	0x00010004

0800396c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	4608      	mov	r0, r1
 8003976:	4611      	mov	r1, r2
 8003978:	461a      	mov	r2, r3
 800397a:	4603      	mov	r3, r0
 800397c:	817b      	strh	r3, [r7, #10]
 800397e:	460b      	mov	r3, r1
 8003980:	813b      	strh	r3, [r7, #8]
 8003982:	4613      	mov	r3, r2
 8003984:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b20      	cmp	r3, #32
 8003994:	f040 809a 	bne.w	8003acc <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003998:	4b50      	ldr	r3, [pc, #320]	; (8003adc <HAL_I2C_Mem_Read_IT+0x170>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	08db      	lsrs	r3, r3, #3
 800399e:	4a50      	ldr	r2, [pc, #320]	; (8003ae0 <HAL_I2C_Mem_Read_IT+0x174>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	0a1a      	lsrs	r2, r3, #8
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	009a      	lsls	r2, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d116      	bne.n	80039ec <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f043 0220 	orr.w	r2, r3, #32
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e070      	b.n	8003ace <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d0db      	beq.n	80039b2 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_I2C_Mem_Read_IT+0x9c>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e062      	b.n	8003ace <HAL_I2C_Mem_Read_IT+0x162>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d007      	beq.n	8003a2e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2222      	movs	r2, #34	; 0x22
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2240      	movs	r2, #64	; 0x40
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a3a      	ldr	r2, [r7, #32]
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <HAL_I2C_Mem_Read_IT+0x178>)
 8003a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003a70:	897a      	ldrh	r2, [r7, #10]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003a76:	893a      	ldrh	r2, [r7, #8]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003a7c:	88fa      	ldrh	r2, [r7, #6]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a96:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003ac6:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000008 	.word	0x20000008
 8003ae0:	14f8b589 	.word	0x14f8b589
 8003ae4:	ffff0000 	.word	0xffff0000

08003ae8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b10:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d003      	beq.n	8003b20 <HAL_I2C_EV_IRQHandler+0x38>
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	f040 80c1 	bne.w	8003ca2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10d      	bne.n	8003b56 <HAL_I2C_EV_IRQHandler+0x6e>
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003b40:	d003      	beq.n	8003b4a <HAL_I2C_EV_IRQHandler+0x62>
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003b48:	d101      	bne.n	8003b4e <HAL_I2C_EV_IRQHandler+0x66>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_I2C_EV_IRQHandler+0x68>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	f000 8132 	beq.w	8003dba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00c      	beq.n	8003b7a <HAL_I2C_EV_IRQHandler+0x92>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	0a5b      	lsrs	r3, r3, #9
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f001 feb6 	bl	80058de <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fcd2 	bl	800451c <I2C_Master_SB>
 8003b78:	e092      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	08db      	lsrs	r3, r3, #3
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_I2C_EV_IRQHandler+0xb2>
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	0a5b      	lsrs	r3, r3, #9
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fd48 	bl	8004628 <I2C_Master_ADD10>
 8003b98:	e082      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0xd2>
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	0a5b      	lsrs	r3, r3, #9
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fd62 	bl	800467c <I2C_Master_ADDR>
 8003bb8:	e072      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d03b      	beq.n	8003c3e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd4:	f000 80f3 	beq.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	09db      	lsrs	r3, r3, #7
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00f      	beq.n	8003c04 <HAL_I2C_EV_IRQHandler+0x11c>
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	0a9b      	lsrs	r3, r3, #10
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <HAL_I2C_EV_IRQHandler+0x11c>
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	089b      	lsrs	r3, r3, #2
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f942 	bl	8003e86 <I2C_MasterTransmit_TXE>
 8003c02:	e04d      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	089b      	lsrs	r3, r3, #2
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80d6 	beq.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	0a5b      	lsrs	r3, r3, #9
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80cf 	beq.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c20:	7bbb      	ldrb	r3, [r7, #14]
 8003c22:	2b21      	cmp	r3, #33	; 0x21
 8003c24:	d103      	bne.n	8003c2e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f9c9 	bl	8003fbe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c2c:	e0c7      	b.n	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	f040 80c4 	bne.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fa37 	bl	80040aa <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c3c:	e0bf      	b.n	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4c:	f000 80b7 	beq.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00f      	beq.n	8003c7c <HAL_I2C_EV_IRQHandler+0x194>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	0a9b      	lsrs	r3, r3, #10
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d009      	beq.n	8003c7c <HAL_I2C_EV_IRQHandler+0x194>
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d103      	bne.n	8003c7c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 faac 	bl	80041d2 <I2C_MasterReceive_RXNE>
 8003c7a:	e011      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 809a 	beq.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	0a5b      	lsrs	r3, r3, #9
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8093 	beq.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fb55 	bl	8004348 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9e:	e08e      	b.n	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ca0:	e08d      	b.n	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	e007      	b.n	8003cc4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d012      	beq.n	8003cf6 <HAL_I2C_EV_IRQHandler+0x20e>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	0a5b      	lsrs	r3, r3, #9
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00c      	beq.n	8003cf6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003cec:	69b9      	ldr	r1, [r7, #24]
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 ff13 	bl	8004b1a <I2C_Slave_ADDR>
 8003cf4:	e066      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0x22e>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	0a5b      	lsrs	r3, r3, #9
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 ff4e 	bl	8004bb0 <I2C_Slave_STOPF>
 8003d14:	e056      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d16:	7bbb      	ldrb	r3, [r7, #14]
 8003d18:	2b21      	cmp	r3, #33	; 0x21
 8003d1a:	d002      	beq.n	8003d22 <HAL_I2C_EV_IRQHandler+0x23a>
 8003d1c:	7bbb      	ldrb	r3, [r7, #14]
 8003d1e:	2b29      	cmp	r3, #41	; 0x29
 8003d20:	d125      	bne.n	8003d6e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	09db      	lsrs	r3, r3, #7
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00f      	beq.n	8003d4e <HAL_I2C_EV_IRQHandler+0x266>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	0a9b      	lsrs	r3, r3, #10
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_I2C_EV_IRQHandler+0x266>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d103      	bne.n	8003d4e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fe29 	bl	800499e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d4c:	e039      	b.n	8003dc2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d033      	beq.n	8003dc2 <HAL_I2C_EV_IRQHandler+0x2da>
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	0a5b      	lsrs	r3, r3, #9
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d02d      	beq.n	8003dc2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fe56 	bl	8004a18 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d6c:	e029      	b.n	8003dc2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	099b      	lsrs	r3, r3, #6
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00f      	beq.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	0a9b      	lsrs	r3, r3, #10
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fe61 	bl	8004a5a <I2C_SlaveReceive_RXNE>
 8003d98:	e014      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00e      	beq.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	0a5b      	lsrs	r3, r3, #9
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fe8f 	bl	8004ad6 <I2C_SlaveReceive_BTF>
 8003db8:	e004      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003dba:	bf00      	nop
 8003dbc:	e002      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dc2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	70fb      	strb	r3, [r7, #3]
 8003e26:	4613      	mov	r3, r2
 8003e28:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e9c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d150      	bne.n	8003f4e <I2C_MasterTransmit_TXE+0xc8>
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	2b21      	cmp	r3, #33	; 0x21
 8003eb0:	d14d      	bne.n	8003f4e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d01d      	beq.n	8003ef4 <I2C_MasterTransmit_TXE+0x6e>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d01a      	beq.n	8003ef4 <I2C_MasterTransmit_TXE+0x6e>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ec4:	d016      	beq.n	8003ef4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ed4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2211      	movs	r2, #17
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff6c 	bl	8003dca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ef2:	e060      	b.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f02:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f12:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d107      	bne.n	8003f3e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff ff87 	bl	8003e4a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f3c:	e03b      	b.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff ff3f 	bl	8003dca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f4c:	e033      	b.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b21      	cmp	r3, #33	; 0x21
 8003f52:	d005      	beq.n	8003f60 <I2C_MasterTransmit_TXE+0xda>
 8003f54:	7bbb      	ldrb	r3, [r7, #14]
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d12d      	bne.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b22      	cmp	r3, #34	; 0x22
 8003f5e:	d12a      	bne.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d108      	bne.n	8003f7c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f78:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f7a:	e01c      	b.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d103      	bne.n	8003f90 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f88e 	bl	80040aa <I2C_MemoryTransmit_TXE_BTF>
}
 8003f8e:	e012      	b.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fb4:	e7ff      	b.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b21      	cmp	r3, #33	; 0x21
 8003fd6:	d164      	bne.n	80040a2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d012      	beq.n	8004008 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	781a      	ldrb	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004006:	e04c      	b.n	80040a2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b08      	cmp	r3, #8
 800400c:	d01d      	beq.n	800404a <I2C_MasterTransmit_BTF+0x8c>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b20      	cmp	r3, #32
 8004012:	d01a      	beq.n	800404a <I2C_MasterTransmit_BTF+0x8c>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800401a:	d016      	beq.n	800404a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800402a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2211      	movs	r2, #17
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fec1 	bl	8003dca <HAL_I2C_MasterTxCpltCallback>
}
 8004048:	e02b      	b.n	80040a2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004058:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004068:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d107      	bne.n	8004094 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff fedc 	bl	8003e4a <HAL_I2C_MemTxCpltCallback>
}
 8004092:	e006      	b.n	80040a2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff fe94 	bl	8003dca <HAL_I2C_MasterTxCpltCallback>
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d11d      	bne.n	80040fe <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d10b      	bne.n	80040e2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040da:	1c9a      	adds	r2, r3, #2
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80040e0:	e073      	b.n	80041ca <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	121b      	asrs	r3, r3, #8
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040fc:	e065      	b.n	80041ca <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004102:	2b01      	cmp	r3, #1
 8004104:	d10b      	bne.n	800411e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410a:	b2da      	uxtb	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800411c:	e055      	b.n	80041ca <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004122:	2b02      	cmp	r3, #2
 8004124:	d151      	bne.n	80041ca <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	2b22      	cmp	r3, #34	; 0x22
 800412a:	d10d      	bne.n	8004148 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004146:	e040      	b.n	80041ca <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d015      	beq.n	800417e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b21      	cmp	r3, #33	; 0x21
 8004156:	d112      	bne.n	800417e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800417c:	e025      	b.n	80041ca <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d120      	bne.n	80041ca <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b21      	cmp	r3, #33	; 0x21
 800418c:	d11d      	bne.n	80041ca <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800419c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff fe40 	bl	8003e4a <HAL_I2C_MemTxCpltCallback>
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b22      	cmp	r3, #34	; 0x22
 80041e4:	f040 80ac 	bne.w	8004340 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d921      	bls.n	800423a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b03      	cmp	r3, #3
 8004224:	f040 808c 	bne.w	8004340 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004236:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004238:	e082      	b.n	8004340 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	2b02      	cmp	r3, #2
 8004240:	d075      	beq.n	800432e <I2C_MasterReceive_RXNE+0x15c>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d002      	beq.n	800424e <I2C_MasterReceive_RXNE+0x7c>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d16f      	bne.n	800432e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f001 fa8e 	bl	8005770 <I2C_WaitOnSTOPRequestThroughIT>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d142      	bne.n	80042e0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004268:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004278:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d10a      	bne.n	80042ca <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fd f9be 	bl	8001644 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042c8:	e03a      	b.n	8004340 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2212      	movs	r2, #18
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fd80 	bl	8003dde <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042de:	e02f      	b.n	8004340 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fd99 	bl	8003e5e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800432c:	e008      	b.n	8004340 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800433c:	605a      	str	r2, [r3, #4]
}
 800433e:	e7ff      	b.n	8004340 <I2C_MasterReceive_RXNE+0x16e>
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b04      	cmp	r3, #4
 800435e:	d11b      	bne.n	8004398 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004396:	e0bd      	b.n	8004514 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d129      	bne.n	80043f6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d00a      	beq.n	80043ce <I2C_MasterReceive_BTF+0x86>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d007      	beq.n	80043ce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043f4:	e08e      	b.n	8004514 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d176      	bne.n	80044ee <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d002      	beq.n	800440c <I2C_MasterReceive_BTF+0xc4>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b10      	cmp	r3, #16
 800440a:	d108      	bne.n	800441e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	e019      	b.n	8004452 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b04      	cmp	r3, #4
 8004422:	d002      	beq.n	800442a <I2C_MasterReceive_BTF+0xe2>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d108      	bne.n	800443c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e00a      	b.n	8004452 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b10      	cmp	r3, #16
 8004440:	d007      	beq.n	8004452 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004450:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80044ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b40      	cmp	r3, #64	; 0x40
 80044c0:	d10a      	bne.n	80044d8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7fd f8b7 	bl	8001644 <HAL_I2C_MemRxCpltCallback>
}
 80044d6:	e01d      	b.n	8004514 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2212      	movs	r2, #18
 80044e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff fc79 	bl	8003dde <HAL_I2C_MasterRxCpltCallback>
}
 80044ec:	e012      	b.n	8004514 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d117      	bne.n	8004560 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004534:	2b00      	cmp	r3, #0
 8004536:	d109      	bne.n	800454c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004548:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800454a:	e067      	b.n	800461c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	b2da      	uxtb	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	611a      	str	r2, [r3, #16]
}
 800455e:	e05d      	b.n	800461c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004568:	d133      	bne.n	80045d2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b21      	cmp	r3, #33	; 0x21
 8004574:	d109      	bne.n	800458a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004586:	611a      	str	r2, [r3, #16]
 8004588:	e008      	b.n	800459c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	b2da      	uxtb	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <I2C_Master_SB+0x92>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d108      	bne.n	80045c0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d032      	beq.n	800461c <I2C_Master_SB+0x100>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02d      	beq.n	800461c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ce:	605a      	str	r2, [r3, #4]
}
 80045d0:	e024      	b.n	800461c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10e      	bne.n	80045f8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	b29b      	uxth	r3, r3
 80045e0:	11db      	asrs	r3, r3, #7
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f003 0306 	and.w	r3, r3, #6
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f063 030f 	orn	r3, r3, #15
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]
}
 80045f6:	e011      	b.n	800461c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d10d      	bne.n	800461c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	b29b      	uxth	r3, r3
 8004606:	11db      	asrs	r3, r3, #7
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 0306 	and.w	r3, r3, #6
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f063 030e 	orn	r3, r3, #14
 8004614:	b2da      	uxtb	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	611a      	str	r2, [r3, #16]
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004634:	b2da      	uxtb	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <I2C_Master_ADD10+0x26>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d108      	bne.n	8004660 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00c      	beq.n	8004670 <I2C_Master_ADD10+0x48>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800466e:	605a      	str	r2, [r3, #4]
  }
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800467c:	b480      	push	{r7}
 800467e:	b091      	sub	sp, #68	; 0x44
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b22      	cmp	r3, #34	; 0x22
 80046a4:	f040 8169 	bne.w	800497a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10f      	bne.n	80046d0 <I2C_Master_ADDR+0x54>
 80046b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d10b      	bne.n	80046d0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b8:	2300      	movs	r3, #0
 80046ba:	633b      	str	r3, [r7, #48]	; 0x30
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	633b      	str	r3, [r7, #48]	; 0x30
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	633b      	str	r3, [r7, #48]	; 0x30
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	e160      	b.n	8004992 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d11d      	bne.n	8004714 <I2C_Master_ADDR+0x98>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046e0:	d118      	bne.n	8004714 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e2:	2300      	movs	r3, #0
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004706:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	651a      	str	r2, [r3, #80]	; 0x50
 8004712:	e13e      	b.n	8004992 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d113      	bne.n	8004746 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471e:	2300      	movs	r3, #0
 8004720:	62bb      	str	r3, [r7, #40]	; 0x28
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	e115      	b.n	8004972 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	f040 808a 	bne.w	8004866 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004758:	d137      	bne.n	80047ca <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004768:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004778:	d113      	bne.n	80047a2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004788:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478a:	2300      	movs	r3, #0
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	e0e7      	b.n	8004972 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a2:	2300      	movs	r3, #0
 80047a4:	623b      	str	r3, [r7, #32]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	623b      	str	r3, [r7, #32]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	623b      	str	r3, [r7, #32]
 80047b6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	e0d3      	b.n	8004972 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d02e      	beq.n	800482e <I2C_Master_ADDR+0x1b2>
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d02b      	beq.n	800482e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80047d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d8:	2b12      	cmp	r3, #18
 80047da:	d102      	bne.n	80047e2 <I2C_Master_ADDR+0x166>
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d125      	bne.n	800482e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d00e      	beq.n	8004806 <I2C_Master_ADDR+0x18a>
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d00b      	beq.n	8004806 <I2C_Master_ADDR+0x18a>
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d008      	beq.n	8004806 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	e007      	b.n	8004816 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004814:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	e0a1      	b.n	8004972 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483e:	2300      	movs	r3, #0
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	e085      	b.n	8004972 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d14d      	bne.n	800490c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004872:	2b04      	cmp	r3, #4
 8004874:	d016      	beq.n	80048a4 <I2C_Master_ADDR+0x228>
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	2b02      	cmp	r3, #2
 800487a:	d013      	beq.n	80048a4 <I2C_Master_ADDR+0x228>
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	2b10      	cmp	r3, #16
 8004880:	d010      	beq.n	80048a4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004890:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e007      	b.n	80048b4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048b2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c2:	d117      	bne.n	80048f4 <I2C_Master_ADDR+0x278>
 80048c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048ca:	d00b      	beq.n	80048e4 <I2C_Master_ADDR+0x268>
 80048cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d008      	beq.n	80048e4 <I2C_Master_ADDR+0x268>
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d005      	beq.n	80048e4 <I2C_Master_ADDR+0x268>
 80048d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d002      	beq.n	80048e4 <I2C_Master_ADDR+0x268>
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d107      	bne.n	80048f4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048f2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	e032      	b.n	8004972 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800491a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492a:	d117      	bne.n	800495c <I2C_Master_ADDR+0x2e0>
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004932:	d00b      	beq.n	800494c <I2C_Master_ADDR+0x2d0>
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	2b01      	cmp	r3, #1
 8004938:	d008      	beq.n	800494c <I2C_Master_ADDR+0x2d0>
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	2b08      	cmp	r3, #8
 800493e:	d005      	beq.n	800494c <I2C_Master_ADDR+0x2d0>
 8004940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004942:	2b10      	cmp	r3, #16
 8004944:	d002      	beq.n	800494c <I2C_Master_ADDR+0x2d0>
 8004946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004948:	2b20      	cmp	r3, #32
 800494a:	d107      	bne.n	800495c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800495a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495c:	2300      	movs	r3, #0
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004978:	e00b      	b.n	8004992 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
}
 8004990:	e7ff      	b.n	8004992 <I2C_Master_ADDR+0x316>
 8004992:	bf00      	nop
 8004994:	3744      	adds	r7, #68	; 0x44
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d02b      	beq.n	8004a10 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	781a      	ldrb	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d114      	bne.n	8004a10 <I2C_SlaveTransmit_TXE+0x72>
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b29      	cmp	r3, #41	; 0x29
 80049ea:	d111      	bne.n	8004a10 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2221      	movs	r2, #33	; 0x21
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2228      	movs	r2, #40	; 0x28
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff f9f1 	bl	8003df2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a10:	bf00      	nop
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d011      	beq.n	8004a4e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	781a      	ldrb	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a68:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d02c      	beq.n	8004ace <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d114      	bne.n	8004ace <I2C_SlaveReceive_RXNE+0x74>
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8004aa8:	d111      	bne.n	8004ace <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2222      	movs	r2, #34	; 0x22
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2228      	movs	r2, #40	; 0x28
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff f99c 	bl	8003e06 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d012      	beq.n	8004b0e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b34:	2b28      	cmp	r3, #40	; 0x28
 8004b36:	d127      	bne.n	8004b88 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b46:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	089b      	lsrs	r3, r3, #2
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	09db      	lsrs	r3, r3, #7
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d103      	bne.n	8004b6c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	81bb      	strh	r3, [r7, #12]
 8004b6a:	e002      	b.n	8004b72 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004b7a:	89ba      	ldrh	r2, [r7, #12]
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff f94a 	bl	8003e1a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b86:	e00e      	b.n	8004ba6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004ba6:	bf00      	nop
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60bb      	str	r3, [r7, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c0c:	d172      	bne.n	8004cf4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	2b22      	cmp	r3, #34	; 0x22
 8004c12:	d002      	beq.n	8004c1a <I2C_Slave_STOPF+0x6a>
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b2a      	cmp	r3, #42	; 0x2a
 8004c18:	d135      	bne.n	8004c86 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	f043 0204 	orr.w	r2, r3, #4
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fd ff9a 	bl	8002b8c <HAL_DMA_GetState>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d049      	beq.n	8004cf2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	4a69      	ldr	r2, [pc, #420]	; (8004e08 <I2C_Slave_STOPF+0x258>)
 8004c64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fd fde2 	bl	8002834 <HAL_DMA_Abort_IT>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d03d      	beq.n	8004cf2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c80:	4610      	mov	r0, r2
 8004c82:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c84:	e035      	b.n	8004cf2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f043 0204 	orr.w	r2, r3, #4
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fd ff64 	bl	8002b8c <HAL_DMA_GetState>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d014      	beq.n	8004cf4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cce:	4a4e      	ldr	r2, [pc, #312]	; (8004e08 <I2C_Slave_STOPF+0x258>)
 8004cd0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd fdac 	bl	8002834 <HAL_DMA_Abort_IT>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cec:	4610      	mov	r0, r2
 8004cee:	4798      	blx	r3
 8004cf0:	e000      	b.n	8004cf4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cf2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d03e      	beq.n	8004d7c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d112      	bne.n	8004d32 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	d112      	bne.n	8004d66 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	f043 0204 	orr.w	r2, r3, #4
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f843 	bl	8004e10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004d8a:	e039      	b.n	8004e00 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d90:	d109      	bne.n	8004da6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2228      	movs	r2, #40	; 0x28
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff f830 	bl	8003e06 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b28      	cmp	r3, #40	; 0x28
 8004db0:	d111      	bne.n	8004dd6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <I2C_Slave_STOPF+0x25c>)
 8004db6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff f831 	bl	8003e36 <HAL_I2C_ListenCpltCallback>
}
 8004dd4:	e014      	b.n	8004e00 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	2b22      	cmp	r3, #34	; 0x22
 8004ddc:	d002      	beq.n	8004de4 <I2C_Slave_STOPF+0x234>
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	2b22      	cmp	r3, #34	; 0x22
 8004de2:	d10d      	bne.n	8004e00 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff f803 	bl	8003e06 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e00:	bf00      	nop
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	08005371 	.word	0x08005371
 8004e0c:	ffff0000 	.word	0xffff0000

08004e10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e28:	7bbb      	ldrb	r3, [r7, #14]
 8004e2a:	2b10      	cmp	r3, #16
 8004e2c:	d002      	beq.n	8004e34 <I2C_ITError+0x24>
 8004e2e:	7bbb      	ldrb	r3, [r7, #14]
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d10a      	bne.n	8004e4a <I2C_ITError+0x3a>
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	2b22      	cmp	r3, #34	; 0x22
 8004e38:	d107      	bne.n	8004e4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e50:	2b28      	cmp	r3, #40	; 0x28
 8004e52:	d107      	bne.n	8004e64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2228      	movs	r2, #40	; 0x28
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e62:	e015      	b.n	8004e90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e72:	d00a      	beq.n	8004e8a <I2C_ITError+0x7a>
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b60      	cmp	r3, #96	; 0x60
 8004e78:	d007      	beq.n	8004e8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e9e:	d162      	bne.n	8004f66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d020      	beq.n	8004f00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec2:	4a6a      	ldr	r2, [pc, #424]	; (800506c <I2C_ITError+0x25c>)
 8004ec4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fd fcb2 	bl	8002834 <HAL_DMA_Abort_IT>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8089 	beq.w	8004fea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004efa:	4610      	mov	r0, r2
 8004efc:	4798      	blx	r3
 8004efe:	e074      	b.n	8004fea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	4a59      	ldr	r2, [pc, #356]	; (800506c <I2C_ITError+0x25c>)
 8004f06:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fd fc91 	bl	8002834 <HAL_DMA_Abort_IT>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d068      	beq.n	8004fea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d10b      	bne.n	8004f3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0201 	bic.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f60:	4610      	mov	r0, r2
 8004f62:	4798      	blx	r3
 8004f64:	e041      	b.n	8004fea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b60      	cmp	r3, #96	; 0x60
 8004f70:	d125      	bne.n	8004fbe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d10b      	bne.n	8004fa6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0201 	bic.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fe ff5b 	bl	8003e72 <HAL_I2C_AbortCpltCallback>
 8004fbc:	e015      	b.n	8004fea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc8:	2b40      	cmp	r3, #64	; 0x40
 8004fca:	d10b      	bne.n	8004fe4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691a      	ldr	r2, [r3, #16]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fe ff3a 	bl	8003e5e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10e      	bne.n	8005018 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800500a:	2b00      	cmp	r3, #0
 800500c:	d104      	bne.n	8005018 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005026:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b04      	cmp	r3, #4
 800503a:	d113      	bne.n	8005064 <I2C_ITError+0x254>
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	2b28      	cmp	r3, #40	; 0x28
 8005040:	d110      	bne.n	8005064 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a0a      	ldr	r2, [pc, #40]	; (8005070 <I2C_ITError+0x260>)
 8005046:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fe fee9 	bl	8003e36 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	08005371 	.word	0x08005371
 8005070:	ffff0000 	.word	0xffff0000

08005074 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	4608      	mov	r0, r1
 800507e:	4611      	mov	r1, r2
 8005080:	461a      	mov	r2, r3
 8005082:	4603      	mov	r3, r0
 8005084:	817b      	strh	r3, [r7, #10]
 8005086:	460b      	mov	r3, r1
 8005088:	813b      	strh	r3, [r7, #8]
 800508a:	4613      	mov	r3, r2
 800508c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800509c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fa08 	bl	80054c0 <I2C_WaitOnFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00d      	beq.n	80050d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c4:	d103      	bne.n	80050ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e05f      	b.n	8005192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050d2:	897b      	ldrh	r3, [r7, #10]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	6a3a      	ldr	r2, [r7, #32]
 80050e6:	492d      	ldr	r1, [pc, #180]	; (800519c <I2C_RequestMemoryWrite+0x128>)
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fa40 	bl	800556e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e04c      	b.n	8005192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800510e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005110:	6a39      	ldr	r1, [r7, #32]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 faaa 	bl	800566c <I2C_WaitOnTXEFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00d      	beq.n	800513a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	2b04      	cmp	r3, #4
 8005124:	d107      	bne.n	8005136 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005134:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e02b      	b.n	8005192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800513a:	88fb      	ldrh	r3, [r7, #6]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d105      	bne.n	800514c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005140:	893b      	ldrh	r3, [r7, #8]
 8005142:	b2da      	uxtb	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	611a      	str	r2, [r3, #16]
 800514a:	e021      	b.n	8005190 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800514c:	893b      	ldrh	r3, [r7, #8]
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	b29b      	uxth	r3, r3
 8005152:	b2da      	uxtb	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800515a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800515c:	6a39      	ldr	r1, [r7, #32]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fa84 	bl	800566c <I2C_WaitOnTXEFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00d      	beq.n	8005186 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	2b04      	cmp	r3, #4
 8005170:	d107      	bne.n	8005182 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005180:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e005      	b.n	8005192 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005186:	893b      	ldrh	r3, [r7, #8]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	00010002 	.word	0x00010002

080051a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	4608      	mov	r0, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	461a      	mov	r2, r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	817b      	strh	r3, [r7, #10]
 80051b2:	460b      	mov	r3, r1
 80051b4:	813b      	strh	r3, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f96a 	bl	80054c0 <I2C_WaitOnFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005200:	d103      	bne.n	800520a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005208:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e0aa      	b.n	8005364 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800520e:	897b      	ldrh	r3, [r7, #10]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	461a      	mov	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800521c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	6a3a      	ldr	r2, [r7, #32]
 8005222:	4952      	ldr	r1, [pc, #328]	; (800536c <I2C_RequestMemoryRead+0x1cc>)
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f9a2 	bl	800556e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e097      	b.n	8005364 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800524a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524c:	6a39      	ldr	r1, [r7, #32]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fa0c 	bl	800566c <I2C_WaitOnTXEFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00d      	beq.n	8005276 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	2b04      	cmp	r3, #4
 8005260:	d107      	bne.n	8005272 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005270:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e076      	b.n	8005364 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d105      	bne.n	8005288 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800527c:	893b      	ldrh	r3, [r7, #8]
 800527e:	b2da      	uxtb	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	611a      	str	r2, [r3, #16]
 8005286:	e021      	b.n	80052cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005288:	893b      	ldrh	r3, [r7, #8]
 800528a:	0a1b      	lsrs	r3, r3, #8
 800528c:	b29b      	uxth	r3, r3
 800528e:	b2da      	uxtb	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005298:	6a39      	ldr	r1, [r7, #32]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f9e6 	bl	800566c <I2C_WaitOnTXEFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00d      	beq.n	80052c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d107      	bne.n	80052be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e050      	b.n	8005364 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052c2:	893b      	ldrh	r3, [r7, #8]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ce:	6a39      	ldr	r1, [r7, #32]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f9cb 	bl	800566c <I2C_WaitOnTXEFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00d      	beq.n	80052f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d107      	bne.n	80052f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e035      	b.n	8005364 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005306:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	2200      	movs	r2, #0
 8005310:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f8d3 	bl	80054c0 <I2C_WaitOnFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00d      	beq.n	800533c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532e:	d103      	bne.n	8005338 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005336:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e013      	b.n	8005364 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800533c:	897b      	ldrh	r3, [r7, #10]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	b2da      	uxtb	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	6a3a      	ldr	r2, [r7, #32]
 8005350:	4906      	ldr	r1, [pc, #24]	; (800536c <I2C_RequestMemoryRead+0x1cc>)
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f90b 	bl	800556e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	00010002 	.word	0x00010002

08005370 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800538a:	4b4b      	ldr	r3, [pc, #300]	; (80054b8 <I2C_DMAAbort+0x148>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	08db      	lsrs	r3, r3, #3
 8005390:	4a4a      	ldr	r2, [pc, #296]	; (80054bc <I2C_DMAAbort+0x14c>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	0a1a      	lsrs	r2, r3, #8
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	00da      	lsls	r2, r3, #3
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f043 0220 	orr.w	r2, r3, #32
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80053b6:	e00a      	b.n	80053ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053cc:	d0ea      	beq.n	80053a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053da:	2200      	movs	r2, #0
 80053dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	2200      	movs	r2, #0
 80053ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2200      	movs	r2, #0
 8005402:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005410:	2200      	movs	r2, #0
 8005412:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	2200      	movs	r2, #0
 8005422:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0201 	bic.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b60      	cmp	r3, #96	; 0x60
 800543e:	d10e      	bne.n	800545e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2200      	movs	r2, #0
 8005454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005456:	6978      	ldr	r0, [r7, #20]
 8005458:	f7fe fd0b 	bl	8003e72 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800545c:	e027      	b.n	80054ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800545e:	7cfb      	ldrb	r3, [r7, #19]
 8005460:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005464:	2b28      	cmp	r3, #40	; 0x28
 8005466:	d117      	bne.n	8005498 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005486:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2200      	movs	r2, #0
 800548c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2228      	movs	r2, #40	; 0x28
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005496:	e007      	b.n	80054a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80054a8:	6978      	ldr	r0, [r7, #20]
 80054aa:	f7fe fcd8 	bl	8003e5e <HAL_I2C_ErrorCallback>
}
 80054ae:	bf00      	nop
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000008 	.word	0x20000008
 80054bc:	14f8b589 	.word	0x14f8b589

080054c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054d0:	e025      	b.n	800551e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d8:	d021      	beq.n	800551e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054da:	f7fc ff87 	bl	80023ec <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d302      	bcc.n	80054f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d116      	bne.n	800551e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f043 0220 	orr.w	r2, r3, #32
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e023      	b.n	8005566 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	0c1b      	lsrs	r3, r3, #16
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	d10d      	bne.n	8005544 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	43da      	mvns	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4013      	ands	r3, r2
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	bf0c      	ite	eq
 800553a:	2301      	moveq	r3, #1
 800553c:	2300      	movne	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	e00c      	b.n	800555e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	43da      	mvns	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4013      	ands	r3, r2
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	bf0c      	ite	eq
 8005556:	2301      	moveq	r3, #1
 8005558:	2300      	movne	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	429a      	cmp	r2, r3
 8005562:	d0b6      	beq.n	80054d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800557c:	e051      	b.n	8005622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558c:	d123      	bne.n	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f043 0204 	orr.w	r2, r3, #4
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e046      	b.n	8005664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055dc:	d021      	beq.n	8005622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055de:	f7fc ff05 	bl	80023ec <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d302      	bcc.n	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d116      	bne.n	8005622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e020      	b.n	8005664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d10c      	bne.n	8005646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	43da      	mvns	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4013      	ands	r3, r2
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	bf14      	ite	ne
 800563e:	2301      	movne	r3, #1
 8005640:	2300      	moveq	r3, #0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	e00b      	b.n	800565e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	43da      	mvns	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	4013      	ands	r3, r2
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	bf14      	ite	ne
 8005658:	2301      	movne	r3, #1
 800565a:	2300      	moveq	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d18d      	bne.n	800557e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005678:	e02d      	b.n	80056d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 f900 	bl	8005880 <I2C_IsAcknowledgeFailed>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e02d      	b.n	80056e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d021      	beq.n	80056d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005692:	f7fc feab 	bl	80023ec <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d302      	bcc.n	80056a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d116      	bne.n	80056d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f043 0220 	orr.w	r2, r3, #32
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e007      	b.n	80056e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e0:	2b80      	cmp	r3, #128	; 0x80
 80056e2:	d1ca      	bne.n	800567a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056fa:	e02d      	b.n	8005758 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 f8bf 	bl	8005880 <I2C_IsAcknowledgeFailed>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e02d      	b.n	8005768 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d021      	beq.n	8005758 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005714:	f7fc fe6a 	bl	80023ec <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	429a      	cmp	r2, r3
 8005722:	d302      	bcc.n	800572a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d116      	bne.n	8005758 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	f043 0220 	orr.w	r2, r3, #32
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e007      	b.n	8005768 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b04      	cmp	r3, #4
 8005764:	d1ca      	bne.n	80056fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800577c:	4b13      	ldr	r3, [pc, #76]	; (80057cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	08db      	lsrs	r3, r3, #3
 8005782:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005784:	fba2 2303 	umull	r2, r3, r2, r3
 8005788:	0a1a      	lsrs	r2, r3, #8
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3b01      	subs	r3, #1
 8005796:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d107      	bne.n	80057ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e008      	b.n	80057c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057bc:	d0e9      	beq.n	8005792 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000008 	.word	0x20000008
 80057d0:	14f8b589 	.word	0x14f8b589

080057d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057e0:	e042      	b.n	8005868 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d119      	bne.n	8005824 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0210 	mvn.w	r2, #16
 80057f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e029      	b.n	8005878 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005824:	f7fc fde2 	bl	80023ec <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	429a      	cmp	r2, r3
 8005832:	d302      	bcc.n	800583a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d116      	bne.n	8005868 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f043 0220 	orr.w	r2, r3, #32
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e007      	b.n	8005878 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b40      	cmp	r3, #64	; 0x40
 8005874:	d1b5      	bne.n	80057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005896:	d11b      	bne.n	80058d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	f043 0204 	orr.w	r2, r3, #4
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80058ee:	d103      	bne.n	80058f8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80058f6:	e007      	b.n	8005908 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005900:	d102      	bne.n	8005908 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2208      	movs	r2, #8
 8005906:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e267      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d075      	beq.n	8005a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005932:	4b88      	ldr	r3, [pc, #544]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	2b04      	cmp	r3, #4
 800593c:	d00c      	beq.n	8005958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800593e:	4b85      	ldr	r3, [pc, #532]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005946:	2b08      	cmp	r3, #8
 8005948:	d112      	bne.n	8005970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800594a:	4b82      	ldr	r3, [pc, #520]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005956:	d10b      	bne.n	8005970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005958:	4b7e      	ldr	r3, [pc, #504]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d05b      	beq.n	8005a1c <HAL_RCC_OscConfig+0x108>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d157      	bne.n	8005a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e242      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005978:	d106      	bne.n	8005988 <HAL_RCC_OscConfig+0x74>
 800597a:	4b76      	ldr	r3, [pc, #472]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a75      	ldr	r2, [pc, #468]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	e01d      	b.n	80059c4 <HAL_RCC_OscConfig+0xb0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005990:	d10c      	bne.n	80059ac <HAL_RCC_OscConfig+0x98>
 8005992:	4b70      	ldr	r3, [pc, #448]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a6f      	ldr	r2, [pc, #444]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	4b6d      	ldr	r3, [pc, #436]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a6c      	ldr	r2, [pc, #432]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	e00b      	b.n	80059c4 <HAL_RCC_OscConfig+0xb0>
 80059ac:	4b69      	ldr	r3, [pc, #420]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a68      	ldr	r2, [pc, #416]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	4b66      	ldr	r3, [pc, #408]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a65      	ldr	r2, [pc, #404]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d013      	beq.n	80059f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059cc:	f7fc fd0e 	bl	80023ec <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059d4:	f7fc fd0a 	bl	80023ec <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b64      	cmp	r3, #100	; 0x64
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e207      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e6:	4b5b      	ldr	r3, [pc, #364]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0xc0>
 80059f2:	e014      	b.n	8005a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f4:	f7fc fcfa 	bl	80023ec <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059fc:	f7fc fcf6 	bl	80023ec <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b64      	cmp	r3, #100	; 0x64
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e1f3      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a0e:	4b51      	ldr	r3, [pc, #324]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0xe8>
 8005a1a:	e000      	b.n	8005a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d063      	beq.n	8005af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a2a:	4b4a      	ldr	r3, [pc, #296]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a36:	4b47      	ldr	r3, [pc, #284]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d11c      	bne.n	8005a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a42:	4b44      	ldr	r3, [pc, #272]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d116      	bne.n	8005a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a4e:	4b41      	ldr	r3, [pc, #260]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_RCC_OscConfig+0x152>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d001      	beq.n	8005a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e1c7      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a66:	4b3b      	ldr	r3, [pc, #236]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4937      	ldr	r1, [pc, #220]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7a:	e03a      	b.n	8005af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d020      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a84:	4b34      	ldr	r3, [pc, #208]	; (8005b58 <HAL_RCC_OscConfig+0x244>)
 8005a86:	2201      	movs	r2, #1
 8005a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8a:	f7fc fcaf 	bl	80023ec <HAL_GetTick>
 8005a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a90:	e008      	b.n	8005aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a92:	f7fc fcab 	bl	80023ec <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e1a8      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa4:	4b2b      	ldr	r3, [pc, #172]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0f0      	beq.n	8005a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab0:	4b28      	ldr	r3, [pc, #160]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	4925      	ldr	r1, [pc, #148]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	600b      	str	r3, [r1, #0]
 8005ac4:	e015      	b.n	8005af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ac6:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <HAL_RCC_OscConfig+0x244>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fc fc8e 	bl	80023ec <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ad4:	f7fc fc8a 	bl	80023ec <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e187      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ae6:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d036      	beq.n	8005b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b06:	4b15      	ldr	r3, [pc, #84]	; (8005b5c <HAL_RCC_OscConfig+0x248>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0c:	f7fc fc6e 	bl	80023ec <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b14:	f7fc fc6a 	bl	80023ec <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e167      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b26:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0x200>
 8005b32:	e01b      	b.n	8005b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b34:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <HAL_RCC_OscConfig+0x248>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b3a:	f7fc fc57 	bl	80023ec <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b40:	e00e      	b.n	8005b60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b42:	f7fc fc53 	bl	80023ec <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d907      	bls.n	8005b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e150      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
 8005b54:	40023800 	.word	0x40023800
 8005b58:	42470000 	.word	0x42470000
 8005b5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b60:	4b88      	ldr	r3, [pc, #544]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ea      	bne.n	8005b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8097 	beq.w	8005ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b7e:	4b81      	ldr	r3, [pc, #516]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10f      	bne.n	8005baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	4b7d      	ldr	r3, [pc, #500]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	4a7c      	ldr	r2, [pc, #496]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b98:	6413      	str	r3, [r2, #64]	; 0x40
 8005b9a:	4b7a      	ldr	r3, [pc, #488]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005baa:	4b77      	ldr	r3, [pc, #476]	; (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d118      	bne.n	8005be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bb6:	4b74      	ldr	r3, [pc, #464]	; (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a73      	ldr	r2, [pc, #460]	; (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bc2:	f7fc fc13 	bl	80023ec <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bca:	f7fc fc0f 	bl	80023ec <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e10c      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bdc:	4b6a      	ldr	r3, [pc, #424]	; (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f0      	beq.n	8005bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d106      	bne.n	8005bfe <HAL_RCC_OscConfig+0x2ea>
 8005bf0:	4b64      	ldr	r3, [pc, #400]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf4:	4a63      	ldr	r2, [pc, #396]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8005bfc:	e01c      	b.n	8005c38 <HAL_RCC_OscConfig+0x324>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d10c      	bne.n	8005c20 <HAL_RCC_OscConfig+0x30c>
 8005c06:	4b5f      	ldr	r3, [pc, #380]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	4a5e      	ldr	r2, [pc, #376]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	f043 0304 	orr.w	r3, r3, #4
 8005c10:	6713      	str	r3, [r2, #112]	; 0x70
 8005c12:	4b5c      	ldr	r3, [pc, #368]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	4a5b      	ldr	r2, [pc, #364]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c1e:	e00b      	b.n	8005c38 <HAL_RCC_OscConfig+0x324>
 8005c20:	4b58      	ldr	r3, [pc, #352]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c24:	4a57      	ldr	r2, [pc, #348]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c26:	f023 0301 	bic.w	r3, r3, #1
 8005c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c2c:	4b55      	ldr	r3, [pc, #340]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	4a54      	ldr	r2, [pc, #336]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c32:	f023 0304 	bic.w	r3, r3, #4
 8005c36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d015      	beq.n	8005c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c40:	f7fc fbd4 	bl	80023ec <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c46:	e00a      	b.n	8005c5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c48:	f7fc fbd0 	bl	80023ec <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e0cb      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5e:	4b49      	ldr	r3, [pc, #292]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0ee      	beq.n	8005c48 <HAL_RCC_OscConfig+0x334>
 8005c6a:	e014      	b.n	8005c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6c:	f7fc fbbe 	bl	80023ec <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c72:	e00a      	b.n	8005c8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c74:	f7fc fbba 	bl	80023ec <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e0b5      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c8a:	4b3e      	ldr	r3, [pc, #248]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1ee      	bne.n	8005c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d105      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c9c:	4b39      	ldr	r3, [pc, #228]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	4a38      	ldr	r2, [pc, #224]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ca6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80a1 	beq.w	8005df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cb2:	4b34      	ldr	r3, [pc, #208]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d05c      	beq.n	8005d78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d141      	bne.n	8005d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc6:	4b31      	ldr	r3, [pc, #196]	; (8005d8c <HAL_RCC_OscConfig+0x478>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ccc:	f7fc fb8e 	bl	80023ec <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cd4:	f7fc fb8a 	bl	80023ec <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e087      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce6:	4b27      	ldr	r3, [pc, #156]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69da      	ldr	r2, [r3, #28]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	019b      	lsls	r3, r3, #6
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	061b      	lsls	r3, r3, #24
 8005d16:	491b      	ldr	r1, [pc, #108]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <HAL_RCC_OscConfig+0x478>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d22:	f7fc fb63 	bl	80023ec <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d2a:	f7fc fb5f 	bl	80023ec <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e05c      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCC_OscConfig+0x416>
 8005d48:	e054      	b.n	8005df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4a:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <HAL_RCC_OscConfig+0x478>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d50:	f7fc fb4c 	bl	80023ec <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d58:	f7fc fb48 	bl	80023ec <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e045      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6a:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x444>
 8005d76:	e03d      	b.n	8005df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d107      	bne.n	8005d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e038      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
 8005d84:	40023800 	.word	0x40023800
 8005d88:	40007000 	.word	0x40007000
 8005d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d90:	4b1b      	ldr	r3, [pc, #108]	; (8005e00 <HAL_RCC_OscConfig+0x4ec>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d028      	beq.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d121      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d11a      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d111      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d107      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d001      	beq.n	8005df4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40023800 	.word	0x40023800

08005e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0cc      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e18:	4b68      	ldr	r3, [pc, #416]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d90c      	bls.n	8005e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e26:	4b65      	ldr	r3, [pc, #404]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2e:	4b63      	ldr	r3, [pc, #396]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e0b8      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d020      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e58:	4b59      	ldr	r3, [pc, #356]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4a58      	ldr	r2, [pc, #352]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e70:	4b53      	ldr	r3, [pc, #332]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	4a52      	ldr	r2, [pc, #328]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e7c:	4b50      	ldr	r3, [pc, #320]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	494d      	ldr	r1, [pc, #308]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d044      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea2:	4b47      	ldr	r3, [pc, #284]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d119      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e07f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d107      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec2:	4b3f      	ldr	r3, [pc, #252]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e06f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed2:	4b3b      	ldr	r3, [pc, #236]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e067      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ee2:	4b37      	ldr	r3, [pc, #220]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f023 0203 	bic.w	r2, r3, #3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	4934      	ldr	r1, [pc, #208]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef4:	f7fc fa7a 	bl	80023ec <HAL_GetTick>
 8005ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efa:	e00a      	b.n	8005f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005efc:	f7fc fa76 	bl	80023ec <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e04f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f12:	4b2b      	ldr	r3, [pc, #172]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 020c 	and.w	r2, r3, #12
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d1eb      	bne.n	8005efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f24:	4b25      	ldr	r3, [pc, #148]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d20c      	bcs.n	8005f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f32:	4b22      	ldr	r3, [pc, #136]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	4b20      	ldr	r3, [pc, #128]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e032      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d008      	beq.n	8005f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f58:	4b19      	ldr	r3, [pc, #100]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4916      	ldr	r1, [pc, #88]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f76:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	490e      	ldr	r1, [pc, #56]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f8a:	f000 f821 	bl	8005fd0 <HAL_RCC_GetSysClockFreq>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	490a      	ldr	r1, [pc, #40]	; (8005fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f9c:	5ccb      	ldrb	r3, [r1, r3]
 8005f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa2:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <HAL_RCC_ClockConfig+0x1c8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fc f9da 	bl	8002364 <HAL_InitTick>

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	40023c00 	.word	0x40023c00
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	0800bb84 	.word	0x0800bb84
 8005fc8:	20000008 	.word	0x20000008
 8005fcc:	2000000c 	.word	0x2000000c

08005fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd4:	b090      	sub	sp, #64	; 0x40
 8005fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	637b      	str	r3, [r7, #52]	; 0x34
 8005fdc:	2300      	movs	r3, #0
 8005fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fe8:	4b59      	ldr	r3, [pc, #356]	; (8006150 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 030c 	and.w	r3, r3, #12
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d00d      	beq.n	8006010 <HAL_RCC_GetSysClockFreq+0x40>
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	f200 80a1 	bhi.w	800613c <HAL_RCC_GetSysClockFreq+0x16c>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_RCC_GetSysClockFreq+0x34>
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d003      	beq.n	800600a <HAL_RCC_GetSysClockFreq+0x3a>
 8006002:	e09b      	b.n	800613c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006004:	4b53      	ldr	r3, [pc, #332]	; (8006154 <HAL_RCC_GetSysClockFreq+0x184>)
 8006006:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006008:	e09b      	b.n	8006142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800600a:	4b53      	ldr	r3, [pc, #332]	; (8006158 <HAL_RCC_GetSysClockFreq+0x188>)
 800600c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800600e:	e098      	b.n	8006142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006010:	4b4f      	ldr	r3, [pc, #316]	; (8006150 <HAL_RCC_GetSysClockFreq+0x180>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800601a:	4b4d      	ldr	r3, [pc, #308]	; (8006150 <HAL_RCC_GetSysClockFreq+0x180>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d028      	beq.n	8006078 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006026:	4b4a      	ldr	r3, [pc, #296]	; (8006150 <HAL_RCC_GetSysClockFreq+0x180>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	099b      	lsrs	r3, r3, #6
 800602c:	2200      	movs	r2, #0
 800602e:	623b      	str	r3, [r7, #32]
 8006030:	627a      	str	r2, [r7, #36]	; 0x24
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006038:	2100      	movs	r1, #0
 800603a:	4b47      	ldr	r3, [pc, #284]	; (8006158 <HAL_RCC_GetSysClockFreq+0x188>)
 800603c:	fb03 f201 	mul.w	r2, r3, r1
 8006040:	2300      	movs	r3, #0
 8006042:	fb00 f303 	mul.w	r3, r0, r3
 8006046:	4413      	add	r3, r2
 8006048:	4a43      	ldr	r2, [pc, #268]	; (8006158 <HAL_RCC_GetSysClockFreq+0x188>)
 800604a:	fba0 1202 	umull	r1, r2, r0, r2
 800604e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006050:	460a      	mov	r2, r1
 8006052:	62ba      	str	r2, [r7, #40]	; 0x28
 8006054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006056:	4413      	add	r3, r2
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605c:	2200      	movs	r2, #0
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	61fa      	str	r2, [r7, #28]
 8006062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006066:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800606a:	f7fa fe15 	bl	8000c98 <__aeabi_uldivmod>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4613      	mov	r3, r2
 8006074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006076:	e053      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006078:	4b35      	ldr	r3, [pc, #212]	; (8006150 <HAL_RCC_GetSysClockFreq+0x180>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	099b      	lsrs	r3, r3, #6
 800607e:	2200      	movs	r2, #0
 8006080:	613b      	str	r3, [r7, #16]
 8006082:	617a      	str	r2, [r7, #20]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800608a:	f04f 0b00 	mov.w	fp, #0
 800608e:	4652      	mov	r2, sl
 8006090:	465b      	mov	r3, fp
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f04f 0100 	mov.w	r1, #0
 800609a:	0159      	lsls	r1, r3, #5
 800609c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060a0:	0150      	lsls	r0, r2, #5
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	ebb2 080a 	subs.w	r8, r2, sl
 80060aa:	eb63 090b 	sbc.w	r9, r3, fp
 80060ae:	f04f 0200 	mov.w	r2, #0
 80060b2:	f04f 0300 	mov.w	r3, #0
 80060b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80060ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80060be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80060c2:	ebb2 0408 	subs.w	r4, r2, r8
 80060c6:	eb63 0509 	sbc.w	r5, r3, r9
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	00eb      	lsls	r3, r5, #3
 80060d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060d8:	00e2      	lsls	r2, r4, #3
 80060da:	4614      	mov	r4, r2
 80060dc:	461d      	mov	r5, r3
 80060de:	eb14 030a 	adds.w	r3, r4, sl
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	eb45 030b 	adc.w	r3, r5, fp
 80060e8:	607b      	str	r3, [r7, #4]
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060f6:	4629      	mov	r1, r5
 80060f8:	028b      	lsls	r3, r1, #10
 80060fa:	4621      	mov	r1, r4
 80060fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006100:	4621      	mov	r1, r4
 8006102:	028a      	lsls	r2, r1, #10
 8006104:	4610      	mov	r0, r2
 8006106:	4619      	mov	r1, r3
 8006108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610a:	2200      	movs	r2, #0
 800610c:	60bb      	str	r3, [r7, #8]
 800610e:	60fa      	str	r2, [r7, #12]
 8006110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006114:	f7fa fdc0 	bl	8000c98 <__aeabi_uldivmod>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4613      	mov	r3, r2
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <HAL_RCC_GetSysClockFreq+0x180>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	0c1b      	lsrs	r3, r3, #16
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	3301      	adds	r3, #1
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	fbb2 f3f3 	udiv	r3, r2, r3
 8006138:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800613a:	e002      	b.n	8006142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <HAL_RCC_GetSysClockFreq+0x184>)
 800613e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006144:	4618      	mov	r0, r3
 8006146:	3740      	adds	r7, #64	; 0x40
 8006148:	46bd      	mov	sp, r7
 800614a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800614e:	bf00      	nop
 8006150:	40023800 	.word	0x40023800
 8006154:	00f42400 	.word	0x00f42400
 8006158:	017d7840 	.word	0x017d7840

0800615c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006160:	4b03      	ldr	r3, [pc, #12]	; (8006170 <HAL_RCC_GetHCLKFreq+0x14>)
 8006162:	681b      	ldr	r3, [r3, #0]
}
 8006164:	4618      	mov	r0, r3
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	20000008 	.word	0x20000008

08006174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006178:	f7ff fff0 	bl	800615c <HAL_RCC_GetHCLKFreq>
 800617c:	4602      	mov	r2, r0
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	0a9b      	lsrs	r3, r3, #10
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	4903      	ldr	r1, [pc, #12]	; (8006198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800618a:	5ccb      	ldrb	r3, [r1, r3]
 800618c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006190:	4618      	mov	r0, r3
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40023800 	.word	0x40023800
 8006198:	0800bb94 	.word	0x0800bb94

0800619c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061a0:	f7ff ffdc 	bl	800615c <HAL_RCC_GetHCLKFreq>
 80061a4:	4602      	mov	r2, r0
 80061a6:	4b05      	ldr	r3, [pc, #20]	; (80061bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	0b5b      	lsrs	r3, r3, #13
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	4903      	ldr	r1, [pc, #12]	; (80061c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061b2:	5ccb      	ldrb	r3, [r1, r3]
 80061b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40023800 	.word	0x40023800
 80061c0:	0800bb94 	.word	0x0800bb94

080061c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d105      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d038      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061ec:	4b68      	ldr	r3, [pc, #416]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061f2:	f7fc f8fb 	bl	80023ec <HAL_GetTick>
 80061f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061f8:	e008      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061fa:	f7fc f8f7 	bl	80023ec <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e0bd      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800620c:	4b61      	ldr	r3, [pc, #388]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1f0      	bne.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	019b      	lsls	r3, r3, #6
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	071b      	lsls	r3, r3, #28
 800622a:	495a      	ldr	r1, [pc, #360]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800622c:	4313      	orrs	r3, r2
 800622e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006232:	4b57      	ldr	r3, [pc, #348]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006238:	f7fc f8d8 	bl	80023ec <HAL_GetTick>
 800623c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006240:	f7fc f8d4 	bl	80023ec <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e09a      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006252:	4b50      	ldr	r3, [pc, #320]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 8083 	beq.w	8006372 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800626c:	2300      	movs	r3, #0
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	4b48      	ldr	r3, [pc, #288]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	4a47      	ldr	r2, [pc, #284]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800627a:	6413      	str	r3, [r2, #64]	; 0x40
 800627c:	4b45      	ldr	r3, [pc, #276]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006288:	4b43      	ldr	r3, [pc, #268]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a42      	ldr	r2, [pc, #264]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800628e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006292:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006294:	f7fc f8aa 	bl	80023ec <HAL_GetTick>
 8006298:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800629c:	f7fc f8a6 	bl	80023ec <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e06c      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80062ae:	4b3a      	ldr	r3, [pc, #232]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0f0      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062ba:	4b36      	ldr	r3, [pc, #216]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d02f      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d028      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062d8:	4b2e      	ldr	r3, [pc, #184]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062e2:	4b2e      	ldr	r3, [pc, #184]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062e4:	2201      	movs	r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062e8:	4b2c      	ldr	r3, [pc, #176]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80062ee:	4a29      	ldr	r2, [pc, #164]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062f4:	4b27      	ldr	r3, [pc, #156]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d114      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006300:	f7fc f874 	bl	80023ec <HAL_GetTick>
 8006304:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006306:	e00a      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006308:	f7fc f870 	bl	80023ec <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	; 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e034      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631e:	4b1d      	ldr	r3, [pc, #116]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0ee      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006336:	d10d      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006338:	4b16      	ldr	r3, [pc, #88]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800634c:	4911      	ldr	r1, [pc, #68]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800634e:	4313      	orrs	r3, r2
 8006350:	608b      	str	r3, [r1, #8]
 8006352:	e005      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006354:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	4a0e      	ldr	r2, [pc, #56]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800635a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800635e:	6093      	str	r3, [r2, #8]
 8006360:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800636c:	4909      	ldr	r1, [pc, #36]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800636e:	4313      	orrs	r3, r2
 8006370:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	7d1a      	ldrb	r2, [r3, #20]
 8006382:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006384:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	42470068 	.word	0x42470068
 8006394:	40023800 	.word	0x40023800
 8006398:	40007000 	.word	0x40007000
 800639c:	42470e40 	.word	0x42470e40
 80063a0:	424711e0 	.word	0x424711e0

080063a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e066      	b.n	8006488 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	7f5b      	ldrb	r3, [r3, #29]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d105      	bne.n	80063d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fb fd7a 	bl	8001ec4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	22ca      	movs	r2, #202	; 0xca
 80063dc:	625a      	str	r2, [r3, #36]	; 0x24
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2253      	movs	r2, #83	; 0x53
 80063e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f87a 	bl	80064e0 <RTC_EnterInitMode>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d12c      	bne.n	8006450 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6812      	ldr	r2, [r2, #0]
 8006400:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006408:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6899      	ldr	r1, [r3, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	68d2      	ldr	r2, [r2, #12]
 8006430:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6919      	ldr	r1, [r3, #16]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	041a      	lsls	r2, r3, #16
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f881 	bl	800654e <RTC_ExitInitMode>
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d113      	bne.n	800647e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006464:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699a      	ldr	r2, [r3, #24]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	22ff      	movs	r2, #255	; 0xff
 8006484:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006486:	7bfb      	ldrb	r3, [r7, #15]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064aa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064ac:	f7fb ff9e 	bl	80023ec <HAL_GetTick>
 80064b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80064b2:	e009      	b.n	80064c8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064b4:	f7fb ff9a 	bl	80023ec <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064c2:	d901      	bls.n	80064c8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e007      	b.n	80064d8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0ee      	beq.n	80064b4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d122      	bne.n	8006544 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800650c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800650e:	f7fb ff6d 	bl	80023ec <HAL_GetTick>
 8006512:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006514:	e00c      	b.n	8006530 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006516:	f7fb ff69 	bl	80023ec <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006524:	d904      	bls.n	8006530 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2204      	movs	r2, #4
 800652a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	d102      	bne.n	8006544 <RTC_EnterInitMode+0x64>
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d1e8      	bne.n	8006516 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006544:	7bfb      	ldrb	r3, [r7, #15]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006568:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 0320 	and.w	r3, r3, #32
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff ff89 	bl	8006490 <HAL_RTC_WaitForSynchro>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d004      	beq.n	800658e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2204      	movs	r2, #4
 8006588:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800658e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e03f      	b.n	800662a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fb fcac 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2224      	movs	r2, #36	; 0x24
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fb93 	bl	8006d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695a      	ldr	r2, [r3, #20]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2220      	movs	r2, #32
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08c      	sub	sp, #48	; 0x30
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	4613      	mov	r3, r2
 8006640:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b20      	cmp	r3, #32
 800664c:	d165      	bne.n	800671a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_UART_Transmit_DMA+0x26>
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e05e      	b.n	800671c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_UART_Transmit_DMA+0x38>
 8006668:	2302      	movs	r3, #2
 800666a:	e057      	b.n	800671c <HAL_UART_Transmit_DMA+0xe8>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	88fa      	ldrh	r2, [r7, #6]
 800667e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	88fa      	ldrh	r2, [r7, #6]
 8006684:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2221      	movs	r2, #33	; 0x21
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006698:	4a22      	ldr	r2, [pc, #136]	; (8006724 <HAL_UART_Transmit_DMA+0xf0>)
 800669a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a0:	4a21      	ldr	r2, [pc, #132]	; (8006728 <HAL_UART_Transmit_DMA+0xf4>)
 80066a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a8:	4a20      	ldr	r2, [pc, #128]	; (800672c <HAL_UART_Transmit_DMA+0xf8>)
 80066aa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b0:	2200      	movs	r2, #0
 80066b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80066b4:	f107 0308 	add.w	r3, r7, #8
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	6819      	ldr	r1, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3304      	adds	r3, #4
 80066c8:	461a      	mov	r2, r3
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	f7fc f85a 	bl	8002784 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066d8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3314      	adds	r3, #20
 80066e8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	617b      	str	r3, [r7, #20]
   return(result);
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3314      	adds	r3, #20
 8006700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006702:	627a      	str	r2, [r7, #36]	; 0x24
 8006704:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6a39      	ldr	r1, [r7, #32]
 8006708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e5      	bne.n	80066e2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e000      	b.n	800671c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800671a:	2302      	movs	r3, #2
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3730      	adds	r7, #48	; 0x30
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	0800680d 	.word	0x0800680d
 8006728:	080068a7 	.word	0x080068a7
 800672c:	08006a1f 	.word	0x08006a1f

08006730 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b20      	cmp	r3, #32
 8006748:	d11d      	bne.n	8006786 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <HAL_UART_Receive_DMA+0x26>
 8006750:	88fb      	ldrh	r3, [r7, #6]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e016      	b.n	8006788 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_UART_Receive_DMA+0x38>
 8006764:	2302      	movs	r3, #2
 8006766:	e00f      	b.n	8006788 <HAL_UART_Receive_DMA+0x58>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006776:	88fb      	ldrh	r3, [r7, #6]
 8006778:	461a      	mov	r2, r3
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 f999 	bl	8006ab4 <UART_Start_Receive_DMA>
 8006782:	4603      	mov	r3, r0
 8006784:	e000      	b.n	8006788 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006786:	2302      	movs	r3, #2
  }
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b090      	sub	sp, #64	; 0x40
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006824:	2b00      	cmp	r3, #0
 8006826:	d137      	bne.n	8006898 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682a:	2200      	movs	r2, #0
 800682c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800682e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3314      	adds	r3, #20
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	623b      	str	r3, [r7, #32]
   return(result);
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006844:	63bb      	str	r3, [r7, #56]	; 0x38
 8006846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3314      	adds	r3, #20
 800684c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800684e:	633a      	str	r2, [r7, #48]	; 0x30
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e5      	bne.n	800682e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	330c      	adds	r3, #12
 8006868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	60fb      	str	r3, [r7, #12]
   return(result);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006878:	637b      	str	r3, [r7, #52]	; 0x34
 800687a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	330c      	adds	r3, #12
 8006880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006882:	61fa      	str	r2, [r7, #28]
 8006884:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	69b9      	ldr	r1, [r7, #24]
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	617b      	str	r3, [r7, #20]
   return(result);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e5      	bne.n	8006862 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006896:	e002      	b.n	800689e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006898:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800689a:	f7ff ff79 	bl	8006790 <HAL_UART_TxCpltCallback>
}
 800689e:	bf00      	nop
 80068a0:	3740      	adds	r7, #64	; 0x40
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff ff75 	bl	80067a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b09c      	sub	sp, #112	; 0x70
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d172      	bne.n	80069c4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80068de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e0:	2200      	movs	r2, #0
 80068e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	330c      	adds	r3, #12
 80068ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80068fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	330c      	adds	r3, #12
 8006902:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006904:	65ba      	str	r2, [r7, #88]	; 0x58
 8006906:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800690a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e5      	bne.n	80068e4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3314      	adds	r3, #20
 800691e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	667b      	str	r3, [r7, #100]	; 0x64
 8006930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3314      	adds	r3, #20
 8006936:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006938:	647a      	str	r2, [r7, #68]	; 0x44
 800693a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800693e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e5      	bne.n	8006918 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800694c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3314      	adds	r3, #20
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	623b      	str	r3, [r7, #32]
   return(result);
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006962:	663b      	str	r3, [r7, #96]	; 0x60
 8006964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3314      	adds	r3, #20
 800696a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800696c:	633a      	str	r2, [r7, #48]	; 0x30
 800696e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e5      	bne.n	800694c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006982:	2220      	movs	r2, #32
 8006984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800698a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698c:	2b01      	cmp	r3, #1
 800698e:	d119      	bne.n	80069c4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	330c      	adds	r3, #12
 8006996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	60fb      	str	r3, [r7, #12]
   return(result);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0310 	bic.w	r3, r3, #16
 80069a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	330c      	adds	r3, #12
 80069ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069b0:	61fa      	str	r2, [r7, #28]
 80069b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	69b9      	ldr	r1, [r7, #24]
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	617b      	str	r3, [r7, #20]
   return(result);
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e5      	bne.n	8006990 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d106      	bne.n	80069da <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069d0:	4619      	mov	r1, r3
 80069d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80069d4:	f7ff ff0e 	bl	80067f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069d8:	e002      	b.n	80069e0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80069da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80069dc:	f7ff feec 	bl	80067b8 <HAL_UART_RxCpltCallback>
}
 80069e0:	bf00      	nop
 80069e2:	3770      	adds	r7, #112	; 0x70
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d108      	bne.n	8006a10 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a02:	085b      	lsrs	r3, r3, #1
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	4619      	mov	r1, r3
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f7ff fef3 	bl	80067f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a0e:	e002      	b.n	8006a16 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f7ff fedb 	bl	80067cc <HAL_UART_RxHalfCpltCallback>
}
 8006a16:	bf00      	nop
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	2b80      	cmp	r3, #128	; 0x80
 8006a3c:	bf0c      	ite	eq
 8006a3e:	2301      	moveq	r3, #1
 8006a40:	2300      	movne	r3, #0
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b21      	cmp	r3, #33	; 0x21
 8006a50:	d108      	bne.n	8006a64 <UART_DMAError+0x46>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d005      	beq.n	8006a64 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006a5e:	68b8      	ldr	r0, [r7, #8]
 8006a60:	f000 f8c6 	bl	8006bf0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b40      	cmp	r3, #64	; 0x40
 8006a70:	bf0c      	ite	eq
 8006a72:	2301      	moveq	r3, #1
 8006a74:	2300      	movne	r3, #0
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b22      	cmp	r3, #34	; 0x22
 8006a84:	d108      	bne.n	8006a98 <UART_DMAError+0x7a>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a92:	68b8      	ldr	r0, [r7, #8]
 8006a94:	f000 f8d4 	bl	8006c40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	f043 0210 	orr.w	r2, r3, #16
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006aa4:	68b8      	ldr	r0, [r7, #8]
 8006aa6:	f7ff fe9b 	bl	80067e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b098      	sub	sp, #96	; 0x60
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	88fa      	ldrh	r2, [r7, #6]
 8006acc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2222      	movs	r2, #34	; 0x22
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	4a40      	ldr	r2, [pc, #256]	; (8006be4 <UART_Start_Receive_DMA+0x130>)
 8006ae2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae8:	4a3f      	ldr	r2, [pc, #252]	; (8006be8 <UART_Start_Receive_DMA+0x134>)
 8006aea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	4a3e      	ldr	r2, [pc, #248]	; (8006bec <UART_Start_Receive_DMA+0x138>)
 8006af2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	2200      	movs	r2, #0
 8006afa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006afc:	f107 0308 	add.w	r3, r7, #8
 8006b00:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	88fb      	ldrh	r3, [r7, #6]
 8006b14:	f7fb fe36 	bl	8002784 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006b18:	2300      	movs	r3, #0
 8006b1a:	613b      	str	r3, [r7, #16]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d019      	beq.n	8006b72 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b54:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	330c      	adds	r3, #12
 8006b5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b5e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006b60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006b64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e5      	bne.n	8006b3e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3314      	adds	r3, #20
 8006b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	f043 0301 	orr.w	r3, r3, #1
 8006b88:	657b      	str	r3, [r7, #84]	; 0x54
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3314      	adds	r3, #20
 8006b90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b92:	63ba      	str	r2, [r7, #56]	; 0x38
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e5      	bne.n	8006b72 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3314      	adds	r3, #20
 8006bac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bbc:	653b      	str	r3, [r7, #80]	; 0x50
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3314      	adds	r3, #20
 8006bc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bc6:	627a      	str	r2, [r7, #36]	; 0x24
 8006bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6a39      	ldr	r1, [r7, #32]
 8006bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e5      	bne.n	8006ba6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3760      	adds	r7, #96	; 0x60
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	080068c3 	.word	0x080068c3
 8006be8:	080069e9 	.word	0x080069e9
 8006bec:	08006a1f 	.word	0x08006a1f

08006bf0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b089      	sub	sp, #36	; 0x24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c0e:	61fb      	str	r3, [r7, #28]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	330c      	adds	r3, #12
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	61ba      	str	r2, [r7, #24]
 8006c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	6979      	ldr	r1, [r7, #20]
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	613b      	str	r3, [r7, #16]
   return(result);
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e5      	bne.n	8006bf8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006c34:	bf00      	nop
 8006c36:	3724      	adds	r7, #36	; 0x24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b095      	sub	sp, #84	; 0x54
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	330c      	adds	r3, #12
 8006c4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	330c      	adds	r3, #12
 8006c66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c68:	643a      	str	r2, [r7, #64]	; 0x40
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e5      	bne.n	8006c48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3314      	adds	r3, #20
 8006c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	f023 0301 	bic.w	r3, r3, #1
 8006c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e5      	bne.n	8006c7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d119      	bne.n	8006cec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	330c      	adds	r3, #12
 8006cbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f023 0310 	bic.w	r3, r3, #16
 8006cce:	647b      	str	r3, [r7, #68]	; 0x44
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cd8:	61ba      	str	r2, [r7, #24]
 8006cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6979      	ldr	r1, [r7, #20]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e5      	bne.n	8006cb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006cfa:	bf00      	nop
 8006cfc:	3754      	adds	r7, #84	; 0x54
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d0c:	b0c0      	sub	sp, #256	; 0x100
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d24:	68d9      	ldr	r1, [r3, #12]
 8006d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	ea40 0301 	orr.w	r3, r0, r1
 8006d30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	431a      	orrs	r2, r3
 8006d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d60:	f021 010c 	bic.w	r1, r1, #12
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d6e:	430b      	orrs	r3, r1
 8006d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d82:	6999      	ldr	r1, [r3, #24]
 8006d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	ea40 0301 	orr.w	r3, r0, r1
 8006d8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	4b8f      	ldr	r3, [pc, #572]	; (8006fd4 <UART_SetConfig+0x2cc>)
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d005      	beq.n	8006da8 <UART_SetConfig+0xa0>
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4b8d      	ldr	r3, [pc, #564]	; (8006fd8 <UART_SetConfig+0x2d0>)
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d104      	bne.n	8006db2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006da8:	f7ff f9f8 	bl	800619c <HAL_RCC_GetPCLK2Freq>
 8006dac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006db0:	e003      	b.n	8006dba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006db2:	f7ff f9df 	bl	8006174 <HAL_RCC_GetPCLK1Freq>
 8006db6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc4:	f040 810c 	bne.w	8006fe0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006dd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006dd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006dda:	4622      	mov	r2, r4
 8006ddc:	462b      	mov	r3, r5
 8006dde:	1891      	adds	r1, r2, r2
 8006de0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006de2:	415b      	adcs	r3, r3
 8006de4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006de6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006dea:	4621      	mov	r1, r4
 8006dec:	eb12 0801 	adds.w	r8, r2, r1
 8006df0:	4629      	mov	r1, r5
 8006df2:	eb43 0901 	adc.w	r9, r3, r1
 8006df6:	f04f 0200 	mov.w	r2, #0
 8006dfa:	f04f 0300 	mov.w	r3, #0
 8006dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e0a:	4690      	mov	r8, r2
 8006e0c:	4699      	mov	r9, r3
 8006e0e:	4623      	mov	r3, r4
 8006e10:	eb18 0303 	adds.w	r3, r8, r3
 8006e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e18:	462b      	mov	r3, r5
 8006e1a:	eb49 0303 	adc.w	r3, r9, r3
 8006e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e36:	460b      	mov	r3, r1
 8006e38:	18db      	adds	r3, r3, r3
 8006e3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	eb42 0303 	adc.w	r3, r2, r3
 8006e42:	657b      	str	r3, [r7, #84]	; 0x54
 8006e44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e4c:	f7f9 ff24 	bl	8000c98 <__aeabi_uldivmod>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	4b61      	ldr	r3, [pc, #388]	; (8006fdc <UART_SetConfig+0x2d4>)
 8006e56:	fba3 2302 	umull	r2, r3, r3, r2
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	011c      	lsls	r4, r3, #4
 8006e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e70:	4642      	mov	r2, r8
 8006e72:	464b      	mov	r3, r9
 8006e74:	1891      	adds	r1, r2, r2
 8006e76:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e78:	415b      	adcs	r3, r3
 8006e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e80:	4641      	mov	r1, r8
 8006e82:	eb12 0a01 	adds.w	sl, r2, r1
 8006e86:	4649      	mov	r1, r9
 8006e88:	eb43 0b01 	adc.w	fp, r3, r1
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ea0:	4692      	mov	sl, r2
 8006ea2:	469b      	mov	fp, r3
 8006ea4:	4643      	mov	r3, r8
 8006ea6:	eb1a 0303 	adds.w	r3, sl, r3
 8006eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eae:	464b      	mov	r3, r9
 8006eb0:	eb4b 0303 	adc.w	r3, fp, r3
 8006eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ec4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ec8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	18db      	adds	r3, r3, r3
 8006ed0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	eb42 0303 	adc.w	r3, r2, r3
 8006ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8006eda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ede:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ee2:	f7f9 fed9 	bl	8000c98 <__aeabi_uldivmod>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	4611      	mov	r1, r2
 8006eec:	4b3b      	ldr	r3, [pc, #236]	; (8006fdc <UART_SetConfig+0x2d4>)
 8006eee:	fba3 2301 	umull	r2, r3, r3, r1
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	2264      	movs	r2, #100	; 0x64
 8006ef6:	fb02 f303 	mul.w	r3, r2, r3
 8006efa:	1acb      	subs	r3, r1, r3
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f02:	4b36      	ldr	r3, [pc, #216]	; (8006fdc <UART_SetConfig+0x2d4>)
 8006f04:	fba3 2302 	umull	r2, r3, r3, r2
 8006f08:	095b      	lsrs	r3, r3, #5
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f10:	441c      	add	r4, r3
 8006f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f24:	4642      	mov	r2, r8
 8006f26:	464b      	mov	r3, r9
 8006f28:	1891      	adds	r1, r2, r2
 8006f2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f2c:	415b      	adcs	r3, r3
 8006f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f34:	4641      	mov	r1, r8
 8006f36:	1851      	adds	r1, r2, r1
 8006f38:	6339      	str	r1, [r7, #48]	; 0x30
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	414b      	adcs	r3, r1
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f4c:	4659      	mov	r1, fp
 8006f4e:	00cb      	lsls	r3, r1, #3
 8006f50:	4651      	mov	r1, sl
 8006f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f56:	4651      	mov	r1, sl
 8006f58:	00ca      	lsls	r2, r1, #3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4603      	mov	r3, r0
 8006f60:	4642      	mov	r2, r8
 8006f62:	189b      	adds	r3, r3, r2
 8006f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f68:	464b      	mov	r3, r9
 8006f6a:	460a      	mov	r2, r1
 8006f6c:	eb42 0303 	adc.w	r3, r2, r3
 8006f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f88:	460b      	mov	r3, r1
 8006f8a:	18db      	adds	r3, r3, r3
 8006f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f8e:	4613      	mov	r3, r2
 8006f90:	eb42 0303 	adc.w	r3, r2, r3
 8006f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f9e:	f7f9 fe7b 	bl	8000c98 <__aeabi_uldivmod>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	; (8006fdc <UART_SetConfig+0x2d4>)
 8006fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	2164      	movs	r1, #100	; 0x64
 8006fb0:	fb01 f303 	mul.w	r3, r1, r3
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	3332      	adds	r3, #50	; 0x32
 8006fba:	4a08      	ldr	r2, [pc, #32]	; (8006fdc <UART_SetConfig+0x2d4>)
 8006fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	f003 0207 	and.w	r2, r3, #7
 8006fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4422      	add	r2, r4
 8006fce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fd0:	e105      	b.n	80071de <UART_SetConfig+0x4d6>
 8006fd2:	bf00      	nop
 8006fd4:	40011000 	.word	0x40011000
 8006fd8:	40011400 	.word	0x40011400
 8006fdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006fea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006fee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ff2:	4642      	mov	r2, r8
 8006ff4:	464b      	mov	r3, r9
 8006ff6:	1891      	adds	r1, r2, r2
 8006ff8:	6239      	str	r1, [r7, #32]
 8006ffa:	415b      	adcs	r3, r3
 8006ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ffe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007002:	4641      	mov	r1, r8
 8007004:	1854      	adds	r4, r2, r1
 8007006:	4649      	mov	r1, r9
 8007008:	eb43 0501 	adc.w	r5, r3, r1
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	00eb      	lsls	r3, r5, #3
 8007016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800701a:	00e2      	lsls	r2, r4, #3
 800701c:	4614      	mov	r4, r2
 800701e:	461d      	mov	r5, r3
 8007020:	4643      	mov	r3, r8
 8007022:	18e3      	adds	r3, r4, r3
 8007024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007028:	464b      	mov	r3, r9
 800702a:	eb45 0303 	adc.w	r3, r5, r3
 800702e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800703e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007042:	f04f 0200 	mov.w	r2, #0
 8007046:	f04f 0300 	mov.w	r3, #0
 800704a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800704e:	4629      	mov	r1, r5
 8007050:	008b      	lsls	r3, r1, #2
 8007052:	4621      	mov	r1, r4
 8007054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007058:	4621      	mov	r1, r4
 800705a:	008a      	lsls	r2, r1, #2
 800705c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007060:	f7f9 fe1a 	bl	8000c98 <__aeabi_uldivmod>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4b60      	ldr	r3, [pc, #384]	; (80071ec <UART_SetConfig+0x4e4>)
 800706a:	fba3 2302 	umull	r2, r3, r3, r2
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	011c      	lsls	r4, r3, #4
 8007072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007076:	2200      	movs	r2, #0
 8007078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800707c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007080:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007084:	4642      	mov	r2, r8
 8007086:	464b      	mov	r3, r9
 8007088:	1891      	adds	r1, r2, r2
 800708a:	61b9      	str	r1, [r7, #24]
 800708c:	415b      	adcs	r3, r3
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007094:	4641      	mov	r1, r8
 8007096:	1851      	adds	r1, r2, r1
 8007098:	6139      	str	r1, [r7, #16]
 800709a:	4649      	mov	r1, r9
 800709c:	414b      	adcs	r3, r1
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	f04f 0300 	mov.w	r3, #0
 80070a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070ac:	4659      	mov	r1, fp
 80070ae:	00cb      	lsls	r3, r1, #3
 80070b0:	4651      	mov	r1, sl
 80070b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070b6:	4651      	mov	r1, sl
 80070b8:	00ca      	lsls	r2, r1, #3
 80070ba:	4610      	mov	r0, r2
 80070bc:	4619      	mov	r1, r3
 80070be:	4603      	mov	r3, r0
 80070c0:	4642      	mov	r2, r8
 80070c2:	189b      	adds	r3, r3, r2
 80070c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070c8:	464b      	mov	r3, r9
 80070ca:	460a      	mov	r2, r1
 80070cc:	eb42 0303 	adc.w	r3, r2, r3
 80070d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80070de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	f04f 0300 	mov.w	r3, #0
 80070e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80070ec:	4649      	mov	r1, r9
 80070ee:	008b      	lsls	r3, r1, #2
 80070f0:	4641      	mov	r1, r8
 80070f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070f6:	4641      	mov	r1, r8
 80070f8:	008a      	lsls	r2, r1, #2
 80070fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80070fe:	f7f9 fdcb 	bl	8000c98 <__aeabi_uldivmod>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	4b39      	ldr	r3, [pc, #228]	; (80071ec <UART_SetConfig+0x4e4>)
 8007108:	fba3 1302 	umull	r1, r3, r3, r2
 800710c:	095b      	lsrs	r3, r3, #5
 800710e:	2164      	movs	r1, #100	; 0x64
 8007110:	fb01 f303 	mul.w	r3, r1, r3
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	3332      	adds	r3, #50	; 0x32
 800711a:	4a34      	ldr	r2, [pc, #208]	; (80071ec <UART_SetConfig+0x4e4>)
 800711c:	fba2 2303 	umull	r2, r3, r2, r3
 8007120:	095b      	lsrs	r3, r3, #5
 8007122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007126:	441c      	add	r4, r3
 8007128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800712c:	2200      	movs	r2, #0
 800712e:	673b      	str	r3, [r7, #112]	; 0x70
 8007130:	677a      	str	r2, [r7, #116]	; 0x74
 8007132:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007136:	4642      	mov	r2, r8
 8007138:	464b      	mov	r3, r9
 800713a:	1891      	adds	r1, r2, r2
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	415b      	adcs	r3, r3
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007146:	4641      	mov	r1, r8
 8007148:	1851      	adds	r1, r2, r1
 800714a:	6039      	str	r1, [r7, #0]
 800714c:	4649      	mov	r1, r9
 800714e:	414b      	adcs	r3, r1
 8007150:	607b      	str	r3, [r7, #4]
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800715e:	4659      	mov	r1, fp
 8007160:	00cb      	lsls	r3, r1, #3
 8007162:	4651      	mov	r1, sl
 8007164:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007168:	4651      	mov	r1, sl
 800716a:	00ca      	lsls	r2, r1, #3
 800716c:	4610      	mov	r0, r2
 800716e:	4619      	mov	r1, r3
 8007170:	4603      	mov	r3, r0
 8007172:	4642      	mov	r2, r8
 8007174:	189b      	adds	r3, r3, r2
 8007176:	66bb      	str	r3, [r7, #104]	; 0x68
 8007178:	464b      	mov	r3, r9
 800717a:	460a      	mov	r2, r1
 800717c:	eb42 0303 	adc.w	r3, r2, r3
 8007180:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	663b      	str	r3, [r7, #96]	; 0x60
 800718c:	667a      	str	r2, [r7, #100]	; 0x64
 800718e:	f04f 0200 	mov.w	r2, #0
 8007192:	f04f 0300 	mov.w	r3, #0
 8007196:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800719a:	4649      	mov	r1, r9
 800719c:	008b      	lsls	r3, r1, #2
 800719e:	4641      	mov	r1, r8
 80071a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071a4:	4641      	mov	r1, r8
 80071a6:	008a      	lsls	r2, r1, #2
 80071a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071ac:	f7f9 fd74 	bl	8000c98 <__aeabi_uldivmod>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	4b0d      	ldr	r3, [pc, #52]	; (80071ec <UART_SetConfig+0x4e4>)
 80071b6:	fba3 1302 	umull	r1, r3, r3, r2
 80071ba:	095b      	lsrs	r3, r3, #5
 80071bc:	2164      	movs	r1, #100	; 0x64
 80071be:	fb01 f303 	mul.w	r3, r1, r3
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	3332      	adds	r3, #50	; 0x32
 80071c8:	4a08      	ldr	r2, [pc, #32]	; (80071ec <UART_SetConfig+0x4e4>)
 80071ca:	fba2 2303 	umull	r2, r3, r2, r3
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	f003 020f 	and.w	r2, r3, #15
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4422      	add	r2, r4
 80071dc:	609a      	str	r2, [r3, #8]
}
 80071de:	bf00      	nop
 80071e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80071e4:	46bd      	mov	sp, r7
 80071e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071ea:	bf00      	nop
 80071ec:	51eb851f 	.word	0x51eb851f

080071f0 <__errno>:
 80071f0:	4b01      	ldr	r3, [pc, #4]	; (80071f8 <__errno+0x8>)
 80071f2:	6818      	ldr	r0, [r3, #0]
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	20000014 	.word	0x20000014

080071fc <__libc_init_array>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4d0d      	ldr	r5, [pc, #52]	; (8007234 <__libc_init_array+0x38>)
 8007200:	4c0d      	ldr	r4, [pc, #52]	; (8007238 <__libc_init_array+0x3c>)
 8007202:	1b64      	subs	r4, r4, r5
 8007204:	10a4      	asrs	r4, r4, #2
 8007206:	2600      	movs	r6, #0
 8007208:	42a6      	cmp	r6, r4
 800720a:	d109      	bne.n	8007220 <__libc_init_array+0x24>
 800720c:	4d0b      	ldr	r5, [pc, #44]	; (800723c <__libc_init_array+0x40>)
 800720e:	4c0c      	ldr	r4, [pc, #48]	; (8007240 <__libc_init_array+0x44>)
 8007210:	f004 fc92 	bl	800bb38 <_init>
 8007214:	1b64      	subs	r4, r4, r5
 8007216:	10a4      	asrs	r4, r4, #2
 8007218:	2600      	movs	r6, #0
 800721a:	42a6      	cmp	r6, r4
 800721c:	d105      	bne.n	800722a <__libc_init_array+0x2e>
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	f855 3b04 	ldr.w	r3, [r5], #4
 8007224:	4798      	blx	r3
 8007226:	3601      	adds	r6, #1
 8007228:	e7ee      	b.n	8007208 <__libc_init_array+0xc>
 800722a:	f855 3b04 	ldr.w	r3, [r5], #4
 800722e:	4798      	blx	r3
 8007230:	3601      	adds	r6, #1
 8007232:	e7f2      	b.n	800721a <__libc_init_array+0x1e>
 8007234:	0800c054 	.word	0x0800c054
 8007238:	0800c054 	.word	0x0800c054
 800723c:	0800c054 	.word	0x0800c054
 8007240:	0800c058 	.word	0x0800c058

08007244 <memset>:
 8007244:	4402      	add	r2, r0
 8007246:	4603      	mov	r3, r0
 8007248:	4293      	cmp	r3, r2
 800724a:	d100      	bne.n	800724e <memset+0xa>
 800724c:	4770      	bx	lr
 800724e:	f803 1b01 	strb.w	r1, [r3], #1
 8007252:	e7f9      	b.n	8007248 <memset+0x4>

08007254 <__cvt>:
 8007254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007258:	ec55 4b10 	vmov	r4, r5, d0
 800725c:	2d00      	cmp	r5, #0
 800725e:	460e      	mov	r6, r1
 8007260:	4619      	mov	r1, r3
 8007262:	462b      	mov	r3, r5
 8007264:	bfbb      	ittet	lt
 8007266:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800726a:	461d      	movlt	r5, r3
 800726c:	2300      	movge	r3, #0
 800726e:	232d      	movlt	r3, #45	; 0x2d
 8007270:	700b      	strb	r3, [r1, #0]
 8007272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007274:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007278:	4691      	mov	r9, r2
 800727a:	f023 0820 	bic.w	r8, r3, #32
 800727e:	bfbc      	itt	lt
 8007280:	4622      	movlt	r2, r4
 8007282:	4614      	movlt	r4, r2
 8007284:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007288:	d005      	beq.n	8007296 <__cvt+0x42>
 800728a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800728e:	d100      	bne.n	8007292 <__cvt+0x3e>
 8007290:	3601      	adds	r6, #1
 8007292:	2102      	movs	r1, #2
 8007294:	e000      	b.n	8007298 <__cvt+0x44>
 8007296:	2103      	movs	r1, #3
 8007298:	ab03      	add	r3, sp, #12
 800729a:	9301      	str	r3, [sp, #4]
 800729c:	ab02      	add	r3, sp, #8
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	ec45 4b10 	vmov	d0, r4, r5
 80072a4:	4653      	mov	r3, sl
 80072a6:	4632      	mov	r2, r6
 80072a8:	f001 fdae 	bl	8008e08 <_dtoa_r>
 80072ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072b0:	4607      	mov	r7, r0
 80072b2:	d102      	bne.n	80072ba <__cvt+0x66>
 80072b4:	f019 0f01 	tst.w	r9, #1
 80072b8:	d022      	beq.n	8007300 <__cvt+0xac>
 80072ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072be:	eb07 0906 	add.w	r9, r7, r6
 80072c2:	d110      	bne.n	80072e6 <__cvt+0x92>
 80072c4:	783b      	ldrb	r3, [r7, #0]
 80072c6:	2b30      	cmp	r3, #48	; 0x30
 80072c8:	d10a      	bne.n	80072e0 <__cvt+0x8c>
 80072ca:	2200      	movs	r2, #0
 80072cc:	2300      	movs	r3, #0
 80072ce:	4620      	mov	r0, r4
 80072d0:	4629      	mov	r1, r5
 80072d2:	f7f9 fc01 	bl	8000ad8 <__aeabi_dcmpeq>
 80072d6:	b918      	cbnz	r0, 80072e0 <__cvt+0x8c>
 80072d8:	f1c6 0601 	rsb	r6, r6, #1
 80072dc:	f8ca 6000 	str.w	r6, [sl]
 80072e0:	f8da 3000 	ldr.w	r3, [sl]
 80072e4:	4499      	add	r9, r3
 80072e6:	2200      	movs	r2, #0
 80072e8:	2300      	movs	r3, #0
 80072ea:	4620      	mov	r0, r4
 80072ec:	4629      	mov	r1, r5
 80072ee:	f7f9 fbf3 	bl	8000ad8 <__aeabi_dcmpeq>
 80072f2:	b108      	cbz	r0, 80072f8 <__cvt+0xa4>
 80072f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80072f8:	2230      	movs	r2, #48	; 0x30
 80072fa:	9b03      	ldr	r3, [sp, #12]
 80072fc:	454b      	cmp	r3, r9
 80072fe:	d307      	bcc.n	8007310 <__cvt+0xbc>
 8007300:	9b03      	ldr	r3, [sp, #12]
 8007302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007304:	1bdb      	subs	r3, r3, r7
 8007306:	4638      	mov	r0, r7
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	b004      	add	sp, #16
 800730c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007310:	1c59      	adds	r1, r3, #1
 8007312:	9103      	str	r1, [sp, #12]
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	e7f0      	b.n	80072fa <__cvt+0xa6>

08007318 <__exponent>:
 8007318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800731a:	4603      	mov	r3, r0
 800731c:	2900      	cmp	r1, #0
 800731e:	bfb8      	it	lt
 8007320:	4249      	neglt	r1, r1
 8007322:	f803 2b02 	strb.w	r2, [r3], #2
 8007326:	bfb4      	ite	lt
 8007328:	222d      	movlt	r2, #45	; 0x2d
 800732a:	222b      	movge	r2, #43	; 0x2b
 800732c:	2909      	cmp	r1, #9
 800732e:	7042      	strb	r2, [r0, #1]
 8007330:	dd2a      	ble.n	8007388 <__exponent+0x70>
 8007332:	f10d 0407 	add.w	r4, sp, #7
 8007336:	46a4      	mov	ip, r4
 8007338:	270a      	movs	r7, #10
 800733a:	46a6      	mov	lr, r4
 800733c:	460a      	mov	r2, r1
 800733e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007342:	fb07 1516 	mls	r5, r7, r6, r1
 8007346:	3530      	adds	r5, #48	; 0x30
 8007348:	2a63      	cmp	r2, #99	; 0x63
 800734a:	f104 34ff 	add.w	r4, r4, #4294967295
 800734e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007352:	4631      	mov	r1, r6
 8007354:	dcf1      	bgt.n	800733a <__exponent+0x22>
 8007356:	3130      	adds	r1, #48	; 0x30
 8007358:	f1ae 0502 	sub.w	r5, lr, #2
 800735c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007360:	1c44      	adds	r4, r0, #1
 8007362:	4629      	mov	r1, r5
 8007364:	4561      	cmp	r1, ip
 8007366:	d30a      	bcc.n	800737e <__exponent+0x66>
 8007368:	f10d 0209 	add.w	r2, sp, #9
 800736c:	eba2 020e 	sub.w	r2, r2, lr
 8007370:	4565      	cmp	r5, ip
 8007372:	bf88      	it	hi
 8007374:	2200      	movhi	r2, #0
 8007376:	4413      	add	r3, r2
 8007378:	1a18      	subs	r0, r3, r0
 800737a:	b003      	add	sp, #12
 800737c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800737e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007382:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007386:	e7ed      	b.n	8007364 <__exponent+0x4c>
 8007388:	2330      	movs	r3, #48	; 0x30
 800738a:	3130      	adds	r1, #48	; 0x30
 800738c:	7083      	strb	r3, [r0, #2]
 800738e:	70c1      	strb	r1, [r0, #3]
 8007390:	1d03      	adds	r3, r0, #4
 8007392:	e7f1      	b.n	8007378 <__exponent+0x60>

08007394 <_printf_float>:
 8007394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007398:	ed2d 8b02 	vpush	{d8}
 800739c:	b08d      	sub	sp, #52	; 0x34
 800739e:	460c      	mov	r4, r1
 80073a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80073a4:	4616      	mov	r6, r2
 80073a6:	461f      	mov	r7, r3
 80073a8:	4605      	mov	r5, r0
 80073aa:	f002 fe8b 	bl	800a0c4 <_localeconv_r>
 80073ae:	f8d0 a000 	ldr.w	sl, [r0]
 80073b2:	4650      	mov	r0, sl
 80073b4:	f7f8 ff14 	bl	80001e0 <strlen>
 80073b8:	2300      	movs	r3, #0
 80073ba:	930a      	str	r3, [sp, #40]	; 0x28
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	9305      	str	r3, [sp, #20]
 80073c0:	f8d8 3000 	ldr.w	r3, [r8]
 80073c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80073c8:	3307      	adds	r3, #7
 80073ca:	f023 0307 	bic.w	r3, r3, #7
 80073ce:	f103 0208 	add.w	r2, r3, #8
 80073d2:	f8c8 2000 	str.w	r2, [r8]
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80073de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80073e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073e6:	9307      	str	r3, [sp, #28]
 80073e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80073ec:	ee08 0a10 	vmov	s16, r0
 80073f0:	4b9f      	ldr	r3, [pc, #636]	; (8007670 <_printf_float+0x2dc>)
 80073f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073f6:	f04f 32ff 	mov.w	r2, #4294967295
 80073fa:	f7f9 fb9f 	bl	8000b3c <__aeabi_dcmpun>
 80073fe:	bb88      	cbnz	r0, 8007464 <_printf_float+0xd0>
 8007400:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007404:	4b9a      	ldr	r3, [pc, #616]	; (8007670 <_printf_float+0x2dc>)
 8007406:	f04f 32ff 	mov.w	r2, #4294967295
 800740a:	f7f9 fb79 	bl	8000b00 <__aeabi_dcmple>
 800740e:	bb48      	cbnz	r0, 8007464 <_printf_float+0xd0>
 8007410:	2200      	movs	r2, #0
 8007412:	2300      	movs	r3, #0
 8007414:	4640      	mov	r0, r8
 8007416:	4649      	mov	r1, r9
 8007418:	f7f9 fb68 	bl	8000aec <__aeabi_dcmplt>
 800741c:	b110      	cbz	r0, 8007424 <_printf_float+0x90>
 800741e:	232d      	movs	r3, #45	; 0x2d
 8007420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007424:	4b93      	ldr	r3, [pc, #588]	; (8007674 <_printf_float+0x2e0>)
 8007426:	4894      	ldr	r0, [pc, #592]	; (8007678 <_printf_float+0x2e4>)
 8007428:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800742c:	bf94      	ite	ls
 800742e:	4698      	movls	r8, r3
 8007430:	4680      	movhi	r8, r0
 8007432:	2303      	movs	r3, #3
 8007434:	6123      	str	r3, [r4, #16]
 8007436:	9b05      	ldr	r3, [sp, #20]
 8007438:	f023 0204 	bic.w	r2, r3, #4
 800743c:	6022      	str	r2, [r4, #0]
 800743e:	f04f 0900 	mov.w	r9, #0
 8007442:	9700      	str	r7, [sp, #0]
 8007444:	4633      	mov	r3, r6
 8007446:	aa0b      	add	r2, sp, #44	; 0x2c
 8007448:	4621      	mov	r1, r4
 800744a:	4628      	mov	r0, r5
 800744c:	f000 f9d8 	bl	8007800 <_printf_common>
 8007450:	3001      	adds	r0, #1
 8007452:	f040 8090 	bne.w	8007576 <_printf_float+0x1e2>
 8007456:	f04f 30ff 	mov.w	r0, #4294967295
 800745a:	b00d      	add	sp, #52	; 0x34
 800745c:	ecbd 8b02 	vpop	{d8}
 8007460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007464:	4642      	mov	r2, r8
 8007466:	464b      	mov	r3, r9
 8007468:	4640      	mov	r0, r8
 800746a:	4649      	mov	r1, r9
 800746c:	f7f9 fb66 	bl	8000b3c <__aeabi_dcmpun>
 8007470:	b140      	cbz	r0, 8007484 <_printf_float+0xf0>
 8007472:	464b      	mov	r3, r9
 8007474:	2b00      	cmp	r3, #0
 8007476:	bfbc      	itt	lt
 8007478:	232d      	movlt	r3, #45	; 0x2d
 800747a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800747e:	487f      	ldr	r0, [pc, #508]	; (800767c <_printf_float+0x2e8>)
 8007480:	4b7f      	ldr	r3, [pc, #508]	; (8007680 <_printf_float+0x2ec>)
 8007482:	e7d1      	b.n	8007428 <_printf_float+0x94>
 8007484:	6863      	ldr	r3, [r4, #4]
 8007486:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800748a:	9206      	str	r2, [sp, #24]
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	d13f      	bne.n	8007510 <_printf_float+0x17c>
 8007490:	2306      	movs	r3, #6
 8007492:	6063      	str	r3, [r4, #4]
 8007494:	9b05      	ldr	r3, [sp, #20]
 8007496:	6861      	ldr	r1, [r4, #4]
 8007498:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800749c:	2300      	movs	r3, #0
 800749e:	9303      	str	r3, [sp, #12]
 80074a0:	ab0a      	add	r3, sp, #40	; 0x28
 80074a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80074a6:	ab09      	add	r3, sp, #36	; 0x24
 80074a8:	ec49 8b10 	vmov	d0, r8, r9
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	6022      	str	r2, [r4, #0]
 80074b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80074b4:	4628      	mov	r0, r5
 80074b6:	f7ff fecd 	bl	8007254 <__cvt>
 80074ba:	9b06      	ldr	r3, [sp, #24]
 80074bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074be:	2b47      	cmp	r3, #71	; 0x47
 80074c0:	4680      	mov	r8, r0
 80074c2:	d108      	bne.n	80074d6 <_printf_float+0x142>
 80074c4:	1cc8      	adds	r0, r1, #3
 80074c6:	db02      	blt.n	80074ce <_printf_float+0x13a>
 80074c8:	6863      	ldr	r3, [r4, #4]
 80074ca:	4299      	cmp	r1, r3
 80074cc:	dd41      	ble.n	8007552 <_printf_float+0x1be>
 80074ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80074d2:	fa5f fb8b 	uxtb.w	fp, fp
 80074d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074da:	d820      	bhi.n	800751e <_printf_float+0x18a>
 80074dc:	3901      	subs	r1, #1
 80074de:	465a      	mov	r2, fp
 80074e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074e4:	9109      	str	r1, [sp, #36]	; 0x24
 80074e6:	f7ff ff17 	bl	8007318 <__exponent>
 80074ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ec:	1813      	adds	r3, r2, r0
 80074ee:	2a01      	cmp	r2, #1
 80074f0:	4681      	mov	r9, r0
 80074f2:	6123      	str	r3, [r4, #16]
 80074f4:	dc02      	bgt.n	80074fc <_printf_float+0x168>
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	07d2      	lsls	r2, r2, #31
 80074fa:	d501      	bpl.n	8007500 <_printf_float+0x16c>
 80074fc:	3301      	adds	r3, #1
 80074fe:	6123      	str	r3, [r4, #16]
 8007500:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007504:	2b00      	cmp	r3, #0
 8007506:	d09c      	beq.n	8007442 <_printf_float+0xae>
 8007508:	232d      	movs	r3, #45	; 0x2d
 800750a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800750e:	e798      	b.n	8007442 <_printf_float+0xae>
 8007510:	9a06      	ldr	r2, [sp, #24]
 8007512:	2a47      	cmp	r2, #71	; 0x47
 8007514:	d1be      	bne.n	8007494 <_printf_float+0x100>
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1bc      	bne.n	8007494 <_printf_float+0x100>
 800751a:	2301      	movs	r3, #1
 800751c:	e7b9      	b.n	8007492 <_printf_float+0xfe>
 800751e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007522:	d118      	bne.n	8007556 <_printf_float+0x1c2>
 8007524:	2900      	cmp	r1, #0
 8007526:	6863      	ldr	r3, [r4, #4]
 8007528:	dd0b      	ble.n	8007542 <_printf_float+0x1ae>
 800752a:	6121      	str	r1, [r4, #16]
 800752c:	b913      	cbnz	r3, 8007534 <_printf_float+0x1a0>
 800752e:	6822      	ldr	r2, [r4, #0]
 8007530:	07d0      	lsls	r0, r2, #31
 8007532:	d502      	bpl.n	800753a <_printf_float+0x1a6>
 8007534:	3301      	adds	r3, #1
 8007536:	440b      	add	r3, r1
 8007538:	6123      	str	r3, [r4, #16]
 800753a:	65a1      	str	r1, [r4, #88]	; 0x58
 800753c:	f04f 0900 	mov.w	r9, #0
 8007540:	e7de      	b.n	8007500 <_printf_float+0x16c>
 8007542:	b913      	cbnz	r3, 800754a <_printf_float+0x1b6>
 8007544:	6822      	ldr	r2, [r4, #0]
 8007546:	07d2      	lsls	r2, r2, #31
 8007548:	d501      	bpl.n	800754e <_printf_float+0x1ba>
 800754a:	3302      	adds	r3, #2
 800754c:	e7f4      	b.n	8007538 <_printf_float+0x1a4>
 800754e:	2301      	movs	r3, #1
 8007550:	e7f2      	b.n	8007538 <_printf_float+0x1a4>
 8007552:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007558:	4299      	cmp	r1, r3
 800755a:	db05      	blt.n	8007568 <_printf_float+0x1d4>
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	6121      	str	r1, [r4, #16]
 8007560:	07d8      	lsls	r0, r3, #31
 8007562:	d5ea      	bpl.n	800753a <_printf_float+0x1a6>
 8007564:	1c4b      	adds	r3, r1, #1
 8007566:	e7e7      	b.n	8007538 <_printf_float+0x1a4>
 8007568:	2900      	cmp	r1, #0
 800756a:	bfd4      	ite	le
 800756c:	f1c1 0202 	rsble	r2, r1, #2
 8007570:	2201      	movgt	r2, #1
 8007572:	4413      	add	r3, r2
 8007574:	e7e0      	b.n	8007538 <_printf_float+0x1a4>
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	055a      	lsls	r2, r3, #21
 800757a:	d407      	bmi.n	800758c <_printf_float+0x1f8>
 800757c:	6923      	ldr	r3, [r4, #16]
 800757e:	4642      	mov	r2, r8
 8007580:	4631      	mov	r1, r6
 8007582:	4628      	mov	r0, r5
 8007584:	47b8      	blx	r7
 8007586:	3001      	adds	r0, #1
 8007588:	d12c      	bne.n	80075e4 <_printf_float+0x250>
 800758a:	e764      	b.n	8007456 <_printf_float+0xc2>
 800758c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007590:	f240 80e0 	bls.w	8007754 <_printf_float+0x3c0>
 8007594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007598:	2200      	movs	r2, #0
 800759a:	2300      	movs	r3, #0
 800759c:	f7f9 fa9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d034      	beq.n	800760e <_printf_float+0x27a>
 80075a4:	4a37      	ldr	r2, [pc, #220]	; (8007684 <_printf_float+0x2f0>)
 80075a6:	2301      	movs	r3, #1
 80075a8:	4631      	mov	r1, r6
 80075aa:	4628      	mov	r0, r5
 80075ac:	47b8      	blx	r7
 80075ae:	3001      	adds	r0, #1
 80075b0:	f43f af51 	beq.w	8007456 <_printf_float+0xc2>
 80075b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075b8:	429a      	cmp	r2, r3
 80075ba:	db02      	blt.n	80075c2 <_printf_float+0x22e>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	07d8      	lsls	r0, r3, #31
 80075c0:	d510      	bpl.n	80075e4 <_printf_float+0x250>
 80075c2:	ee18 3a10 	vmov	r3, s16
 80075c6:	4652      	mov	r2, sl
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	f43f af41 	beq.w	8007456 <_printf_float+0xc2>
 80075d4:	f04f 0800 	mov.w	r8, #0
 80075d8:	f104 091a 	add.w	r9, r4, #26
 80075dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075de:	3b01      	subs	r3, #1
 80075e0:	4543      	cmp	r3, r8
 80075e2:	dc09      	bgt.n	80075f8 <_printf_float+0x264>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	079b      	lsls	r3, r3, #30
 80075e8:	f100 8105 	bmi.w	80077f6 <_printf_float+0x462>
 80075ec:	68e0      	ldr	r0, [r4, #12]
 80075ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075f0:	4298      	cmp	r0, r3
 80075f2:	bfb8      	it	lt
 80075f4:	4618      	movlt	r0, r3
 80075f6:	e730      	b.n	800745a <_printf_float+0xc6>
 80075f8:	2301      	movs	r3, #1
 80075fa:	464a      	mov	r2, r9
 80075fc:	4631      	mov	r1, r6
 80075fe:	4628      	mov	r0, r5
 8007600:	47b8      	blx	r7
 8007602:	3001      	adds	r0, #1
 8007604:	f43f af27 	beq.w	8007456 <_printf_float+0xc2>
 8007608:	f108 0801 	add.w	r8, r8, #1
 800760c:	e7e6      	b.n	80075dc <_printf_float+0x248>
 800760e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007610:	2b00      	cmp	r3, #0
 8007612:	dc39      	bgt.n	8007688 <_printf_float+0x2f4>
 8007614:	4a1b      	ldr	r2, [pc, #108]	; (8007684 <_printf_float+0x2f0>)
 8007616:	2301      	movs	r3, #1
 8007618:	4631      	mov	r1, r6
 800761a:	4628      	mov	r0, r5
 800761c:	47b8      	blx	r7
 800761e:	3001      	adds	r0, #1
 8007620:	f43f af19 	beq.w	8007456 <_printf_float+0xc2>
 8007624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007628:	4313      	orrs	r3, r2
 800762a:	d102      	bne.n	8007632 <_printf_float+0x29e>
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	07d9      	lsls	r1, r3, #31
 8007630:	d5d8      	bpl.n	80075e4 <_printf_float+0x250>
 8007632:	ee18 3a10 	vmov	r3, s16
 8007636:	4652      	mov	r2, sl
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	f43f af09 	beq.w	8007456 <_printf_float+0xc2>
 8007644:	f04f 0900 	mov.w	r9, #0
 8007648:	f104 0a1a 	add.w	sl, r4, #26
 800764c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764e:	425b      	negs	r3, r3
 8007650:	454b      	cmp	r3, r9
 8007652:	dc01      	bgt.n	8007658 <_printf_float+0x2c4>
 8007654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007656:	e792      	b.n	800757e <_printf_float+0x1ea>
 8007658:	2301      	movs	r3, #1
 800765a:	4652      	mov	r2, sl
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f aef7 	beq.w	8007456 <_printf_float+0xc2>
 8007668:	f109 0901 	add.w	r9, r9, #1
 800766c:	e7ee      	b.n	800764c <_printf_float+0x2b8>
 800766e:	bf00      	nop
 8007670:	7fefffff 	.word	0x7fefffff
 8007674:	0800bba8 	.word	0x0800bba8
 8007678:	0800bbac 	.word	0x0800bbac
 800767c:	0800bbb4 	.word	0x0800bbb4
 8007680:	0800bbb0 	.word	0x0800bbb0
 8007684:	0800bbb8 	.word	0x0800bbb8
 8007688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800768a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800768c:	429a      	cmp	r2, r3
 800768e:	bfa8      	it	ge
 8007690:	461a      	movge	r2, r3
 8007692:	2a00      	cmp	r2, #0
 8007694:	4691      	mov	r9, r2
 8007696:	dc37      	bgt.n	8007708 <_printf_float+0x374>
 8007698:	f04f 0b00 	mov.w	fp, #0
 800769c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076a0:	f104 021a 	add.w	r2, r4, #26
 80076a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076a6:	9305      	str	r3, [sp, #20]
 80076a8:	eba3 0309 	sub.w	r3, r3, r9
 80076ac:	455b      	cmp	r3, fp
 80076ae:	dc33      	bgt.n	8007718 <_printf_float+0x384>
 80076b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076b4:	429a      	cmp	r2, r3
 80076b6:	db3b      	blt.n	8007730 <_printf_float+0x39c>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	07da      	lsls	r2, r3, #31
 80076bc:	d438      	bmi.n	8007730 <_printf_float+0x39c>
 80076be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c0:	9a05      	ldr	r2, [sp, #20]
 80076c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076c4:	1a9a      	subs	r2, r3, r2
 80076c6:	eba3 0901 	sub.w	r9, r3, r1
 80076ca:	4591      	cmp	r9, r2
 80076cc:	bfa8      	it	ge
 80076ce:	4691      	movge	r9, r2
 80076d0:	f1b9 0f00 	cmp.w	r9, #0
 80076d4:	dc35      	bgt.n	8007742 <_printf_float+0x3ae>
 80076d6:	f04f 0800 	mov.w	r8, #0
 80076da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076de:	f104 0a1a 	add.w	sl, r4, #26
 80076e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076e6:	1a9b      	subs	r3, r3, r2
 80076e8:	eba3 0309 	sub.w	r3, r3, r9
 80076ec:	4543      	cmp	r3, r8
 80076ee:	f77f af79 	ble.w	80075e4 <_printf_float+0x250>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4652      	mov	r2, sl
 80076f6:	4631      	mov	r1, r6
 80076f8:	4628      	mov	r0, r5
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	f43f aeaa 	beq.w	8007456 <_printf_float+0xc2>
 8007702:	f108 0801 	add.w	r8, r8, #1
 8007706:	e7ec      	b.n	80076e2 <_printf_float+0x34e>
 8007708:	4613      	mov	r3, r2
 800770a:	4631      	mov	r1, r6
 800770c:	4642      	mov	r2, r8
 800770e:	4628      	mov	r0, r5
 8007710:	47b8      	blx	r7
 8007712:	3001      	adds	r0, #1
 8007714:	d1c0      	bne.n	8007698 <_printf_float+0x304>
 8007716:	e69e      	b.n	8007456 <_printf_float+0xc2>
 8007718:	2301      	movs	r3, #1
 800771a:	4631      	mov	r1, r6
 800771c:	4628      	mov	r0, r5
 800771e:	9205      	str	r2, [sp, #20]
 8007720:	47b8      	blx	r7
 8007722:	3001      	adds	r0, #1
 8007724:	f43f ae97 	beq.w	8007456 <_printf_float+0xc2>
 8007728:	9a05      	ldr	r2, [sp, #20]
 800772a:	f10b 0b01 	add.w	fp, fp, #1
 800772e:	e7b9      	b.n	80076a4 <_printf_float+0x310>
 8007730:	ee18 3a10 	vmov	r3, s16
 8007734:	4652      	mov	r2, sl
 8007736:	4631      	mov	r1, r6
 8007738:	4628      	mov	r0, r5
 800773a:	47b8      	blx	r7
 800773c:	3001      	adds	r0, #1
 800773e:	d1be      	bne.n	80076be <_printf_float+0x32a>
 8007740:	e689      	b.n	8007456 <_printf_float+0xc2>
 8007742:	9a05      	ldr	r2, [sp, #20]
 8007744:	464b      	mov	r3, r9
 8007746:	4442      	add	r2, r8
 8007748:	4631      	mov	r1, r6
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	d1c1      	bne.n	80076d6 <_printf_float+0x342>
 8007752:	e680      	b.n	8007456 <_printf_float+0xc2>
 8007754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007756:	2a01      	cmp	r2, #1
 8007758:	dc01      	bgt.n	800775e <_printf_float+0x3ca>
 800775a:	07db      	lsls	r3, r3, #31
 800775c:	d538      	bpl.n	80077d0 <_printf_float+0x43c>
 800775e:	2301      	movs	r3, #1
 8007760:	4642      	mov	r2, r8
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f ae74 	beq.w	8007456 <_printf_float+0xc2>
 800776e:	ee18 3a10 	vmov	r3, s16
 8007772:	4652      	mov	r2, sl
 8007774:	4631      	mov	r1, r6
 8007776:	4628      	mov	r0, r5
 8007778:	47b8      	blx	r7
 800777a:	3001      	adds	r0, #1
 800777c:	f43f ae6b 	beq.w	8007456 <_printf_float+0xc2>
 8007780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007784:	2200      	movs	r2, #0
 8007786:	2300      	movs	r3, #0
 8007788:	f7f9 f9a6 	bl	8000ad8 <__aeabi_dcmpeq>
 800778c:	b9d8      	cbnz	r0, 80077c6 <_printf_float+0x432>
 800778e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007790:	f108 0201 	add.w	r2, r8, #1
 8007794:	3b01      	subs	r3, #1
 8007796:	4631      	mov	r1, r6
 8007798:	4628      	mov	r0, r5
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	d10e      	bne.n	80077be <_printf_float+0x42a>
 80077a0:	e659      	b.n	8007456 <_printf_float+0xc2>
 80077a2:	2301      	movs	r3, #1
 80077a4:	4652      	mov	r2, sl
 80077a6:	4631      	mov	r1, r6
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b8      	blx	r7
 80077ac:	3001      	adds	r0, #1
 80077ae:	f43f ae52 	beq.w	8007456 <_printf_float+0xc2>
 80077b2:	f108 0801 	add.w	r8, r8, #1
 80077b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b8:	3b01      	subs	r3, #1
 80077ba:	4543      	cmp	r3, r8
 80077bc:	dcf1      	bgt.n	80077a2 <_printf_float+0x40e>
 80077be:	464b      	mov	r3, r9
 80077c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077c4:	e6dc      	b.n	8007580 <_printf_float+0x1ec>
 80077c6:	f04f 0800 	mov.w	r8, #0
 80077ca:	f104 0a1a 	add.w	sl, r4, #26
 80077ce:	e7f2      	b.n	80077b6 <_printf_float+0x422>
 80077d0:	2301      	movs	r3, #1
 80077d2:	4642      	mov	r2, r8
 80077d4:	e7df      	b.n	8007796 <_printf_float+0x402>
 80077d6:	2301      	movs	r3, #1
 80077d8:	464a      	mov	r2, r9
 80077da:	4631      	mov	r1, r6
 80077dc:	4628      	mov	r0, r5
 80077de:	47b8      	blx	r7
 80077e0:	3001      	adds	r0, #1
 80077e2:	f43f ae38 	beq.w	8007456 <_printf_float+0xc2>
 80077e6:	f108 0801 	add.w	r8, r8, #1
 80077ea:	68e3      	ldr	r3, [r4, #12]
 80077ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077ee:	1a5b      	subs	r3, r3, r1
 80077f0:	4543      	cmp	r3, r8
 80077f2:	dcf0      	bgt.n	80077d6 <_printf_float+0x442>
 80077f4:	e6fa      	b.n	80075ec <_printf_float+0x258>
 80077f6:	f04f 0800 	mov.w	r8, #0
 80077fa:	f104 0919 	add.w	r9, r4, #25
 80077fe:	e7f4      	b.n	80077ea <_printf_float+0x456>

08007800 <_printf_common>:
 8007800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007804:	4616      	mov	r6, r2
 8007806:	4699      	mov	r9, r3
 8007808:	688a      	ldr	r2, [r1, #8]
 800780a:	690b      	ldr	r3, [r1, #16]
 800780c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007810:	4293      	cmp	r3, r2
 8007812:	bfb8      	it	lt
 8007814:	4613      	movlt	r3, r2
 8007816:	6033      	str	r3, [r6, #0]
 8007818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800781c:	4607      	mov	r7, r0
 800781e:	460c      	mov	r4, r1
 8007820:	b10a      	cbz	r2, 8007826 <_printf_common+0x26>
 8007822:	3301      	adds	r3, #1
 8007824:	6033      	str	r3, [r6, #0]
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	0699      	lsls	r1, r3, #26
 800782a:	bf42      	ittt	mi
 800782c:	6833      	ldrmi	r3, [r6, #0]
 800782e:	3302      	addmi	r3, #2
 8007830:	6033      	strmi	r3, [r6, #0]
 8007832:	6825      	ldr	r5, [r4, #0]
 8007834:	f015 0506 	ands.w	r5, r5, #6
 8007838:	d106      	bne.n	8007848 <_printf_common+0x48>
 800783a:	f104 0a19 	add.w	sl, r4, #25
 800783e:	68e3      	ldr	r3, [r4, #12]
 8007840:	6832      	ldr	r2, [r6, #0]
 8007842:	1a9b      	subs	r3, r3, r2
 8007844:	42ab      	cmp	r3, r5
 8007846:	dc26      	bgt.n	8007896 <_printf_common+0x96>
 8007848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800784c:	1e13      	subs	r3, r2, #0
 800784e:	6822      	ldr	r2, [r4, #0]
 8007850:	bf18      	it	ne
 8007852:	2301      	movne	r3, #1
 8007854:	0692      	lsls	r2, r2, #26
 8007856:	d42b      	bmi.n	80078b0 <_printf_common+0xb0>
 8007858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800785c:	4649      	mov	r1, r9
 800785e:	4638      	mov	r0, r7
 8007860:	47c0      	blx	r8
 8007862:	3001      	adds	r0, #1
 8007864:	d01e      	beq.n	80078a4 <_printf_common+0xa4>
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	68e5      	ldr	r5, [r4, #12]
 800786a:	6832      	ldr	r2, [r6, #0]
 800786c:	f003 0306 	and.w	r3, r3, #6
 8007870:	2b04      	cmp	r3, #4
 8007872:	bf08      	it	eq
 8007874:	1aad      	subeq	r5, r5, r2
 8007876:	68a3      	ldr	r3, [r4, #8]
 8007878:	6922      	ldr	r2, [r4, #16]
 800787a:	bf0c      	ite	eq
 800787c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007880:	2500      	movne	r5, #0
 8007882:	4293      	cmp	r3, r2
 8007884:	bfc4      	itt	gt
 8007886:	1a9b      	subgt	r3, r3, r2
 8007888:	18ed      	addgt	r5, r5, r3
 800788a:	2600      	movs	r6, #0
 800788c:	341a      	adds	r4, #26
 800788e:	42b5      	cmp	r5, r6
 8007890:	d11a      	bne.n	80078c8 <_printf_common+0xc8>
 8007892:	2000      	movs	r0, #0
 8007894:	e008      	b.n	80078a8 <_printf_common+0xa8>
 8007896:	2301      	movs	r3, #1
 8007898:	4652      	mov	r2, sl
 800789a:	4649      	mov	r1, r9
 800789c:	4638      	mov	r0, r7
 800789e:	47c0      	blx	r8
 80078a0:	3001      	adds	r0, #1
 80078a2:	d103      	bne.n	80078ac <_printf_common+0xac>
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ac:	3501      	adds	r5, #1
 80078ae:	e7c6      	b.n	800783e <_printf_common+0x3e>
 80078b0:	18e1      	adds	r1, r4, r3
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	2030      	movs	r0, #48	; 0x30
 80078b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078ba:	4422      	add	r2, r4
 80078bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078c4:	3302      	adds	r3, #2
 80078c6:	e7c7      	b.n	8007858 <_printf_common+0x58>
 80078c8:	2301      	movs	r3, #1
 80078ca:	4622      	mov	r2, r4
 80078cc:	4649      	mov	r1, r9
 80078ce:	4638      	mov	r0, r7
 80078d0:	47c0      	blx	r8
 80078d2:	3001      	adds	r0, #1
 80078d4:	d0e6      	beq.n	80078a4 <_printf_common+0xa4>
 80078d6:	3601      	adds	r6, #1
 80078d8:	e7d9      	b.n	800788e <_printf_common+0x8e>
	...

080078dc <_printf_i>:
 80078dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	7e0f      	ldrb	r7, [r1, #24]
 80078e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078e4:	2f78      	cmp	r7, #120	; 0x78
 80078e6:	4691      	mov	r9, r2
 80078e8:	4680      	mov	r8, r0
 80078ea:	460c      	mov	r4, r1
 80078ec:	469a      	mov	sl, r3
 80078ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078f2:	d807      	bhi.n	8007904 <_printf_i+0x28>
 80078f4:	2f62      	cmp	r7, #98	; 0x62
 80078f6:	d80a      	bhi.n	800790e <_printf_i+0x32>
 80078f8:	2f00      	cmp	r7, #0
 80078fa:	f000 80d8 	beq.w	8007aae <_printf_i+0x1d2>
 80078fe:	2f58      	cmp	r7, #88	; 0x58
 8007900:	f000 80a3 	beq.w	8007a4a <_printf_i+0x16e>
 8007904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800790c:	e03a      	b.n	8007984 <_printf_i+0xa8>
 800790e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007912:	2b15      	cmp	r3, #21
 8007914:	d8f6      	bhi.n	8007904 <_printf_i+0x28>
 8007916:	a101      	add	r1, pc, #4	; (adr r1, 800791c <_printf_i+0x40>)
 8007918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800791c:	08007975 	.word	0x08007975
 8007920:	08007989 	.word	0x08007989
 8007924:	08007905 	.word	0x08007905
 8007928:	08007905 	.word	0x08007905
 800792c:	08007905 	.word	0x08007905
 8007930:	08007905 	.word	0x08007905
 8007934:	08007989 	.word	0x08007989
 8007938:	08007905 	.word	0x08007905
 800793c:	08007905 	.word	0x08007905
 8007940:	08007905 	.word	0x08007905
 8007944:	08007905 	.word	0x08007905
 8007948:	08007a95 	.word	0x08007a95
 800794c:	080079b9 	.word	0x080079b9
 8007950:	08007a77 	.word	0x08007a77
 8007954:	08007905 	.word	0x08007905
 8007958:	08007905 	.word	0x08007905
 800795c:	08007ab7 	.word	0x08007ab7
 8007960:	08007905 	.word	0x08007905
 8007964:	080079b9 	.word	0x080079b9
 8007968:	08007905 	.word	0x08007905
 800796c:	08007905 	.word	0x08007905
 8007970:	08007a7f 	.word	0x08007a7f
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	1d1a      	adds	r2, r3, #4
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	602a      	str	r2, [r5, #0]
 800797c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007984:	2301      	movs	r3, #1
 8007986:	e0a3      	b.n	8007ad0 <_printf_i+0x1f4>
 8007988:	6820      	ldr	r0, [r4, #0]
 800798a:	6829      	ldr	r1, [r5, #0]
 800798c:	0606      	lsls	r6, r0, #24
 800798e:	f101 0304 	add.w	r3, r1, #4
 8007992:	d50a      	bpl.n	80079aa <_printf_i+0xce>
 8007994:	680e      	ldr	r6, [r1, #0]
 8007996:	602b      	str	r3, [r5, #0]
 8007998:	2e00      	cmp	r6, #0
 800799a:	da03      	bge.n	80079a4 <_printf_i+0xc8>
 800799c:	232d      	movs	r3, #45	; 0x2d
 800799e:	4276      	negs	r6, r6
 80079a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a4:	485e      	ldr	r0, [pc, #376]	; (8007b20 <_printf_i+0x244>)
 80079a6:	230a      	movs	r3, #10
 80079a8:	e019      	b.n	80079de <_printf_i+0x102>
 80079aa:	680e      	ldr	r6, [r1, #0]
 80079ac:	602b      	str	r3, [r5, #0]
 80079ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079b2:	bf18      	it	ne
 80079b4:	b236      	sxthne	r6, r6
 80079b6:	e7ef      	b.n	8007998 <_printf_i+0xbc>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	6820      	ldr	r0, [r4, #0]
 80079bc:	1d19      	adds	r1, r3, #4
 80079be:	6029      	str	r1, [r5, #0]
 80079c0:	0601      	lsls	r1, r0, #24
 80079c2:	d501      	bpl.n	80079c8 <_printf_i+0xec>
 80079c4:	681e      	ldr	r6, [r3, #0]
 80079c6:	e002      	b.n	80079ce <_printf_i+0xf2>
 80079c8:	0646      	lsls	r6, r0, #25
 80079ca:	d5fb      	bpl.n	80079c4 <_printf_i+0xe8>
 80079cc:	881e      	ldrh	r6, [r3, #0]
 80079ce:	4854      	ldr	r0, [pc, #336]	; (8007b20 <_printf_i+0x244>)
 80079d0:	2f6f      	cmp	r7, #111	; 0x6f
 80079d2:	bf0c      	ite	eq
 80079d4:	2308      	moveq	r3, #8
 80079d6:	230a      	movne	r3, #10
 80079d8:	2100      	movs	r1, #0
 80079da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079de:	6865      	ldr	r5, [r4, #4]
 80079e0:	60a5      	str	r5, [r4, #8]
 80079e2:	2d00      	cmp	r5, #0
 80079e4:	bfa2      	ittt	ge
 80079e6:	6821      	ldrge	r1, [r4, #0]
 80079e8:	f021 0104 	bicge.w	r1, r1, #4
 80079ec:	6021      	strge	r1, [r4, #0]
 80079ee:	b90e      	cbnz	r6, 80079f4 <_printf_i+0x118>
 80079f0:	2d00      	cmp	r5, #0
 80079f2:	d04d      	beq.n	8007a90 <_printf_i+0x1b4>
 80079f4:	4615      	mov	r5, r2
 80079f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80079fa:	fb03 6711 	mls	r7, r3, r1, r6
 80079fe:	5dc7      	ldrb	r7, [r0, r7]
 8007a00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a04:	4637      	mov	r7, r6
 8007a06:	42bb      	cmp	r3, r7
 8007a08:	460e      	mov	r6, r1
 8007a0a:	d9f4      	bls.n	80079f6 <_printf_i+0x11a>
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d10b      	bne.n	8007a28 <_printf_i+0x14c>
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	07de      	lsls	r6, r3, #31
 8007a14:	d508      	bpl.n	8007a28 <_printf_i+0x14c>
 8007a16:	6923      	ldr	r3, [r4, #16]
 8007a18:	6861      	ldr	r1, [r4, #4]
 8007a1a:	4299      	cmp	r1, r3
 8007a1c:	bfde      	ittt	le
 8007a1e:	2330      	movle	r3, #48	; 0x30
 8007a20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a28:	1b52      	subs	r2, r2, r5
 8007a2a:	6122      	str	r2, [r4, #16]
 8007a2c:	f8cd a000 	str.w	sl, [sp]
 8007a30:	464b      	mov	r3, r9
 8007a32:	aa03      	add	r2, sp, #12
 8007a34:	4621      	mov	r1, r4
 8007a36:	4640      	mov	r0, r8
 8007a38:	f7ff fee2 	bl	8007800 <_printf_common>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d14c      	bne.n	8007ada <_printf_i+0x1fe>
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	b004      	add	sp, #16
 8007a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4a:	4835      	ldr	r0, [pc, #212]	; (8007b20 <_printf_i+0x244>)
 8007a4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a50:	6829      	ldr	r1, [r5, #0]
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a58:	6029      	str	r1, [r5, #0]
 8007a5a:	061d      	lsls	r5, r3, #24
 8007a5c:	d514      	bpl.n	8007a88 <_printf_i+0x1ac>
 8007a5e:	07df      	lsls	r7, r3, #31
 8007a60:	bf44      	itt	mi
 8007a62:	f043 0320 	orrmi.w	r3, r3, #32
 8007a66:	6023      	strmi	r3, [r4, #0]
 8007a68:	b91e      	cbnz	r6, 8007a72 <_printf_i+0x196>
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	f023 0320 	bic.w	r3, r3, #32
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	2310      	movs	r3, #16
 8007a74:	e7b0      	b.n	80079d8 <_printf_i+0xfc>
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	f043 0320 	orr.w	r3, r3, #32
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	2378      	movs	r3, #120	; 0x78
 8007a80:	4828      	ldr	r0, [pc, #160]	; (8007b24 <_printf_i+0x248>)
 8007a82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a86:	e7e3      	b.n	8007a50 <_printf_i+0x174>
 8007a88:	0659      	lsls	r1, r3, #25
 8007a8a:	bf48      	it	mi
 8007a8c:	b2b6      	uxthmi	r6, r6
 8007a8e:	e7e6      	b.n	8007a5e <_printf_i+0x182>
 8007a90:	4615      	mov	r5, r2
 8007a92:	e7bb      	b.n	8007a0c <_printf_i+0x130>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	6826      	ldr	r6, [r4, #0]
 8007a98:	6961      	ldr	r1, [r4, #20]
 8007a9a:	1d18      	adds	r0, r3, #4
 8007a9c:	6028      	str	r0, [r5, #0]
 8007a9e:	0635      	lsls	r5, r6, #24
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	d501      	bpl.n	8007aa8 <_printf_i+0x1cc>
 8007aa4:	6019      	str	r1, [r3, #0]
 8007aa6:	e002      	b.n	8007aae <_printf_i+0x1d2>
 8007aa8:	0670      	lsls	r0, r6, #25
 8007aaa:	d5fb      	bpl.n	8007aa4 <_printf_i+0x1c8>
 8007aac:	8019      	strh	r1, [r3, #0]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	6123      	str	r3, [r4, #16]
 8007ab2:	4615      	mov	r5, r2
 8007ab4:	e7ba      	b.n	8007a2c <_printf_i+0x150>
 8007ab6:	682b      	ldr	r3, [r5, #0]
 8007ab8:	1d1a      	adds	r2, r3, #4
 8007aba:	602a      	str	r2, [r5, #0]
 8007abc:	681d      	ldr	r5, [r3, #0]
 8007abe:	6862      	ldr	r2, [r4, #4]
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f7f8 fb94 	bl	80001f0 <memchr>
 8007ac8:	b108      	cbz	r0, 8007ace <_printf_i+0x1f2>
 8007aca:	1b40      	subs	r0, r0, r5
 8007acc:	6060      	str	r0, [r4, #4]
 8007ace:	6863      	ldr	r3, [r4, #4]
 8007ad0:	6123      	str	r3, [r4, #16]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad8:	e7a8      	b.n	8007a2c <_printf_i+0x150>
 8007ada:	6923      	ldr	r3, [r4, #16]
 8007adc:	462a      	mov	r2, r5
 8007ade:	4649      	mov	r1, r9
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	47d0      	blx	sl
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d0ab      	beq.n	8007a40 <_printf_i+0x164>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	079b      	lsls	r3, r3, #30
 8007aec:	d413      	bmi.n	8007b16 <_printf_i+0x23a>
 8007aee:	68e0      	ldr	r0, [r4, #12]
 8007af0:	9b03      	ldr	r3, [sp, #12]
 8007af2:	4298      	cmp	r0, r3
 8007af4:	bfb8      	it	lt
 8007af6:	4618      	movlt	r0, r3
 8007af8:	e7a4      	b.n	8007a44 <_printf_i+0x168>
 8007afa:	2301      	movs	r3, #1
 8007afc:	4632      	mov	r2, r6
 8007afe:	4649      	mov	r1, r9
 8007b00:	4640      	mov	r0, r8
 8007b02:	47d0      	blx	sl
 8007b04:	3001      	adds	r0, #1
 8007b06:	d09b      	beq.n	8007a40 <_printf_i+0x164>
 8007b08:	3501      	adds	r5, #1
 8007b0a:	68e3      	ldr	r3, [r4, #12]
 8007b0c:	9903      	ldr	r1, [sp, #12]
 8007b0e:	1a5b      	subs	r3, r3, r1
 8007b10:	42ab      	cmp	r3, r5
 8007b12:	dcf2      	bgt.n	8007afa <_printf_i+0x21e>
 8007b14:	e7eb      	b.n	8007aee <_printf_i+0x212>
 8007b16:	2500      	movs	r5, #0
 8007b18:	f104 0619 	add.w	r6, r4, #25
 8007b1c:	e7f5      	b.n	8007b0a <_printf_i+0x22e>
 8007b1e:	bf00      	nop
 8007b20:	0800bbba 	.word	0x0800bbba
 8007b24:	0800bbcb 	.word	0x0800bbcb

08007b28 <_scanf_float>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	b087      	sub	sp, #28
 8007b2e:	4617      	mov	r7, r2
 8007b30:	9303      	str	r3, [sp, #12]
 8007b32:	688b      	ldr	r3, [r1, #8]
 8007b34:	1e5a      	subs	r2, r3, #1
 8007b36:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007b3a:	bf83      	ittte	hi
 8007b3c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007b40:	195b      	addhi	r3, r3, r5
 8007b42:	9302      	strhi	r3, [sp, #8]
 8007b44:	2300      	movls	r3, #0
 8007b46:	bf86      	itte	hi
 8007b48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007b4c:	608b      	strhi	r3, [r1, #8]
 8007b4e:	9302      	strls	r3, [sp, #8]
 8007b50:	680b      	ldr	r3, [r1, #0]
 8007b52:	468b      	mov	fp, r1
 8007b54:	2500      	movs	r5, #0
 8007b56:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007b5a:	f84b 3b1c 	str.w	r3, [fp], #28
 8007b5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007b62:	4680      	mov	r8, r0
 8007b64:	460c      	mov	r4, r1
 8007b66:	465e      	mov	r6, fp
 8007b68:	46aa      	mov	sl, r5
 8007b6a:	46a9      	mov	r9, r5
 8007b6c:	9501      	str	r5, [sp, #4]
 8007b6e:	68a2      	ldr	r2, [r4, #8]
 8007b70:	b152      	cbz	r2, 8007b88 <_scanf_float+0x60>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b4e      	cmp	r3, #78	; 0x4e
 8007b78:	d864      	bhi.n	8007c44 <_scanf_float+0x11c>
 8007b7a:	2b40      	cmp	r3, #64	; 0x40
 8007b7c:	d83c      	bhi.n	8007bf8 <_scanf_float+0xd0>
 8007b7e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007b82:	b2c8      	uxtb	r0, r1
 8007b84:	280e      	cmp	r0, #14
 8007b86:	d93a      	bls.n	8007bfe <_scanf_float+0xd6>
 8007b88:	f1b9 0f00 	cmp.w	r9, #0
 8007b8c:	d003      	beq.n	8007b96 <_scanf_float+0x6e>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b9a:	f1ba 0f01 	cmp.w	sl, #1
 8007b9e:	f200 8113 	bhi.w	8007dc8 <_scanf_float+0x2a0>
 8007ba2:	455e      	cmp	r6, fp
 8007ba4:	f200 8105 	bhi.w	8007db2 <_scanf_float+0x28a>
 8007ba8:	2501      	movs	r5, #1
 8007baa:	4628      	mov	r0, r5
 8007bac:	b007      	add	sp, #28
 8007bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007bb6:	2a0d      	cmp	r2, #13
 8007bb8:	d8e6      	bhi.n	8007b88 <_scanf_float+0x60>
 8007bba:	a101      	add	r1, pc, #4	; (adr r1, 8007bc0 <_scanf_float+0x98>)
 8007bbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007bc0:	08007cff 	.word	0x08007cff
 8007bc4:	08007b89 	.word	0x08007b89
 8007bc8:	08007b89 	.word	0x08007b89
 8007bcc:	08007b89 	.word	0x08007b89
 8007bd0:	08007d5f 	.word	0x08007d5f
 8007bd4:	08007d37 	.word	0x08007d37
 8007bd8:	08007b89 	.word	0x08007b89
 8007bdc:	08007b89 	.word	0x08007b89
 8007be0:	08007d0d 	.word	0x08007d0d
 8007be4:	08007b89 	.word	0x08007b89
 8007be8:	08007b89 	.word	0x08007b89
 8007bec:	08007b89 	.word	0x08007b89
 8007bf0:	08007b89 	.word	0x08007b89
 8007bf4:	08007cc5 	.word	0x08007cc5
 8007bf8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007bfc:	e7db      	b.n	8007bb6 <_scanf_float+0x8e>
 8007bfe:	290e      	cmp	r1, #14
 8007c00:	d8c2      	bhi.n	8007b88 <_scanf_float+0x60>
 8007c02:	a001      	add	r0, pc, #4	; (adr r0, 8007c08 <_scanf_float+0xe0>)
 8007c04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007c08:	08007cb7 	.word	0x08007cb7
 8007c0c:	08007b89 	.word	0x08007b89
 8007c10:	08007cb7 	.word	0x08007cb7
 8007c14:	08007d4b 	.word	0x08007d4b
 8007c18:	08007b89 	.word	0x08007b89
 8007c1c:	08007c65 	.word	0x08007c65
 8007c20:	08007ca1 	.word	0x08007ca1
 8007c24:	08007ca1 	.word	0x08007ca1
 8007c28:	08007ca1 	.word	0x08007ca1
 8007c2c:	08007ca1 	.word	0x08007ca1
 8007c30:	08007ca1 	.word	0x08007ca1
 8007c34:	08007ca1 	.word	0x08007ca1
 8007c38:	08007ca1 	.word	0x08007ca1
 8007c3c:	08007ca1 	.word	0x08007ca1
 8007c40:	08007ca1 	.word	0x08007ca1
 8007c44:	2b6e      	cmp	r3, #110	; 0x6e
 8007c46:	d809      	bhi.n	8007c5c <_scanf_float+0x134>
 8007c48:	2b60      	cmp	r3, #96	; 0x60
 8007c4a:	d8b2      	bhi.n	8007bb2 <_scanf_float+0x8a>
 8007c4c:	2b54      	cmp	r3, #84	; 0x54
 8007c4e:	d077      	beq.n	8007d40 <_scanf_float+0x218>
 8007c50:	2b59      	cmp	r3, #89	; 0x59
 8007c52:	d199      	bne.n	8007b88 <_scanf_float+0x60>
 8007c54:	2d07      	cmp	r5, #7
 8007c56:	d197      	bne.n	8007b88 <_scanf_float+0x60>
 8007c58:	2508      	movs	r5, #8
 8007c5a:	e029      	b.n	8007cb0 <_scanf_float+0x188>
 8007c5c:	2b74      	cmp	r3, #116	; 0x74
 8007c5e:	d06f      	beq.n	8007d40 <_scanf_float+0x218>
 8007c60:	2b79      	cmp	r3, #121	; 0x79
 8007c62:	e7f6      	b.n	8007c52 <_scanf_float+0x12a>
 8007c64:	6821      	ldr	r1, [r4, #0]
 8007c66:	05c8      	lsls	r0, r1, #23
 8007c68:	d51a      	bpl.n	8007ca0 <_scanf_float+0x178>
 8007c6a:	9b02      	ldr	r3, [sp, #8]
 8007c6c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007c70:	6021      	str	r1, [r4, #0]
 8007c72:	f109 0901 	add.w	r9, r9, #1
 8007c76:	b11b      	cbz	r3, 8007c80 <_scanf_float+0x158>
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	3201      	adds	r2, #1
 8007c7c:	9302      	str	r3, [sp, #8]
 8007c7e:	60a2      	str	r2, [r4, #8]
 8007c80:	68a3      	ldr	r3, [r4, #8]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	60a3      	str	r3, [r4, #8]
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	6123      	str	r3, [r4, #16]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	607b      	str	r3, [r7, #4]
 8007c94:	f340 8084 	ble.w	8007da0 <_scanf_float+0x278>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	603b      	str	r3, [r7, #0]
 8007c9e:	e766      	b.n	8007b6e <_scanf_float+0x46>
 8007ca0:	eb1a 0f05 	cmn.w	sl, r5
 8007ca4:	f47f af70 	bne.w	8007b88 <_scanf_float+0x60>
 8007ca8:	6822      	ldr	r2, [r4, #0]
 8007caa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007cae:	6022      	str	r2, [r4, #0]
 8007cb0:	f806 3b01 	strb.w	r3, [r6], #1
 8007cb4:	e7e4      	b.n	8007c80 <_scanf_float+0x158>
 8007cb6:	6822      	ldr	r2, [r4, #0]
 8007cb8:	0610      	lsls	r0, r2, #24
 8007cba:	f57f af65 	bpl.w	8007b88 <_scanf_float+0x60>
 8007cbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cc2:	e7f4      	b.n	8007cae <_scanf_float+0x186>
 8007cc4:	f1ba 0f00 	cmp.w	sl, #0
 8007cc8:	d10e      	bne.n	8007ce8 <_scanf_float+0x1c0>
 8007cca:	f1b9 0f00 	cmp.w	r9, #0
 8007cce:	d10e      	bne.n	8007cee <_scanf_float+0x1c6>
 8007cd0:	6822      	ldr	r2, [r4, #0]
 8007cd2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007cd6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007cda:	d108      	bne.n	8007cee <_scanf_float+0x1c6>
 8007cdc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ce0:	6022      	str	r2, [r4, #0]
 8007ce2:	f04f 0a01 	mov.w	sl, #1
 8007ce6:	e7e3      	b.n	8007cb0 <_scanf_float+0x188>
 8007ce8:	f1ba 0f02 	cmp.w	sl, #2
 8007cec:	d055      	beq.n	8007d9a <_scanf_float+0x272>
 8007cee:	2d01      	cmp	r5, #1
 8007cf0:	d002      	beq.n	8007cf8 <_scanf_float+0x1d0>
 8007cf2:	2d04      	cmp	r5, #4
 8007cf4:	f47f af48 	bne.w	8007b88 <_scanf_float+0x60>
 8007cf8:	3501      	adds	r5, #1
 8007cfa:	b2ed      	uxtb	r5, r5
 8007cfc:	e7d8      	b.n	8007cb0 <_scanf_float+0x188>
 8007cfe:	f1ba 0f01 	cmp.w	sl, #1
 8007d02:	f47f af41 	bne.w	8007b88 <_scanf_float+0x60>
 8007d06:	f04f 0a02 	mov.w	sl, #2
 8007d0a:	e7d1      	b.n	8007cb0 <_scanf_float+0x188>
 8007d0c:	b97d      	cbnz	r5, 8007d2e <_scanf_float+0x206>
 8007d0e:	f1b9 0f00 	cmp.w	r9, #0
 8007d12:	f47f af3c 	bne.w	8007b8e <_scanf_float+0x66>
 8007d16:	6822      	ldr	r2, [r4, #0]
 8007d18:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007d1c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007d20:	f47f af39 	bne.w	8007b96 <_scanf_float+0x6e>
 8007d24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d28:	6022      	str	r2, [r4, #0]
 8007d2a:	2501      	movs	r5, #1
 8007d2c:	e7c0      	b.n	8007cb0 <_scanf_float+0x188>
 8007d2e:	2d03      	cmp	r5, #3
 8007d30:	d0e2      	beq.n	8007cf8 <_scanf_float+0x1d0>
 8007d32:	2d05      	cmp	r5, #5
 8007d34:	e7de      	b.n	8007cf4 <_scanf_float+0x1cc>
 8007d36:	2d02      	cmp	r5, #2
 8007d38:	f47f af26 	bne.w	8007b88 <_scanf_float+0x60>
 8007d3c:	2503      	movs	r5, #3
 8007d3e:	e7b7      	b.n	8007cb0 <_scanf_float+0x188>
 8007d40:	2d06      	cmp	r5, #6
 8007d42:	f47f af21 	bne.w	8007b88 <_scanf_float+0x60>
 8007d46:	2507      	movs	r5, #7
 8007d48:	e7b2      	b.n	8007cb0 <_scanf_float+0x188>
 8007d4a:	6822      	ldr	r2, [r4, #0]
 8007d4c:	0591      	lsls	r1, r2, #22
 8007d4e:	f57f af1b 	bpl.w	8007b88 <_scanf_float+0x60>
 8007d52:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007d56:	6022      	str	r2, [r4, #0]
 8007d58:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d5c:	e7a8      	b.n	8007cb0 <_scanf_float+0x188>
 8007d5e:	6822      	ldr	r2, [r4, #0]
 8007d60:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007d64:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007d68:	d006      	beq.n	8007d78 <_scanf_float+0x250>
 8007d6a:	0550      	lsls	r0, r2, #21
 8007d6c:	f57f af0c 	bpl.w	8007b88 <_scanf_float+0x60>
 8007d70:	f1b9 0f00 	cmp.w	r9, #0
 8007d74:	f43f af0f 	beq.w	8007b96 <_scanf_float+0x6e>
 8007d78:	0591      	lsls	r1, r2, #22
 8007d7a:	bf58      	it	pl
 8007d7c:	9901      	ldrpl	r1, [sp, #4]
 8007d7e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d82:	bf58      	it	pl
 8007d84:	eba9 0101 	subpl.w	r1, r9, r1
 8007d88:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007d8c:	bf58      	it	pl
 8007d8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007d92:	6022      	str	r2, [r4, #0]
 8007d94:	f04f 0900 	mov.w	r9, #0
 8007d98:	e78a      	b.n	8007cb0 <_scanf_float+0x188>
 8007d9a:	f04f 0a03 	mov.w	sl, #3
 8007d9e:	e787      	b.n	8007cb0 <_scanf_float+0x188>
 8007da0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007da4:	4639      	mov	r1, r7
 8007da6:	4640      	mov	r0, r8
 8007da8:	4798      	blx	r3
 8007daa:	2800      	cmp	r0, #0
 8007dac:	f43f aedf 	beq.w	8007b6e <_scanf_float+0x46>
 8007db0:	e6ea      	b.n	8007b88 <_scanf_float+0x60>
 8007db2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007db6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007dba:	463a      	mov	r2, r7
 8007dbc:	4640      	mov	r0, r8
 8007dbe:	4798      	blx	r3
 8007dc0:	6923      	ldr	r3, [r4, #16]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	6123      	str	r3, [r4, #16]
 8007dc6:	e6ec      	b.n	8007ba2 <_scanf_float+0x7a>
 8007dc8:	1e6b      	subs	r3, r5, #1
 8007dca:	2b06      	cmp	r3, #6
 8007dcc:	d825      	bhi.n	8007e1a <_scanf_float+0x2f2>
 8007dce:	2d02      	cmp	r5, #2
 8007dd0:	d836      	bhi.n	8007e40 <_scanf_float+0x318>
 8007dd2:	455e      	cmp	r6, fp
 8007dd4:	f67f aee8 	bls.w	8007ba8 <_scanf_float+0x80>
 8007dd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ddc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007de0:	463a      	mov	r2, r7
 8007de2:	4640      	mov	r0, r8
 8007de4:	4798      	blx	r3
 8007de6:	6923      	ldr	r3, [r4, #16]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	6123      	str	r3, [r4, #16]
 8007dec:	e7f1      	b.n	8007dd2 <_scanf_float+0x2aa>
 8007dee:	9802      	ldr	r0, [sp, #8]
 8007df0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007df4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007df8:	9002      	str	r0, [sp, #8]
 8007dfa:	463a      	mov	r2, r7
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	4798      	blx	r3
 8007e00:	6923      	ldr	r3, [r4, #16]
 8007e02:	3b01      	subs	r3, #1
 8007e04:	6123      	str	r3, [r4, #16]
 8007e06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e0a:	fa5f fa8a 	uxtb.w	sl, sl
 8007e0e:	f1ba 0f02 	cmp.w	sl, #2
 8007e12:	d1ec      	bne.n	8007dee <_scanf_float+0x2c6>
 8007e14:	3d03      	subs	r5, #3
 8007e16:	b2ed      	uxtb	r5, r5
 8007e18:	1b76      	subs	r6, r6, r5
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	05da      	lsls	r2, r3, #23
 8007e1e:	d52f      	bpl.n	8007e80 <_scanf_float+0x358>
 8007e20:	055b      	lsls	r3, r3, #21
 8007e22:	d510      	bpl.n	8007e46 <_scanf_float+0x31e>
 8007e24:	455e      	cmp	r6, fp
 8007e26:	f67f aebf 	bls.w	8007ba8 <_scanf_float+0x80>
 8007e2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e32:	463a      	mov	r2, r7
 8007e34:	4640      	mov	r0, r8
 8007e36:	4798      	blx	r3
 8007e38:	6923      	ldr	r3, [r4, #16]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	6123      	str	r3, [r4, #16]
 8007e3e:	e7f1      	b.n	8007e24 <_scanf_float+0x2fc>
 8007e40:	46aa      	mov	sl, r5
 8007e42:	9602      	str	r6, [sp, #8]
 8007e44:	e7df      	b.n	8007e06 <_scanf_float+0x2de>
 8007e46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007e4a:	6923      	ldr	r3, [r4, #16]
 8007e4c:	2965      	cmp	r1, #101	; 0x65
 8007e4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e52:	f106 35ff 	add.w	r5, r6, #4294967295
 8007e56:	6123      	str	r3, [r4, #16]
 8007e58:	d00c      	beq.n	8007e74 <_scanf_float+0x34c>
 8007e5a:	2945      	cmp	r1, #69	; 0x45
 8007e5c:	d00a      	beq.n	8007e74 <_scanf_float+0x34c>
 8007e5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e62:	463a      	mov	r2, r7
 8007e64:	4640      	mov	r0, r8
 8007e66:	4798      	blx	r3
 8007e68:	6923      	ldr	r3, [r4, #16]
 8007e6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	1eb5      	subs	r5, r6, #2
 8007e72:	6123      	str	r3, [r4, #16]
 8007e74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e78:	463a      	mov	r2, r7
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	4798      	blx	r3
 8007e7e:	462e      	mov	r6, r5
 8007e80:	6825      	ldr	r5, [r4, #0]
 8007e82:	f015 0510 	ands.w	r5, r5, #16
 8007e86:	d159      	bne.n	8007f3c <_scanf_float+0x414>
 8007e88:	7035      	strb	r5, [r6, #0]
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e94:	d11b      	bne.n	8007ece <_scanf_float+0x3a6>
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	454b      	cmp	r3, r9
 8007e9a:	eba3 0209 	sub.w	r2, r3, r9
 8007e9e:	d123      	bne.n	8007ee8 <_scanf_float+0x3c0>
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4659      	mov	r1, fp
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	f000 fe99 	bl	8008bdc <_strtod_r>
 8007eaa:	6822      	ldr	r2, [r4, #0]
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	f012 0f02 	tst.w	r2, #2
 8007eb2:	ec57 6b10 	vmov	r6, r7, d0
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	d021      	beq.n	8007efe <_scanf_float+0x3d6>
 8007eba:	9903      	ldr	r1, [sp, #12]
 8007ebc:	1d1a      	adds	r2, r3, #4
 8007ebe:	600a      	str	r2, [r1, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	e9c3 6700 	strd	r6, r7, [r3]
 8007ec6:	68e3      	ldr	r3, [r4, #12]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	60e3      	str	r3, [r4, #12]
 8007ecc:	e66d      	b.n	8007baa <_scanf_float+0x82>
 8007ece:	9b04      	ldr	r3, [sp, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d0e5      	beq.n	8007ea0 <_scanf_float+0x378>
 8007ed4:	9905      	ldr	r1, [sp, #20]
 8007ed6:	230a      	movs	r3, #10
 8007ed8:	462a      	mov	r2, r5
 8007eda:	3101      	adds	r1, #1
 8007edc:	4640      	mov	r0, r8
 8007ede:	f000 ff05 	bl	8008cec <_strtol_r>
 8007ee2:	9b04      	ldr	r3, [sp, #16]
 8007ee4:	9e05      	ldr	r6, [sp, #20]
 8007ee6:	1ac2      	subs	r2, r0, r3
 8007ee8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007eec:	429e      	cmp	r6, r3
 8007eee:	bf28      	it	cs
 8007ef0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007ef4:	4912      	ldr	r1, [pc, #72]	; (8007f40 <_scanf_float+0x418>)
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f000 f82c 	bl	8007f54 <siprintf>
 8007efc:	e7d0      	b.n	8007ea0 <_scanf_float+0x378>
 8007efe:	9903      	ldr	r1, [sp, #12]
 8007f00:	f012 0f04 	tst.w	r2, #4
 8007f04:	f103 0204 	add.w	r2, r3, #4
 8007f08:	600a      	str	r2, [r1, #0]
 8007f0a:	d1d9      	bne.n	8007ec0 <_scanf_float+0x398>
 8007f0c:	f8d3 8000 	ldr.w	r8, [r3]
 8007f10:	ee10 2a10 	vmov	r2, s0
 8007f14:	ee10 0a10 	vmov	r0, s0
 8007f18:	463b      	mov	r3, r7
 8007f1a:	4639      	mov	r1, r7
 8007f1c:	f7f8 fe0e 	bl	8000b3c <__aeabi_dcmpun>
 8007f20:	b128      	cbz	r0, 8007f2e <_scanf_float+0x406>
 8007f22:	4808      	ldr	r0, [pc, #32]	; (8007f44 <_scanf_float+0x41c>)
 8007f24:	f000 f810 	bl	8007f48 <nanf>
 8007f28:	ed88 0a00 	vstr	s0, [r8]
 8007f2c:	e7cb      	b.n	8007ec6 <_scanf_float+0x39e>
 8007f2e:	4630      	mov	r0, r6
 8007f30:	4639      	mov	r1, r7
 8007f32:	f7f8 fe61 	bl	8000bf8 <__aeabi_d2f>
 8007f36:	f8c8 0000 	str.w	r0, [r8]
 8007f3a:	e7c4      	b.n	8007ec6 <_scanf_float+0x39e>
 8007f3c:	2500      	movs	r5, #0
 8007f3e:	e634      	b.n	8007baa <_scanf_float+0x82>
 8007f40:	0800bbdc 	.word	0x0800bbdc
 8007f44:	0800bfe8 	.word	0x0800bfe8

08007f48 <nanf>:
 8007f48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007f50 <nanf+0x8>
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	7fc00000 	.word	0x7fc00000

08007f54 <siprintf>:
 8007f54:	b40e      	push	{r1, r2, r3}
 8007f56:	b500      	push	{lr}
 8007f58:	b09c      	sub	sp, #112	; 0x70
 8007f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8007f5c:	9002      	str	r0, [sp, #8]
 8007f5e:	9006      	str	r0, [sp, #24]
 8007f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f64:	4809      	ldr	r0, [pc, #36]	; (8007f8c <siprintf+0x38>)
 8007f66:	9107      	str	r1, [sp, #28]
 8007f68:	9104      	str	r1, [sp, #16]
 8007f6a:	4909      	ldr	r1, [pc, #36]	; (8007f90 <siprintf+0x3c>)
 8007f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f70:	9105      	str	r1, [sp, #20]
 8007f72:	6800      	ldr	r0, [r0, #0]
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	a902      	add	r1, sp, #8
 8007f78:	f002 fee4 	bl	800ad44 <_svfiprintf_r>
 8007f7c:	9b02      	ldr	r3, [sp, #8]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	701a      	strb	r2, [r3, #0]
 8007f82:	b01c      	add	sp, #112	; 0x70
 8007f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f88:	b003      	add	sp, #12
 8007f8a:	4770      	bx	lr
 8007f8c:	20000014 	.word	0x20000014
 8007f90:	ffff0208 	.word	0xffff0208

08007f94 <sulp>:
 8007f94:	b570      	push	{r4, r5, r6, lr}
 8007f96:	4604      	mov	r4, r0
 8007f98:	460d      	mov	r5, r1
 8007f9a:	ec45 4b10 	vmov	d0, r4, r5
 8007f9e:	4616      	mov	r6, r2
 8007fa0:	f002 fc2e 	bl	800a800 <__ulp>
 8007fa4:	ec51 0b10 	vmov	r0, r1, d0
 8007fa8:	b17e      	cbz	r6, 8007fca <sulp+0x36>
 8007faa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007fae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	dd09      	ble.n	8007fca <sulp+0x36>
 8007fb6:	051b      	lsls	r3, r3, #20
 8007fb8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007fbc:	2400      	movs	r4, #0
 8007fbe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	462b      	mov	r3, r5
 8007fc6:	f7f8 fb1f 	bl	8000608 <__aeabi_dmul>
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	0000      	movs	r0, r0
	...

08007fd0 <_strtod_l>:
 8007fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	ed2d 8b02 	vpush	{d8}
 8007fd8:	b09d      	sub	sp, #116	; 0x74
 8007fda:	461f      	mov	r7, r3
 8007fdc:	2300      	movs	r3, #0
 8007fde:	9318      	str	r3, [sp, #96]	; 0x60
 8007fe0:	4ba2      	ldr	r3, [pc, #648]	; (800826c <_strtod_l+0x29c>)
 8007fe2:	9213      	str	r2, [sp, #76]	; 0x4c
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	9305      	str	r3, [sp, #20]
 8007fe8:	4604      	mov	r4, r0
 8007fea:	4618      	mov	r0, r3
 8007fec:	4688      	mov	r8, r1
 8007fee:	f7f8 f8f7 	bl	80001e0 <strlen>
 8007ff2:	f04f 0a00 	mov.w	sl, #0
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	f04f 0b00 	mov.w	fp, #0
 8007ffc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008002:	781a      	ldrb	r2, [r3, #0]
 8008004:	2a2b      	cmp	r2, #43	; 0x2b
 8008006:	d04e      	beq.n	80080a6 <_strtod_l+0xd6>
 8008008:	d83b      	bhi.n	8008082 <_strtod_l+0xb2>
 800800a:	2a0d      	cmp	r2, #13
 800800c:	d834      	bhi.n	8008078 <_strtod_l+0xa8>
 800800e:	2a08      	cmp	r2, #8
 8008010:	d834      	bhi.n	800807c <_strtod_l+0xac>
 8008012:	2a00      	cmp	r2, #0
 8008014:	d03e      	beq.n	8008094 <_strtod_l+0xc4>
 8008016:	2300      	movs	r3, #0
 8008018:	930a      	str	r3, [sp, #40]	; 0x28
 800801a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800801c:	7833      	ldrb	r3, [r6, #0]
 800801e:	2b30      	cmp	r3, #48	; 0x30
 8008020:	f040 80b0 	bne.w	8008184 <_strtod_l+0x1b4>
 8008024:	7873      	ldrb	r3, [r6, #1]
 8008026:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800802a:	2b58      	cmp	r3, #88	; 0x58
 800802c:	d168      	bne.n	8008100 <_strtod_l+0x130>
 800802e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	ab18      	add	r3, sp, #96	; 0x60
 8008034:	9702      	str	r7, [sp, #8]
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	4a8d      	ldr	r2, [pc, #564]	; (8008270 <_strtod_l+0x2a0>)
 800803a:	ab19      	add	r3, sp, #100	; 0x64
 800803c:	a917      	add	r1, sp, #92	; 0x5c
 800803e:	4620      	mov	r0, r4
 8008040:	f001 fd38 	bl	8009ab4 <__gethex>
 8008044:	f010 0707 	ands.w	r7, r0, #7
 8008048:	4605      	mov	r5, r0
 800804a:	d005      	beq.n	8008058 <_strtod_l+0x88>
 800804c:	2f06      	cmp	r7, #6
 800804e:	d12c      	bne.n	80080aa <_strtod_l+0xda>
 8008050:	3601      	adds	r6, #1
 8008052:	2300      	movs	r3, #0
 8008054:	9617      	str	r6, [sp, #92]	; 0x5c
 8008056:	930a      	str	r3, [sp, #40]	; 0x28
 8008058:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800805a:	2b00      	cmp	r3, #0
 800805c:	f040 8590 	bne.w	8008b80 <_strtod_l+0xbb0>
 8008060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008062:	b1eb      	cbz	r3, 80080a0 <_strtod_l+0xd0>
 8008064:	4652      	mov	r2, sl
 8008066:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800806a:	ec43 2b10 	vmov	d0, r2, r3
 800806e:	b01d      	add	sp, #116	; 0x74
 8008070:	ecbd 8b02 	vpop	{d8}
 8008074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008078:	2a20      	cmp	r2, #32
 800807a:	d1cc      	bne.n	8008016 <_strtod_l+0x46>
 800807c:	3301      	adds	r3, #1
 800807e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008080:	e7be      	b.n	8008000 <_strtod_l+0x30>
 8008082:	2a2d      	cmp	r2, #45	; 0x2d
 8008084:	d1c7      	bne.n	8008016 <_strtod_l+0x46>
 8008086:	2201      	movs	r2, #1
 8008088:	920a      	str	r2, [sp, #40]	; 0x28
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	9217      	str	r2, [sp, #92]	; 0x5c
 800808e:	785b      	ldrb	r3, [r3, #1]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1c2      	bne.n	800801a <_strtod_l+0x4a>
 8008094:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008096:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800809a:	2b00      	cmp	r3, #0
 800809c:	f040 856e 	bne.w	8008b7c <_strtod_l+0xbac>
 80080a0:	4652      	mov	r2, sl
 80080a2:	465b      	mov	r3, fp
 80080a4:	e7e1      	b.n	800806a <_strtod_l+0x9a>
 80080a6:	2200      	movs	r2, #0
 80080a8:	e7ee      	b.n	8008088 <_strtod_l+0xb8>
 80080aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80080ac:	b13a      	cbz	r2, 80080be <_strtod_l+0xee>
 80080ae:	2135      	movs	r1, #53	; 0x35
 80080b0:	a81a      	add	r0, sp, #104	; 0x68
 80080b2:	f002 fcb0 	bl	800aa16 <__copybits>
 80080b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80080b8:	4620      	mov	r0, r4
 80080ba:	f002 f86f 	bl	800a19c <_Bfree>
 80080be:	3f01      	subs	r7, #1
 80080c0:	2f04      	cmp	r7, #4
 80080c2:	d806      	bhi.n	80080d2 <_strtod_l+0x102>
 80080c4:	e8df f007 	tbb	[pc, r7]
 80080c8:	1714030a 	.word	0x1714030a
 80080cc:	0a          	.byte	0x0a
 80080cd:	00          	.byte	0x00
 80080ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80080d2:	0728      	lsls	r0, r5, #28
 80080d4:	d5c0      	bpl.n	8008058 <_strtod_l+0x88>
 80080d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80080da:	e7bd      	b.n	8008058 <_strtod_l+0x88>
 80080dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80080e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80080e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80080e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80080ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80080ee:	e7f0      	b.n	80080d2 <_strtod_l+0x102>
 80080f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008274 <_strtod_l+0x2a4>
 80080f4:	e7ed      	b.n	80080d2 <_strtod_l+0x102>
 80080f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80080fa:	f04f 3aff 	mov.w	sl, #4294967295
 80080fe:	e7e8      	b.n	80080d2 <_strtod_l+0x102>
 8008100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	9217      	str	r2, [sp, #92]	; 0x5c
 8008106:	785b      	ldrb	r3, [r3, #1]
 8008108:	2b30      	cmp	r3, #48	; 0x30
 800810a:	d0f9      	beq.n	8008100 <_strtod_l+0x130>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d0a3      	beq.n	8008058 <_strtod_l+0x88>
 8008110:	2301      	movs	r3, #1
 8008112:	f04f 0900 	mov.w	r9, #0
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800811a:	9308      	str	r3, [sp, #32]
 800811c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008120:	464f      	mov	r7, r9
 8008122:	220a      	movs	r2, #10
 8008124:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008126:	7806      	ldrb	r6, [r0, #0]
 8008128:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800812c:	b2d9      	uxtb	r1, r3
 800812e:	2909      	cmp	r1, #9
 8008130:	d92a      	bls.n	8008188 <_strtod_l+0x1b8>
 8008132:	9905      	ldr	r1, [sp, #20]
 8008134:	462a      	mov	r2, r5
 8008136:	f002 ff1f 	bl	800af78 <strncmp>
 800813a:	b398      	cbz	r0, 80081a4 <_strtod_l+0x1d4>
 800813c:	2000      	movs	r0, #0
 800813e:	4632      	mov	r2, r6
 8008140:	463d      	mov	r5, r7
 8008142:	9005      	str	r0, [sp, #20]
 8008144:	4603      	mov	r3, r0
 8008146:	2a65      	cmp	r2, #101	; 0x65
 8008148:	d001      	beq.n	800814e <_strtod_l+0x17e>
 800814a:	2a45      	cmp	r2, #69	; 0x45
 800814c:	d118      	bne.n	8008180 <_strtod_l+0x1b0>
 800814e:	b91d      	cbnz	r5, 8008158 <_strtod_l+0x188>
 8008150:	9a04      	ldr	r2, [sp, #16]
 8008152:	4302      	orrs	r2, r0
 8008154:	d09e      	beq.n	8008094 <_strtod_l+0xc4>
 8008156:	2500      	movs	r5, #0
 8008158:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800815c:	f108 0201 	add.w	r2, r8, #1
 8008160:	9217      	str	r2, [sp, #92]	; 0x5c
 8008162:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008166:	2a2b      	cmp	r2, #43	; 0x2b
 8008168:	d075      	beq.n	8008256 <_strtod_l+0x286>
 800816a:	2a2d      	cmp	r2, #45	; 0x2d
 800816c:	d07b      	beq.n	8008266 <_strtod_l+0x296>
 800816e:	f04f 0c00 	mov.w	ip, #0
 8008172:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008176:	2909      	cmp	r1, #9
 8008178:	f240 8082 	bls.w	8008280 <_strtod_l+0x2b0>
 800817c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008180:	2600      	movs	r6, #0
 8008182:	e09d      	b.n	80082c0 <_strtod_l+0x2f0>
 8008184:	2300      	movs	r3, #0
 8008186:	e7c4      	b.n	8008112 <_strtod_l+0x142>
 8008188:	2f08      	cmp	r7, #8
 800818a:	bfd8      	it	le
 800818c:	9907      	ldrle	r1, [sp, #28]
 800818e:	f100 0001 	add.w	r0, r0, #1
 8008192:	bfda      	itte	le
 8008194:	fb02 3301 	mlale	r3, r2, r1, r3
 8008198:	9307      	strle	r3, [sp, #28]
 800819a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800819e:	3701      	adds	r7, #1
 80081a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80081a2:	e7bf      	b.n	8008124 <_strtod_l+0x154>
 80081a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081a6:	195a      	adds	r2, r3, r5
 80081a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80081aa:	5d5a      	ldrb	r2, [r3, r5]
 80081ac:	2f00      	cmp	r7, #0
 80081ae:	d037      	beq.n	8008220 <_strtod_l+0x250>
 80081b0:	9005      	str	r0, [sp, #20]
 80081b2:	463d      	mov	r5, r7
 80081b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80081b8:	2b09      	cmp	r3, #9
 80081ba:	d912      	bls.n	80081e2 <_strtod_l+0x212>
 80081bc:	2301      	movs	r3, #1
 80081be:	e7c2      	b.n	8008146 <_strtod_l+0x176>
 80081c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80081c6:	785a      	ldrb	r2, [r3, #1]
 80081c8:	3001      	adds	r0, #1
 80081ca:	2a30      	cmp	r2, #48	; 0x30
 80081cc:	d0f8      	beq.n	80081c0 <_strtod_l+0x1f0>
 80081ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80081d2:	2b08      	cmp	r3, #8
 80081d4:	f200 84d9 	bhi.w	8008b8a <_strtod_l+0xbba>
 80081d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081da:	9005      	str	r0, [sp, #20]
 80081dc:	2000      	movs	r0, #0
 80081de:	9308      	str	r3, [sp, #32]
 80081e0:	4605      	mov	r5, r0
 80081e2:	3a30      	subs	r2, #48	; 0x30
 80081e4:	f100 0301 	add.w	r3, r0, #1
 80081e8:	d014      	beq.n	8008214 <_strtod_l+0x244>
 80081ea:	9905      	ldr	r1, [sp, #20]
 80081ec:	4419      	add	r1, r3
 80081ee:	9105      	str	r1, [sp, #20]
 80081f0:	462b      	mov	r3, r5
 80081f2:	eb00 0e05 	add.w	lr, r0, r5
 80081f6:	210a      	movs	r1, #10
 80081f8:	4573      	cmp	r3, lr
 80081fa:	d113      	bne.n	8008224 <_strtod_l+0x254>
 80081fc:	182b      	adds	r3, r5, r0
 80081fe:	2b08      	cmp	r3, #8
 8008200:	f105 0501 	add.w	r5, r5, #1
 8008204:	4405      	add	r5, r0
 8008206:	dc1c      	bgt.n	8008242 <_strtod_l+0x272>
 8008208:	9907      	ldr	r1, [sp, #28]
 800820a:	230a      	movs	r3, #10
 800820c:	fb03 2301 	mla	r3, r3, r1, r2
 8008210:	9307      	str	r3, [sp, #28]
 8008212:	2300      	movs	r3, #0
 8008214:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008216:	1c51      	adds	r1, r2, #1
 8008218:	9117      	str	r1, [sp, #92]	; 0x5c
 800821a:	7852      	ldrb	r2, [r2, #1]
 800821c:	4618      	mov	r0, r3
 800821e:	e7c9      	b.n	80081b4 <_strtod_l+0x1e4>
 8008220:	4638      	mov	r0, r7
 8008222:	e7d2      	b.n	80081ca <_strtod_l+0x1fa>
 8008224:	2b08      	cmp	r3, #8
 8008226:	dc04      	bgt.n	8008232 <_strtod_l+0x262>
 8008228:	9e07      	ldr	r6, [sp, #28]
 800822a:	434e      	muls	r6, r1
 800822c:	9607      	str	r6, [sp, #28]
 800822e:	3301      	adds	r3, #1
 8008230:	e7e2      	b.n	80081f8 <_strtod_l+0x228>
 8008232:	f103 0c01 	add.w	ip, r3, #1
 8008236:	f1bc 0f10 	cmp.w	ip, #16
 800823a:	bfd8      	it	le
 800823c:	fb01 f909 	mulle.w	r9, r1, r9
 8008240:	e7f5      	b.n	800822e <_strtod_l+0x25e>
 8008242:	2d10      	cmp	r5, #16
 8008244:	bfdc      	itt	le
 8008246:	230a      	movle	r3, #10
 8008248:	fb03 2909 	mlale	r9, r3, r9, r2
 800824c:	e7e1      	b.n	8008212 <_strtod_l+0x242>
 800824e:	2300      	movs	r3, #0
 8008250:	9305      	str	r3, [sp, #20]
 8008252:	2301      	movs	r3, #1
 8008254:	e77c      	b.n	8008150 <_strtod_l+0x180>
 8008256:	f04f 0c00 	mov.w	ip, #0
 800825a:	f108 0202 	add.w	r2, r8, #2
 800825e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008260:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008264:	e785      	b.n	8008172 <_strtod_l+0x1a2>
 8008266:	f04f 0c01 	mov.w	ip, #1
 800826a:	e7f6      	b.n	800825a <_strtod_l+0x28a>
 800826c:	0800be30 	.word	0x0800be30
 8008270:	0800bbe4 	.word	0x0800bbe4
 8008274:	7ff00000 	.word	0x7ff00000
 8008278:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800827a:	1c51      	adds	r1, r2, #1
 800827c:	9117      	str	r1, [sp, #92]	; 0x5c
 800827e:	7852      	ldrb	r2, [r2, #1]
 8008280:	2a30      	cmp	r2, #48	; 0x30
 8008282:	d0f9      	beq.n	8008278 <_strtod_l+0x2a8>
 8008284:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008288:	2908      	cmp	r1, #8
 800828a:	f63f af79 	bhi.w	8008180 <_strtod_l+0x1b0>
 800828e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008292:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008294:	9206      	str	r2, [sp, #24]
 8008296:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008298:	1c51      	adds	r1, r2, #1
 800829a:	9117      	str	r1, [sp, #92]	; 0x5c
 800829c:	7852      	ldrb	r2, [r2, #1]
 800829e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80082a2:	2e09      	cmp	r6, #9
 80082a4:	d937      	bls.n	8008316 <_strtod_l+0x346>
 80082a6:	9e06      	ldr	r6, [sp, #24]
 80082a8:	1b89      	subs	r1, r1, r6
 80082aa:	2908      	cmp	r1, #8
 80082ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80082b0:	dc02      	bgt.n	80082b8 <_strtod_l+0x2e8>
 80082b2:	4576      	cmp	r6, lr
 80082b4:	bfa8      	it	ge
 80082b6:	4676      	movge	r6, lr
 80082b8:	f1bc 0f00 	cmp.w	ip, #0
 80082bc:	d000      	beq.n	80082c0 <_strtod_l+0x2f0>
 80082be:	4276      	negs	r6, r6
 80082c0:	2d00      	cmp	r5, #0
 80082c2:	d14d      	bne.n	8008360 <_strtod_l+0x390>
 80082c4:	9904      	ldr	r1, [sp, #16]
 80082c6:	4301      	orrs	r1, r0
 80082c8:	f47f aec6 	bne.w	8008058 <_strtod_l+0x88>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f47f aee1 	bne.w	8008094 <_strtod_l+0xc4>
 80082d2:	2a69      	cmp	r2, #105	; 0x69
 80082d4:	d027      	beq.n	8008326 <_strtod_l+0x356>
 80082d6:	dc24      	bgt.n	8008322 <_strtod_l+0x352>
 80082d8:	2a49      	cmp	r2, #73	; 0x49
 80082da:	d024      	beq.n	8008326 <_strtod_l+0x356>
 80082dc:	2a4e      	cmp	r2, #78	; 0x4e
 80082de:	f47f aed9 	bne.w	8008094 <_strtod_l+0xc4>
 80082e2:	499f      	ldr	r1, [pc, #636]	; (8008560 <_strtod_l+0x590>)
 80082e4:	a817      	add	r0, sp, #92	; 0x5c
 80082e6:	f001 fe3d 	bl	8009f64 <__match>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	f43f aed2 	beq.w	8008094 <_strtod_l+0xc4>
 80082f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b28      	cmp	r3, #40	; 0x28
 80082f6:	d12d      	bne.n	8008354 <_strtod_l+0x384>
 80082f8:	499a      	ldr	r1, [pc, #616]	; (8008564 <_strtod_l+0x594>)
 80082fa:	aa1a      	add	r2, sp, #104	; 0x68
 80082fc:	a817      	add	r0, sp, #92	; 0x5c
 80082fe:	f001 fe45 	bl	8009f8c <__hexnan>
 8008302:	2805      	cmp	r0, #5
 8008304:	d126      	bne.n	8008354 <_strtod_l+0x384>
 8008306:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008308:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800830c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008310:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008314:	e6a0      	b.n	8008058 <_strtod_l+0x88>
 8008316:	210a      	movs	r1, #10
 8008318:	fb01 2e0e 	mla	lr, r1, lr, r2
 800831c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008320:	e7b9      	b.n	8008296 <_strtod_l+0x2c6>
 8008322:	2a6e      	cmp	r2, #110	; 0x6e
 8008324:	e7db      	b.n	80082de <_strtod_l+0x30e>
 8008326:	4990      	ldr	r1, [pc, #576]	; (8008568 <_strtod_l+0x598>)
 8008328:	a817      	add	r0, sp, #92	; 0x5c
 800832a:	f001 fe1b 	bl	8009f64 <__match>
 800832e:	2800      	cmp	r0, #0
 8008330:	f43f aeb0 	beq.w	8008094 <_strtod_l+0xc4>
 8008334:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008336:	498d      	ldr	r1, [pc, #564]	; (800856c <_strtod_l+0x59c>)
 8008338:	3b01      	subs	r3, #1
 800833a:	a817      	add	r0, sp, #92	; 0x5c
 800833c:	9317      	str	r3, [sp, #92]	; 0x5c
 800833e:	f001 fe11 	bl	8009f64 <__match>
 8008342:	b910      	cbnz	r0, 800834a <_strtod_l+0x37a>
 8008344:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008346:	3301      	adds	r3, #1
 8008348:	9317      	str	r3, [sp, #92]	; 0x5c
 800834a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800857c <_strtod_l+0x5ac>
 800834e:	f04f 0a00 	mov.w	sl, #0
 8008352:	e681      	b.n	8008058 <_strtod_l+0x88>
 8008354:	4886      	ldr	r0, [pc, #536]	; (8008570 <_strtod_l+0x5a0>)
 8008356:	f002 fdf7 	bl	800af48 <nan>
 800835a:	ec5b ab10 	vmov	sl, fp, d0
 800835e:	e67b      	b.n	8008058 <_strtod_l+0x88>
 8008360:	9b05      	ldr	r3, [sp, #20]
 8008362:	9807      	ldr	r0, [sp, #28]
 8008364:	1af3      	subs	r3, r6, r3
 8008366:	2f00      	cmp	r7, #0
 8008368:	bf08      	it	eq
 800836a:	462f      	moveq	r7, r5
 800836c:	2d10      	cmp	r5, #16
 800836e:	9306      	str	r3, [sp, #24]
 8008370:	46a8      	mov	r8, r5
 8008372:	bfa8      	it	ge
 8008374:	f04f 0810 	movge.w	r8, #16
 8008378:	f7f8 f8cc 	bl	8000514 <__aeabi_ui2d>
 800837c:	2d09      	cmp	r5, #9
 800837e:	4682      	mov	sl, r0
 8008380:	468b      	mov	fp, r1
 8008382:	dd13      	ble.n	80083ac <_strtod_l+0x3dc>
 8008384:	4b7b      	ldr	r3, [pc, #492]	; (8008574 <_strtod_l+0x5a4>)
 8008386:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800838a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800838e:	f7f8 f93b 	bl	8000608 <__aeabi_dmul>
 8008392:	4682      	mov	sl, r0
 8008394:	4648      	mov	r0, r9
 8008396:	468b      	mov	fp, r1
 8008398:	f7f8 f8bc 	bl	8000514 <__aeabi_ui2d>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	4650      	mov	r0, sl
 80083a2:	4659      	mov	r1, fp
 80083a4:	f7f7 ff7a 	bl	800029c <__adddf3>
 80083a8:	4682      	mov	sl, r0
 80083aa:	468b      	mov	fp, r1
 80083ac:	2d0f      	cmp	r5, #15
 80083ae:	dc38      	bgt.n	8008422 <_strtod_l+0x452>
 80083b0:	9b06      	ldr	r3, [sp, #24]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f43f ae50 	beq.w	8008058 <_strtod_l+0x88>
 80083b8:	dd24      	ble.n	8008404 <_strtod_l+0x434>
 80083ba:	2b16      	cmp	r3, #22
 80083bc:	dc0b      	bgt.n	80083d6 <_strtod_l+0x406>
 80083be:	496d      	ldr	r1, [pc, #436]	; (8008574 <_strtod_l+0x5a4>)
 80083c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083c8:	4652      	mov	r2, sl
 80083ca:	465b      	mov	r3, fp
 80083cc:	f7f8 f91c 	bl	8000608 <__aeabi_dmul>
 80083d0:	4682      	mov	sl, r0
 80083d2:	468b      	mov	fp, r1
 80083d4:	e640      	b.n	8008058 <_strtod_l+0x88>
 80083d6:	9a06      	ldr	r2, [sp, #24]
 80083d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80083dc:	4293      	cmp	r3, r2
 80083de:	db20      	blt.n	8008422 <_strtod_l+0x452>
 80083e0:	4c64      	ldr	r4, [pc, #400]	; (8008574 <_strtod_l+0x5a4>)
 80083e2:	f1c5 050f 	rsb	r5, r5, #15
 80083e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80083ea:	4652      	mov	r2, sl
 80083ec:	465b      	mov	r3, fp
 80083ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083f2:	f7f8 f909 	bl	8000608 <__aeabi_dmul>
 80083f6:	9b06      	ldr	r3, [sp, #24]
 80083f8:	1b5d      	subs	r5, r3, r5
 80083fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80083fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008402:	e7e3      	b.n	80083cc <_strtod_l+0x3fc>
 8008404:	9b06      	ldr	r3, [sp, #24]
 8008406:	3316      	adds	r3, #22
 8008408:	db0b      	blt.n	8008422 <_strtod_l+0x452>
 800840a:	9b05      	ldr	r3, [sp, #20]
 800840c:	1b9e      	subs	r6, r3, r6
 800840e:	4b59      	ldr	r3, [pc, #356]	; (8008574 <_strtod_l+0x5a4>)
 8008410:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008414:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008418:	4650      	mov	r0, sl
 800841a:	4659      	mov	r1, fp
 800841c:	f7f8 fa1e 	bl	800085c <__aeabi_ddiv>
 8008420:	e7d6      	b.n	80083d0 <_strtod_l+0x400>
 8008422:	9b06      	ldr	r3, [sp, #24]
 8008424:	eba5 0808 	sub.w	r8, r5, r8
 8008428:	4498      	add	r8, r3
 800842a:	f1b8 0f00 	cmp.w	r8, #0
 800842e:	dd74      	ble.n	800851a <_strtod_l+0x54a>
 8008430:	f018 030f 	ands.w	r3, r8, #15
 8008434:	d00a      	beq.n	800844c <_strtod_l+0x47c>
 8008436:	494f      	ldr	r1, [pc, #316]	; (8008574 <_strtod_l+0x5a4>)
 8008438:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800843c:	4652      	mov	r2, sl
 800843e:	465b      	mov	r3, fp
 8008440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008444:	f7f8 f8e0 	bl	8000608 <__aeabi_dmul>
 8008448:	4682      	mov	sl, r0
 800844a:	468b      	mov	fp, r1
 800844c:	f038 080f 	bics.w	r8, r8, #15
 8008450:	d04f      	beq.n	80084f2 <_strtod_l+0x522>
 8008452:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008456:	dd22      	ble.n	800849e <_strtod_l+0x4ce>
 8008458:	2500      	movs	r5, #0
 800845a:	462e      	mov	r6, r5
 800845c:	9507      	str	r5, [sp, #28]
 800845e:	9505      	str	r5, [sp, #20]
 8008460:	2322      	movs	r3, #34	; 0x22
 8008462:	f8df b118 	ldr.w	fp, [pc, #280]	; 800857c <_strtod_l+0x5ac>
 8008466:	6023      	str	r3, [r4, #0]
 8008468:	f04f 0a00 	mov.w	sl, #0
 800846c:	9b07      	ldr	r3, [sp, #28]
 800846e:	2b00      	cmp	r3, #0
 8008470:	f43f adf2 	beq.w	8008058 <_strtod_l+0x88>
 8008474:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008476:	4620      	mov	r0, r4
 8008478:	f001 fe90 	bl	800a19c <_Bfree>
 800847c:	9905      	ldr	r1, [sp, #20]
 800847e:	4620      	mov	r0, r4
 8008480:	f001 fe8c 	bl	800a19c <_Bfree>
 8008484:	4631      	mov	r1, r6
 8008486:	4620      	mov	r0, r4
 8008488:	f001 fe88 	bl	800a19c <_Bfree>
 800848c:	9907      	ldr	r1, [sp, #28]
 800848e:	4620      	mov	r0, r4
 8008490:	f001 fe84 	bl	800a19c <_Bfree>
 8008494:	4629      	mov	r1, r5
 8008496:	4620      	mov	r0, r4
 8008498:	f001 fe80 	bl	800a19c <_Bfree>
 800849c:	e5dc      	b.n	8008058 <_strtod_l+0x88>
 800849e:	4b36      	ldr	r3, [pc, #216]	; (8008578 <_strtod_l+0x5a8>)
 80084a0:	9304      	str	r3, [sp, #16]
 80084a2:	2300      	movs	r3, #0
 80084a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80084a8:	4650      	mov	r0, sl
 80084aa:	4659      	mov	r1, fp
 80084ac:	4699      	mov	r9, r3
 80084ae:	f1b8 0f01 	cmp.w	r8, #1
 80084b2:	dc21      	bgt.n	80084f8 <_strtod_l+0x528>
 80084b4:	b10b      	cbz	r3, 80084ba <_strtod_l+0x4ea>
 80084b6:	4682      	mov	sl, r0
 80084b8:	468b      	mov	fp, r1
 80084ba:	4b2f      	ldr	r3, [pc, #188]	; (8008578 <_strtod_l+0x5a8>)
 80084bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80084c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80084c4:	4652      	mov	r2, sl
 80084c6:	465b      	mov	r3, fp
 80084c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80084cc:	f7f8 f89c 	bl	8000608 <__aeabi_dmul>
 80084d0:	4b2a      	ldr	r3, [pc, #168]	; (800857c <_strtod_l+0x5ac>)
 80084d2:	460a      	mov	r2, r1
 80084d4:	400b      	ands	r3, r1
 80084d6:	492a      	ldr	r1, [pc, #168]	; (8008580 <_strtod_l+0x5b0>)
 80084d8:	428b      	cmp	r3, r1
 80084da:	4682      	mov	sl, r0
 80084dc:	d8bc      	bhi.n	8008458 <_strtod_l+0x488>
 80084de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80084e2:	428b      	cmp	r3, r1
 80084e4:	bf86      	itte	hi
 80084e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008584 <_strtod_l+0x5b4>
 80084ea:	f04f 3aff 	movhi.w	sl, #4294967295
 80084ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80084f2:	2300      	movs	r3, #0
 80084f4:	9304      	str	r3, [sp, #16]
 80084f6:	e084      	b.n	8008602 <_strtod_l+0x632>
 80084f8:	f018 0f01 	tst.w	r8, #1
 80084fc:	d005      	beq.n	800850a <_strtod_l+0x53a>
 80084fe:	9b04      	ldr	r3, [sp, #16]
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	f7f8 f880 	bl	8000608 <__aeabi_dmul>
 8008508:	2301      	movs	r3, #1
 800850a:	9a04      	ldr	r2, [sp, #16]
 800850c:	3208      	adds	r2, #8
 800850e:	f109 0901 	add.w	r9, r9, #1
 8008512:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008516:	9204      	str	r2, [sp, #16]
 8008518:	e7c9      	b.n	80084ae <_strtod_l+0x4de>
 800851a:	d0ea      	beq.n	80084f2 <_strtod_l+0x522>
 800851c:	f1c8 0800 	rsb	r8, r8, #0
 8008520:	f018 020f 	ands.w	r2, r8, #15
 8008524:	d00a      	beq.n	800853c <_strtod_l+0x56c>
 8008526:	4b13      	ldr	r3, [pc, #76]	; (8008574 <_strtod_l+0x5a4>)
 8008528:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800852c:	4650      	mov	r0, sl
 800852e:	4659      	mov	r1, fp
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	f7f8 f992 	bl	800085c <__aeabi_ddiv>
 8008538:	4682      	mov	sl, r0
 800853a:	468b      	mov	fp, r1
 800853c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008540:	d0d7      	beq.n	80084f2 <_strtod_l+0x522>
 8008542:	f1b8 0f1f 	cmp.w	r8, #31
 8008546:	dd1f      	ble.n	8008588 <_strtod_l+0x5b8>
 8008548:	2500      	movs	r5, #0
 800854a:	462e      	mov	r6, r5
 800854c:	9507      	str	r5, [sp, #28]
 800854e:	9505      	str	r5, [sp, #20]
 8008550:	2322      	movs	r3, #34	; 0x22
 8008552:	f04f 0a00 	mov.w	sl, #0
 8008556:	f04f 0b00 	mov.w	fp, #0
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	e786      	b.n	800846c <_strtod_l+0x49c>
 800855e:	bf00      	nop
 8008560:	0800bbb5 	.word	0x0800bbb5
 8008564:	0800bbf8 	.word	0x0800bbf8
 8008568:	0800bbad 	.word	0x0800bbad
 800856c:	0800bd3c 	.word	0x0800bd3c
 8008570:	0800bfe8 	.word	0x0800bfe8
 8008574:	0800bec8 	.word	0x0800bec8
 8008578:	0800bea0 	.word	0x0800bea0
 800857c:	7ff00000 	.word	0x7ff00000
 8008580:	7ca00000 	.word	0x7ca00000
 8008584:	7fefffff 	.word	0x7fefffff
 8008588:	f018 0310 	ands.w	r3, r8, #16
 800858c:	bf18      	it	ne
 800858e:	236a      	movne	r3, #106	; 0x6a
 8008590:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008940 <_strtod_l+0x970>
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	4650      	mov	r0, sl
 8008598:	4659      	mov	r1, fp
 800859a:	2300      	movs	r3, #0
 800859c:	f018 0f01 	tst.w	r8, #1
 80085a0:	d004      	beq.n	80085ac <_strtod_l+0x5dc>
 80085a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80085a6:	f7f8 f82f 	bl	8000608 <__aeabi_dmul>
 80085aa:	2301      	movs	r3, #1
 80085ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80085b0:	f109 0908 	add.w	r9, r9, #8
 80085b4:	d1f2      	bne.n	800859c <_strtod_l+0x5cc>
 80085b6:	b10b      	cbz	r3, 80085bc <_strtod_l+0x5ec>
 80085b8:	4682      	mov	sl, r0
 80085ba:	468b      	mov	fp, r1
 80085bc:	9b04      	ldr	r3, [sp, #16]
 80085be:	b1c3      	cbz	r3, 80085f2 <_strtod_l+0x622>
 80085c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80085c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	4659      	mov	r1, fp
 80085cc:	dd11      	ble.n	80085f2 <_strtod_l+0x622>
 80085ce:	2b1f      	cmp	r3, #31
 80085d0:	f340 8124 	ble.w	800881c <_strtod_l+0x84c>
 80085d4:	2b34      	cmp	r3, #52	; 0x34
 80085d6:	bfde      	ittt	le
 80085d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80085dc:	f04f 33ff 	movle.w	r3, #4294967295
 80085e0:	fa03 f202 	lslle.w	r2, r3, r2
 80085e4:	f04f 0a00 	mov.w	sl, #0
 80085e8:	bfcc      	ite	gt
 80085ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80085ee:	ea02 0b01 	andle.w	fp, r2, r1
 80085f2:	2200      	movs	r2, #0
 80085f4:	2300      	movs	r3, #0
 80085f6:	4650      	mov	r0, sl
 80085f8:	4659      	mov	r1, fp
 80085fa:	f7f8 fa6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d1a2      	bne.n	8008548 <_strtod_l+0x578>
 8008602:	9b07      	ldr	r3, [sp, #28]
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	9908      	ldr	r1, [sp, #32]
 8008608:	462b      	mov	r3, r5
 800860a:	463a      	mov	r2, r7
 800860c:	4620      	mov	r0, r4
 800860e:	f001 fe2d 	bl	800a26c <__s2b>
 8008612:	9007      	str	r0, [sp, #28]
 8008614:	2800      	cmp	r0, #0
 8008616:	f43f af1f 	beq.w	8008458 <_strtod_l+0x488>
 800861a:	9b05      	ldr	r3, [sp, #20]
 800861c:	1b9e      	subs	r6, r3, r6
 800861e:	9b06      	ldr	r3, [sp, #24]
 8008620:	2b00      	cmp	r3, #0
 8008622:	bfb4      	ite	lt
 8008624:	4633      	movlt	r3, r6
 8008626:	2300      	movge	r3, #0
 8008628:	930c      	str	r3, [sp, #48]	; 0x30
 800862a:	9b06      	ldr	r3, [sp, #24]
 800862c:	2500      	movs	r5, #0
 800862e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008632:	9312      	str	r3, [sp, #72]	; 0x48
 8008634:	462e      	mov	r6, r5
 8008636:	9b07      	ldr	r3, [sp, #28]
 8008638:	4620      	mov	r0, r4
 800863a:	6859      	ldr	r1, [r3, #4]
 800863c:	f001 fd6e 	bl	800a11c <_Balloc>
 8008640:	9005      	str	r0, [sp, #20]
 8008642:	2800      	cmp	r0, #0
 8008644:	f43f af0c 	beq.w	8008460 <_strtod_l+0x490>
 8008648:	9b07      	ldr	r3, [sp, #28]
 800864a:	691a      	ldr	r2, [r3, #16]
 800864c:	3202      	adds	r2, #2
 800864e:	f103 010c 	add.w	r1, r3, #12
 8008652:	0092      	lsls	r2, r2, #2
 8008654:	300c      	adds	r0, #12
 8008656:	f001 fd53 	bl	800a100 <memcpy>
 800865a:	ec4b ab10 	vmov	d0, sl, fp
 800865e:	aa1a      	add	r2, sp, #104	; 0x68
 8008660:	a919      	add	r1, sp, #100	; 0x64
 8008662:	4620      	mov	r0, r4
 8008664:	f002 f948 	bl	800a8f8 <__d2b>
 8008668:	ec4b ab18 	vmov	d8, sl, fp
 800866c:	9018      	str	r0, [sp, #96]	; 0x60
 800866e:	2800      	cmp	r0, #0
 8008670:	f43f aef6 	beq.w	8008460 <_strtod_l+0x490>
 8008674:	2101      	movs	r1, #1
 8008676:	4620      	mov	r0, r4
 8008678:	f001 fe92 	bl	800a3a0 <__i2b>
 800867c:	4606      	mov	r6, r0
 800867e:	2800      	cmp	r0, #0
 8008680:	f43f aeee 	beq.w	8008460 <_strtod_l+0x490>
 8008684:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008686:	9904      	ldr	r1, [sp, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	bfab      	itete	ge
 800868c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800868e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008690:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008692:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008696:	bfac      	ite	ge
 8008698:	eb03 0902 	addge.w	r9, r3, r2
 800869c:	1ad7      	sublt	r7, r2, r3
 800869e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80086a0:	eba3 0801 	sub.w	r8, r3, r1
 80086a4:	4490      	add	r8, r2
 80086a6:	4ba1      	ldr	r3, [pc, #644]	; (800892c <_strtod_l+0x95c>)
 80086a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80086ac:	4598      	cmp	r8, r3
 80086ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80086b2:	f280 80c7 	bge.w	8008844 <_strtod_l+0x874>
 80086b6:	eba3 0308 	sub.w	r3, r3, r8
 80086ba:	2b1f      	cmp	r3, #31
 80086bc:	eba2 0203 	sub.w	r2, r2, r3
 80086c0:	f04f 0101 	mov.w	r1, #1
 80086c4:	f300 80b1 	bgt.w	800882a <_strtod_l+0x85a>
 80086c8:	fa01 f303 	lsl.w	r3, r1, r3
 80086cc:	930d      	str	r3, [sp, #52]	; 0x34
 80086ce:	2300      	movs	r3, #0
 80086d0:	9308      	str	r3, [sp, #32]
 80086d2:	eb09 0802 	add.w	r8, r9, r2
 80086d6:	9b04      	ldr	r3, [sp, #16]
 80086d8:	45c1      	cmp	r9, r8
 80086da:	4417      	add	r7, r2
 80086dc:	441f      	add	r7, r3
 80086de:	464b      	mov	r3, r9
 80086e0:	bfa8      	it	ge
 80086e2:	4643      	movge	r3, r8
 80086e4:	42bb      	cmp	r3, r7
 80086e6:	bfa8      	it	ge
 80086e8:	463b      	movge	r3, r7
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	bfc2      	ittt	gt
 80086ee:	eba8 0803 	subgt.w	r8, r8, r3
 80086f2:	1aff      	subgt	r7, r7, r3
 80086f4:	eba9 0903 	subgt.w	r9, r9, r3
 80086f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dd17      	ble.n	800872e <_strtod_l+0x75e>
 80086fe:	4631      	mov	r1, r6
 8008700:	461a      	mov	r2, r3
 8008702:	4620      	mov	r0, r4
 8008704:	f001 ff0c 	bl	800a520 <__pow5mult>
 8008708:	4606      	mov	r6, r0
 800870a:	2800      	cmp	r0, #0
 800870c:	f43f aea8 	beq.w	8008460 <_strtod_l+0x490>
 8008710:	4601      	mov	r1, r0
 8008712:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008714:	4620      	mov	r0, r4
 8008716:	f001 fe59 	bl	800a3cc <__multiply>
 800871a:	900b      	str	r0, [sp, #44]	; 0x2c
 800871c:	2800      	cmp	r0, #0
 800871e:	f43f ae9f 	beq.w	8008460 <_strtod_l+0x490>
 8008722:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008724:	4620      	mov	r0, r4
 8008726:	f001 fd39 	bl	800a19c <_Bfree>
 800872a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800872c:	9318      	str	r3, [sp, #96]	; 0x60
 800872e:	f1b8 0f00 	cmp.w	r8, #0
 8008732:	f300 808c 	bgt.w	800884e <_strtod_l+0x87e>
 8008736:	9b06      	ldr	r3, [sp, #24]
 8008738:	2b00      	cmp	r3, #0
 800873a:	dd08      	ble.n	800874e <_strtod_l+0x77e>
 800873c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800873e:	9905      	ldr	r1, [sp, #20]
 8008740:	4620      	mov	r0, r4
 8008742:	f001 feed 	bl	800a520 <__pow5mult>
 8008746:	9005      	str	r0, [sp, #20]
 8008748:	2800      	cmp	r0, #0
 800874a:	f43f ae89 	beq.w	8008460 <_strtod_l+0x490>
 800874e:	2f00      	cmp	r7, #0
 8008750:	dd08      	ble.n	8008764 <_strtod_l+0x794>
 8008752:	9905      	ldr	r1, [sp, #20]
 8008754:	463a      	mov	r2, r7
 8008756:	4620      	mov	r0, r4
 8008758:	f001 ff3c 	bl	800a5d4 <__lshift>
 800875c:	9005      	str	r0, [sp, #20]
 800875e:	2800      	cmp	r0, #0
 8008760:	f43f ae7e 	beq.w	8008460 <_strtod_l+0x490>
 8008764:	f1b9 0f00 	cmp.w	r9, #0
 8008768:	dd08      	ble.n	800877c <_strtod_l+0x7ac>
 800876a:	4631      	mov	r1, r6
 800876c:	464a      	mov	r2, r9
 800876e:	4620      	mov	r0, r4
 8008770:	f001 ff30 	bl	800a5d4 <__lshift>
 8008774:	4606      	mov	r6, r0
 8008776:	2800      	cmp	r0, #0
 8008778:	f43f ae72 	beq.w	8008460 <_strtod_l+0x490>
 800877c:	9a05      	ldr	r2, [sp, #20]
 800877e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008780:	4620      	mov	r0, r4
 8008782:	f001 ffb3 	bl	800a6ec <__mdiff>
 8008786:	4605      	mov	r5, r0
 8008788:	2800      	cmp	r0, #0
 800878a:	f43f ae69 	beq.w	8008460 <_strtod_l+0x490>
 800878e:	68c3      	ldr	r3, [r0, #12]
 8008790:	930b      	str	r3, [sp, #44]	; 0x2c
 8008792:	2300      	movs	r3, #0
 8008794:	60c3      	str	r3, [r0, #12]
 8008796:	4631      	mov	r1, r6
 8008798:	f001 ff8c 	bl	800a6b4 <__mcmp>
 800879c:	2800      	cmp	r0, #0
 800879e:	da60      	bge.n	8008862 <_strtod_l+0x892>
 80087a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087a2:	ea53 030a 	orrs.w	r3, r3, sl
 80087a6:	f040 8082 	bne.w	80088ae <_strtod_l+0x8de>
 80087aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d17d      	bne.n	80088ae <_strtod_l+0x8de>
 80087b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087b6:	0d1b      	lsrs	r3, r3, #20
 80087b8:	051b      	lsls	r3, r3, #20
 80087ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80087be:	d976      	bls.n	80088ae <_strtod_l+0x8de>
 80087c0:	696b      	ldr	r3, [r5, #20]
 80087c2:	b913      	cbnz	r3, 80087ca <_strtod_l+0x7fa>
 80087c4:	692b      	ldr	r3, [r5, #16]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	dd71      	ble.n	80088ae <_strtod_l+0x8de>
 80087ca:	4629      	mov	r1, r5
 80087cc:	2201      	movs	r2, #1
 80087ce:	4620      	mov	r0, r4
 80087d0:	f001 ff00 	bl	800a5d4 <__lshift>
 80087d4:	4631      	mov	r1, r6
 80087d6:	4605      	mov	r5, r0
 80087d8:	f001 ff6c 	bl	800a6b4 <__mcmp>
 80087dc:	2800      	cmp	r0, #0
 80087de:	dd66      	ble.n	80088ae <_strtod_l+0x8de>
 80087e0:	9904      	ldr	r1, [sp, #16]
 80087e2:	4a53      	ldr	r2, [pc, #332]	; (8008930 <_strtod_l+0x960>)
 80087e4:	465b      	mov	r3, fp
 80087e6:	2900      	cmp	r1, #0
 80087e8:	f000 8081 	beq.w	80088ee <_strtod_l+0x91e>
 80087ec:	ea02 010b 	and.w	r1, r2, fp
 80087f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80087f4:	dc7b      	bgt.n	80088ee <_strtod_l+0x91e>
 80087f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80087fa:	f77f aea9 	ble.w	8008550 <_strtod_l+0x580>
 80087fe:	4b4d      	ldr	r3, [pc, #308]	; (8008934 <_strtod_l+0x964>)
 8008800:	4650      	mov	r0, sl
 8008802:	4659      	mov	r1, fp
 8008804:	2200      	movs	r2, #0
 8008806:	f7f7 feff 	bl	8000608 <__aeabi_dmul>
 800880a:	460b      	mov	r3, r1
 800880c:	4303      	orrs	r3, r0
 800880e:	bf08      	it	eq
 8008810:	2322      	moveq	r3, #34	; 0x22
 8008812:	4682      	mov	sl, r0
 8008814:	468b      	mov	fp, r1
 8008816:	bf08      	it	eq
 8008818:	6023      	streq	r3, [r4, #0]
 800881a:	e62b      	b.n	8008474 <_strtod_l+0x4a4>
 800881c:	f04f 32ff 	mov.w	r2, #4294967295
 8008820:	fa02 f303 	lsl.w	r3, r2, r3
 8008824:	ea03 0a0a 	and.w	sl, r3, sl
 8008828:	e6e3      	b.n	80085f2 <_strtod_l+0x622>
 800882a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800882e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008832:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008836:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800883a:	fa01 f308 	lsl.w	r3, r1, r8
 800883e:	9308      	str	r3, [sp, #32]
 8008840:	910d      	str	r1, [sp, #52]	; 0x34
 8008842:	e746      	b.n	80086d2 <_strtod_l+0x702>
 8008844:	2300      	movs	r3, #0
 8008846:	9308      	str	r3, [sp, #32]
 8008848:	2301      	movs	r3, #1
 800884a:	930d      	str	r3, [sp, #52]	; 0x34
 800884c:	e741      	b.n	80086d2 <_strtod_l+0x702>
 800884e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008850:	4642      	mov	r2, r8
 8008852:	4620      	mov	r0, r4
 8008854:	f001 febe 	bl	800a5d4 <__lshift>
 8008858:	9018      	str	r0, [sp, #96]	; 0x60
 800885a:	2800      	cmp	r0, #0
 800885c:	f47f af6b 	bne.w	8008736 <_strtod_l+0x766>
 8008860:	e5fe      	b.n	8008460 <_strtod_l+0x490>
 8008862:	465f      	mov	r7, fp
 8008864:	d16e      	bne.n	8008944 <_strtod_l+0x974>
 8008866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008868:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800886c:	b342      	cbz	r2, 80088c0 <_strtod_l+0x8f0>
 800886e:	4a32      	ldr	r2, [pc, #200]	; (8008938 <_strtod_l+0x968>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d128      	bne.n	80088c6 <_strtod_l+0x8f6>
 8008874:	9b04      	ldr	r3, [sp, #16]
 8008876:	4651      	mov	r1, sl
 8008878:	b1eb      	cbz	r3, 80088b6 <_strtod_l+0x8e6>
 800887a:	4b2d      	ldr	r3, [pc, #180]	; (8008930 <_strtod_l+0x960>)
 800887c:	403b      	ands	r3, r7
 800887e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008882:	f04f 32ff 	mov.w	r2, #4294967295
 8008886:	d819      	bhi.n	80088bc <_strtod_l+0x8ec>
 8008888:	0d1b      	lsrs	r3, r3, #20
 800888a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800888e:	fa02 f303 	lsl.w	r3, r2, r3
 8008892:	4299      	cmp	r1, r3
 8008894:	d117      	bne.n	80088c6 <_strtod_l+0x8f6>
 8008896:	4b29      	ldr	r3, [pc, #164]	; (800893c <_strtod_l+0x96c>)
 8008898:	429f      	cmp	r7, r3
 800889a:	d102      	bne.n	80088a2 <_strtod_l+0x8d2>
 800889c:	3101      	adds	r1, #1
 800889e:	f43f addf 	beq.w	8008460 <_strtod_l+0x490>
 80088a2:	4b23      	ldr	r3, [pc, #140]	; (8008930 <_strtod_l+0x960>)
 80088a4:	403b      	ands	r3, r7
 80088a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80088aa:	f04f 0a00 	mov.w	sl, #0
 80088ae:	9b04      	ldr	r3, [sp, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1a4      	bne.n	80087fe <_strtod_l+0x82e>
 80088b4:	e5de      	b.n	8008474 <_strtod_l+0x4a4>
 80088b6:	f04f 33ff 	mov.w	r3, #4294967295
 80088ba:	e7ea      	b.n	8008892 <_strtod_l+0x8c2>
 80088bc:	4613      	mov	r3, r2
 80088be:	e7e8      	b.n	8008892 <_strtod_l+0x8c2>
 80088c0:	ea53 030a 	orrs.w	r3, r3, sl
 80088c4:	d08c      	beq.n	80087e0 <_strtod_l+0x810>
 80088c6:	9b08      	ldr	r3, [sp, #32]
 80088c8:	b1db      	cbz	r3, 8008902 <_strtod_l+0x932>
 80088ca:	423b      	tst	r3, r7
 80088cc:	d0ef      	beq.n	80088ae <_strtod_l+0x8de>
 80088ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088d0:	9a04      	ldr	r2, [sp, #16]
 80088d2:	4650      	mov	r0, sl
 80088d4:	4659      	mov	r1, fp
 80088d6:	b1c3      	cbz	r3, 800890a <_strtod_l+0x93a>
 80088d8:	f7ff fb5c 	bl	8007f94 <sulp>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	ec51 0b18 	vmov	r0, r1, d8
 80088e4:	f7f7 fcda 	bl	800029c <__adddf3>
 80088e8:	4682      	mov	sl, r0
 80088ea:	468b      	mov	fp, r1
 80088ec:	e7df      	b.n	80088ae <_strtod_l+0x8de>
 80088ee:	4013      	ands	r3, r2
 80088f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80088f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80088f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80088fc:	f04f 3aff 	mov.w	sl, #4294967295
 8008900:	e7d5      	b.n	80088ae <_strtod_l+0x8de>
 8008902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008904:	ea13 0f0a 	tst.w	r3, sl
 8008908:	e7e0      	b.n	80088cc <_strtod_l+0x8fc>
 800890a:	f7ff fb43 	bl	8007f94 <sulp>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	ec51 0b18 	vmov	r0, r1, d8
 8008916:	f7f7 fcbf 	bl	8000298 <__aeabi_dsub>
 800891a:	2200      	movs	r2, #0
 800891c:	2300      	movs	r3, #0
 800891e:	4682      	mov	sl, r0
 8008920:	468b      	mov	fp, r1
 8008922:	f7f8 f8d9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008926:	2800      	cmp	r0, #0
 8008928:	d0c1      	beq.n	80088ae <_strtod_l+0x8de>
 800892a:	e611      	b.n	8008550 <_strtod_l+0x580>
 800892c:	fffffc02 	.word	0xfffffc02
 8008930:	7ff00000 	.word	0x7ff00000
 8008934:	39500000 	.word	0x39500000
 8008938:	000fffff 	.word	0x000fffff
 800893c:	7fefffff 	.word	0x7fefffff
 8008940:	0800bc10 	.word	0x0800bc10
 8008944:	4631      	mov	r1, r6
 8008946:	4628      	mov	r0, r5
 8008948:	f002 f832 	bl	800a9b0 <__ratio>
 800894c:	ec59 8b10 	vmov	r8, r9, d0
 8008950:	ee10 0a10 	vmov	r0, s0
 8008954:	2200      	movs	r2, #0
 8008956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800895a:	4649      	mov	r1, r9
 800895c:	f7f8 f8d0 	bl	8000b00 <__aeabi_dcmple>
 8008960:	2800      	cmp	r0, #0
 8008962:	d07a      	beq.n	8008a5a <_strtod_l+0xa8a>
 8008964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d04a      	beq.n	8008a00 <_strtod_l+0xa30>
 800896a:	4b95      	ldr	r3, [pc, #596]	; (8008bc0 <_strtod_l+0xbf0>)
 800896c:	2200      	movs	r2, #0
 800896e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008972:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008bc0 <_strtod_l+0xbf0>
 8008976:	f04f 0800 	mov.w	r8, #0
 800897a:	4b92      	ldr	r3, [pc, #584]	; (8008bc4 <_strtod_l+0xbf4>)
 800897c:	403b      	ands	r3, r7
 800897e:	930d      	str	r3, [sp, #52]	; 0x34
 8008980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008982:	4b91      	ldr	r3, [pc, #580]	; (8008bc8 <_strtod_l+0xbf8>)
 8008984:	429a      	cmp	r2, r3
 8008986:	f040 80b0 	bne.w	8008aea <_strtod_l+0xb1a>
 800898a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800898e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008992:	ec4b ab10 	vmov	d0, sl, fp
 8008996:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800899a:	f001 ff31 	bl	800a800 <__ulp>
 800899e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089a2:	ec53 2b10 	vmov	r2, r3, d0
 80089a6:	f7f7 fe2f 	bl	8000608 <__aeabi_dmul>
 80089aa:	4652      	mov	r2, sl
 80089ac:	465b      	mov	r3, fp
 80089ae:	f7f7 fc75 	bl	800029c <__adddf3>
 80089b2:	460b      	mov	r3, r1
 80089b4:	4983      	ldr	r1, [pc, #524]	; (8008bc4 <_strtod_l+0xbf4>)
 80089b6:	4a85      	ldr	r2, [pc, #532]	; (8008bcc <_strtod_l+0xbfc>)
 80089b8:	4019      	ands	r1, r3
 80089ba:	4291      	cmp	r1, r2
 80089bc:	4682      	mov	sl, r0
 80089be:	d960      	bls.n	8008a82 <_strtod_l+0xab2>
 80089c0:	ee18 3a90 	vmov	r3, s17
 80089c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d104      	bne.n	80089d6 <_strtod_l+0xa06>
 80089cc:	ee18 3a10 	vmov	r3, s16
 80089d0:	3301      	adds	r3, #1
 80089d2:	f43f ad45 	beq.w	8008460 <_strtod_l+0x490>
 80089d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008bd8 <_strtod_l+0xc08>
 80089da:	f04f 3aff 	mov.w	sl, #4294967295
 80089de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80089e0:	4620      	mov	r0, r4
 80089e2:	f001 fbdb 	bl	800a19c <_Bfree>
 80089e6:	9905      	ldr	r1, [sp, #20]
 80089e8:	4620      	mov	r0, r4
 80089ea:	f001 fbd7 	bl	800a19c <_Bfree>
 80089ee:	4631      	mov	r1, r6
 80089f0:	4620      	mov	r0, r4
 80089f2:	f001 fbd3 	bl	800a19c <_Bfree>
 80089f6:	4629      	mov	r1, r5
 80089f8:	4620      	mov	r0, r4
 80089fa:	f001 fbcf 	bl	800a19c <_Bfree>
 80089fe:	e61a      	b.n	8008636 <_strtod_l+0x666>
 8008a00:	f1ba 0f00 	cmp.w	sl, #0
 8008a04:	d11b      	bne.n	8008a3e <_strtod_l+0xa6e>
 8008a06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a0a:	b9f3      	cbnz	r3, 8008a4a <_strtod_l+0xa7a>
 8008a0c:	4b6c      	ldr	r3, [pc, #432]	; (8008bc0 <_strtod_l+0xbf0>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4640      	mov	r0, r8
 8008a12:	4649      	mov	r1, r9
 8008a14:	f7f8 f86a 	bl	8000aec <__aeabi_dcmplt>
 8008a18:	b9d0      	cbnz	r0, 8008a50 <_strtod_l+0xa80>
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	4b6c      	ldr	r3, [pc, #432]	; (8008bd0 <_strtod_l+0xc00>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	f7f7 fdf1 	bl	8000608 <__aeabi_dmul>
 8008a26:	4680      	mov	r8, r0
 8008a28:	4689      	mov	r9, r1
 8008a2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008a32:	9315      	str	r3, [sp, #84]	; 0x54
 8008a34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008a38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008a3c:	e79d      	b.n	800897a <_strtod_l+0x9aa>
 8008a3e:	f1ba 0f01 	cmp.w	sl, #1
 8008a42:	d102      	bne.n	8008a4a <_strtod_l+0xa7a>
 8008a44:	2f00      	cmp	r7, #0
 8008a46:	f43f ad83 	beq.w	8008550 <_strtod_l+0x580>
 8008a4a:	4b62      	ldr	r3, [pc, #392]	; (8008bd4 <_strtod_l+0xc04>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	e78e      	b.n	800896e <_strtod_l+0x99e>
 8008a50:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008bd0 <_strtod_l+0xc00>
 8008a54:	f04f 0800 	mov.w	r8, #0
 8008a58:	e7e7      	b.n	8008a2a <_strtod_l+0xa5a>
 8008a5a:	4b5d      	ldr	r3, [pc, #372]	; (8008bd0 <_strtod_l+0xc00>)
 8008a5c:	4640      	mov	r0, r8
 8008a5e:	4649      	mov	r1, r9
 8008a60:	2200      	movs	r2, #0
 8008a62:	f7f7 fdd1 	bl	8000608 <__aeabi_dmul>
 8008a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a68:	4680      	mov	r8, r0
 8008a6a:	4689      	mov	r9, r1
 8008a6c:	b933      	cbnz	r3, 8008a7c <_strtod_l+0xaac>
 8008a6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a72:	900e      	str	r0, [sp, #56]	; 0x38
 8008a74:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008a7a:	e7dd      	b.n	8008a38 <_strtod_l+0xa68>
 8008a7c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008a80:	e7f9      	b.n	8008a76 <_strtod_l+0xaa6>
 8008a82:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008a86:	9b04      	ldr	r3, [sp, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1a8      	bne.n	80089de <_strtod_l+0xa0e>
 8008a8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a92:	0d1b      	lsrs	r3, r3, #20
 8008a94:	051b      	lsls	r3, r3, #20
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d1a1      	bne.n	80089de <_strtod_l+0xa0e>
 8008a9a:	4640      	mov	r0, r8
 8008a9c:	4649      	mov	r1, r9
 8008a9e:	f7f8 f913 	bl	8000cc8 <__aeabi_d2lz>
 8008aa2:	f7f7 fd83 	bl	80005ac <__aeabi_l2d>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4649      	mov	r1, r9
 8008aae:	f7f7 fbf3 	bl	8000298 <__aeabi_dsub>
 8008ab2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ab4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ab8:	ea43 030a 	orr.w	r3, r3, sl
 8008abc:	4313      	orrs	r3, r2
 8008abe:	4680      	mov	r8, r0
 8008ac0:	4689      	mov	r9, r1
 8008ac2:	d055      	beq.n	8008b70 <_strtod_l+0xba0>
 8008ac4:	a336      	add	r3, pc, #216	; (adr r3, 8008ba0 <_strtod_l+0xbd0>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f7f8 f80f 	bl	8000aec <__aeabi_dcmplt>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	f47f acd0 	bne.w	8008474 <_strtod_l+0x4a4>
 8008ad4:	a334      	add	r3, pc, #208	; (adr r3, 8008ba8 <_strtod_l+0xbd8>)
 8008ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ada:	4640      	mov	r0, r8
 8008adc:	4649      	mov	r1, r9
 8008ade:	f7f8 f823 	bl	8000b28 <__aeabi_dcmpgt>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	f43f af7b 	beq.w	80089de <_strtod_l+0xa0e>
 8008ae8:	e4c4      	b.n	8008474 <_strtod_l+0x4a4>
 8008aea:	9b04      	ldr	r3, [sp, #16]
 8008aec:	b333      	cbz	r3, 8008b3c <_strtod_l+0xb6c>
 8008aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008af0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008af4:	d822      	bhi.n	8008b3c <_strtod_l+0xb6c>
 8008af6:	a32e      	add	r3, pc, #184	; (adr r3, 8008bb0 <_strtod_l+0xbe0>)
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	4640      	mov	r0, r8
 8008afe:	4649      	mov	r1, r9
 8008b00:	f7f7 fffe 	bl	8000b00 <__aeabi_dcmple>
 8008b04:	b1a0      	cbz	r0, 8008b30 <_strtod_l+0xb60>
 8008b06:	4649      	mov	r1, r9
 8008b08:	4640      	mov	r0, r8
 8008b0a:	f7f8 f855 	bl	8000bb8 <__aeabi_d2uiz>
 8008b0e:	2801      	cmp	r0, #1
 8008b10:	bf38      	it	cc
 8008b12:	2001      	movcc	r0, #1
 8008b14:	f7f7 fcfe 	bl	8000514 <__aeabi_ui2d>
 8008b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b1a:	4680      	mov	r8, r0
 8008b1c:	4689      	mov	r9, r1
 8008b1e:	bb23      	cbnz	r3, 8008b6a <_strtod_l+0xb9a>
 8008b20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b24:	9010      	str	r0, [sp, #64]	; 0x40
 8008b26:	9311      	str	r3, [sp, #68]	; 0x44
 8008b28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b34:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008b38:	1a9b      	subs	r3, r3, r2
 8008b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b40:	eeb0 0a48 	vmov.f32	s0, s16
 8008b44:	eef0 0a68 	vmov.f32	s1, s17
 8008b48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b4c:	f001 fe58 	bl	800a800 <__ulp>
 8008b50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b54:	ec53 2b10 	vmov	r2, r3, d0
 8008b58:	f7f7 fd56 	bl	8000608 <__aeabi_dmul>
 8008b5c:	ec53 2b18 	vmov	r2, r3, d8
 8008b60:	f7f7 fb9c 	bl	800029c <__adddf3>
 8008b64:	4682      	mov	sl, r0
 8008b66:	468b      	mov	fp, r1
 8008b68:	e78d      	b.n	8008a86 <_strtod_l+0xab6>
 8008b6a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008b6e:	e7db      	b.n	8008b28 <_strtod_l+0xb58>
 8008b70:	a311      	add	r3, pc, #68	; (adr r3, 8008bb8 <_strtod_l+0xbe8>)
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	f7f7 ffb9 	bl	8000aec <__aeabi_dcmplt>
 8008b7a:	e7b2      	b.n	8008ae2 <_strtod_l+0xb12>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	f7ff ba6b 	b.w	8008060 <_strtod_l+0x90>
 8008b8a:	2a65      	cmp	r2, #101	; 0x65
 8008b8c:	f43f ab5f 	beq.w	800824e <_strtod_l+0x27e>
 8008b90:	2a45      	cmp	r2, #69	; 0x45
 8008b92:	f43f ab5c 	beq.w	800824e <_strtod_l+0x27e>
 8008b96:	2301      	movs	r3, #1
 8008b98:	f7ff bb94 	b.w	80082c4 <_strtod_l+0x2f4>
 8008b9c:	f3af 8000 	nop.w
 8008ba0:	94a03595 	.word	0x94a03595
 8008ba4:	3fdfffff 	.word	0x3fdfffff
 8008ba8:	35afe535 	.word	0x35afe535
 8008bac:	3fe00000 	.word	0x3fe00000
 8008bb0:	ffc00000 	.word	0xffc00000
 8008bb4:	41dfffff 	.word	0x41dfffff
 8008bb8:	94a03595 	.word	0x94a03595
 8008bbc:	3fcfffff 	.word	0x3fcfffff
 8008bc0:	3ff00000 	.word	0x3ff00000
 8008bc4:	7ff00000 	.word	0x7ff00000
 8008bc8:	7fe00000 	.word	0x7fe00000
 8008bcc:	7c9fffff 	.word	0x7c9fffff
 8008bd0:	3fe00000 	.word	0x3fe00000
 8008bd4:	bff00000 	.word	0xbff00000
 8008bd8:	7fefffff 	.word	0x7fefffff

08008bdc <_strtod_r>:
 8008bdc:	4b01      	ldr	r3, [pc, #4]	; (8008be4 <_strtod_r+0x8>)
 8008bde:	f7ff b9f7 	b.w	8007fd0 <_strtod_l>
 8008be2:	bf00      	nop
 8008be4:	2000007c 	.word	0x2000007c

08008be8 <_strtol_l.constprop.0>:
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bee:	d001      	beq.n	8008bf4 <_strtol_l.constprop.0+0xc>
 8008bf0:	2b24      	cmp	r3, #36	; 0x24
 8008bf2:	d906      	bls.n	8008c02 <_strtol_l.constprop.0+0x1a>
 8008bf4:	f7fe fafc 	bl	80071f0 <__errno>
 8008bf8:	2316      	movs	r3, #22
 8008bfa:	6003      	str	r3, [r0, #0]
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ce8 <_strtol_l.constprop.0+0x100>
 8008c06:	460d      	mov	r5, r1
 8008c08:	462e      	mov	r6, r5
 8008c0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008c12:	f017 0708 	ands.w	r7, r7, #8
 8008c16:	d1f7      	bne.n	8008c08 <_strtol_l.constprop.0+0x20>
 8008c18:	2c2d      	cmp	r4, #45	; 0x2d
 8008c1a:	d132      	bne.n	8008c82 <_strtol_l.constprop.0+0x9a>
 8008c1c:	782c      	ldrb	r4, [r5, #0]
 8008c1e:	2701      	movs	r7, #1
 8008c20:	1cb5      	adds	r5, r6, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d05b      	beq.n	8008cde <_strtol_l.constprop.0+0xf6>
 8008c26:	2b10      	cmp	r3, #16
 8008c28:	d109      	bne.n	8008c3e <_strtol_l.constprop.0+0x56>
 8008c2a:	2c30      	cmp	r4, #48	; 0x30
 8008c2c:	d107      	bne.n	8008c3e <_strtol_l.constprop.0+0x56>
 8008c2e:	782c      	ldrb	r4, [r5, #0]
 8008c30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c34:	2c58      	cmp	r4, #88	; 0x58
 8008c36:	d14d      	bne.n	8008cd4 <_strtol_l.constprop.0+0xec>
 8008c38:	786c      	ldrb	r4, [r5, #1]
 8008c3a:	2310      	movs	r3, #16
 8008c3c:	3502      	adds	r5, #2
 8008c3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008c42:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c46:	f04f 0c00 	mov.w	ip, #0
 8008c4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8008c4e:	4666      	mov	r6, ip
 8008c50:	fb03 8a19 	mls	sl, r3, r9, r8
 8008c54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008c58:	f1be 0f09 	cmp.w	lr, #9
 8008c5c:	d816      	bhi.n	8008c8c <_strtol_l.constprop.0+0xa4>
 8008c5e:	4674      	mov	r4, lr
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	dd24      	ble.n	8008cae <_strtol_l.constprop.0+0xc6>
 8008c64:	f1bc 0f00 	cmp.w	ip, #0
 8008c68:	db1e      	blt.n	8008ca8 <_strtol_l.constprop.0+0xc0>
 8008c6a:	45b1      	cmp	r9, r6
 8008c6c:	d31c      	bcc.n	8008ca8 <_strtol_l.constprop.0+0xc0>
 8008c6e:	d101      	bne.n	8008c74 <_strtol_l.constprop.0+0x8c>
 8008c70:	45a2      	cmp	sl, r4
 8008c72:	db19      	blt.n	8008ca8 <_strtol_l.constprop.0+0xc0>
 8008c74:	fb06 4603 	mla	r6, r6, r3, r4
 8008c78:	f04f 0c01 	mov.w	ip, #1
 8008c7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c80:	e7e8      	b.n	8008c54 <_strtol_l.constprop.0+0x6c>
 8008c82:	2c2b      	cmp	r4, #43	; 0x2b
 8008c84:	bf04      	itt	eq
 8008c86:	782c      	ldrbeq	r4, [r5, #0]
 8008c88:	1cb5      	addeq	r5, r6, #2
 8008c8a:	e7ca      	b.n	8008c22 <_strtol_l.constprop.0+0x3a>
 8008c8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c90:	f1be 0f19 	cmp.w	lr, #25
 8008c94:	d801      	bhi.n	8008c9a <_strtol_l.constprop.0+0xb2>
 8008c96:	3c37      	subs	r4, #55	; 0x37
 8008c98:	e7e2      	b.n	8008c60 <_strtol_l.constprop.0+0x78>
 8008c9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c9e:	f1be 0f19 	cmp.w	lr, #25
 8008ca2:	d804      	bhi.n	8008cae <_strtol_l.constprop.0+0xc6>
 8008ca4:	3c57      	subs	r4, #87	; 0x57
 8008ca6:	e7db      	b.n	8008c60 <_strtol_l.constprop.0+0x78>
 8008ca8:	f04f 3cff 	mov.w	ip, #4294967295
 8008cac:	e7e6      	b.n	8008c7c <_strtol_l.constprop.0+0x94>
 8008cae:	f1bc 0f00 	cmp.w	ip, #0
 8008cb2:	da05      	bge.n	8008cc0 <_strtol_l.constprop.0+0xd8>
 8008cb4:	2322      	movs	r3, #34	; 0x22
 8008cb6:	6003      	str	r3, [r0, #0]
 8008cb8:	4646      	mov	r6, r8
 8008cba:	b942      	cbnz	r2, 8008cce <_strtol_l.constprop.0+0xe6>
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	e79e      	b.n	8008bfe <_strtol_l.constprop.0+0x16>
 8008cc0:	b107      	cbz	r7, 8008cc4 <_strtol_l.constprop.0+0xdc>
 8008cc2:	4276      	negs	r6, r6
 8008cc4:	2a00      	cmp	r2, #0
 8008cc6:	d0f9      	beq.n	8008cbc <_strtol_l.constprop.0+0xd4>
 8008cc8:	f1bc 0f00 	cmp.w	ip, #0
 8008ccc:	d000      	beq.n	8008cd0 <_strtol_l.constprop.0+0xe8>
 8008cce:	1e69      	subs	r1, r5, #1
 8008cd0:	6011      	str	r1, [r2, #0]
 8008cd2:	e7f3      	b.n	8008cbc <_strtol_l.constprop.0+0xd4>
 8008cd4:	2430      	movs	r4, #48	; 0x30
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1b1      	bne.n	8008c3e <_strtol_l.constprop.0+0x56>
 8008cda:	2308      	movs	r3, #8
 8008cdc:	e7af      	b.n	8008c3e <_strtol_l.constprop.0+0x56>
 8008cde:	2c30      	cmp	r4, #48	; 0x30
 8008ce0:	d0a5      	beq.n	8008c2e <_strtol_l.constprop.0+0x46>
 8008ce2:	230a      	movs	r3, #10
 8008ce4:	e7ab      	b.n	8008c3e <_strtol_l.constprop.0+0x56>
 8008ce6:	bf00      	nop
 8008ce8:	0800bc39 	.word	0x0800bc39

08008cec <_strtol_r>:
 8008cec:	f7ff bf7c 	b.w	8008be8 <_strtol_l.constprop.0>

08008cf0 <quorem>:
 8008cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf4:	6903      	ldr	r3, [r0, #16]
 8008cf6:	690c      	ldr	r4, [r1, #16]
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	4607      	mov	r7, r0
 8008cfc:	f2c0 8081 	blt.w	8008e02 <quorem+0x112>
 8008d00:	3c01      	subs	r4, #1
 8008d02:	f101 0814 	add.w	r8, r1, #20
 8008d06:	f100 0514 	add.w	r5, r0, #20
 8008d0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d0e:	9301      	str	r3, [sp, #4]
 8008d10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d24:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d28:	d331      	bcc.n	8008d8e <quorem+0x9e>
 8008d2a:	f04f 0e00 	mov.w	lr, #0
 8008d2e:	4640      	mov	r0, r8
 8008d30:	46ac      	mov	ip, r5
 8008d32:	46f2      	mov	sl, lr
 8008d34:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d38:	b293      	uxth	r3, r2
 8008d3a:	fb06 e303 	mla	r3, r6, r3, lr
 8008d3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	ebaa 0303 	sub.w	r3, sl, r3
 8008d48:	f8dc a000 	ldr.w	sl, [ip]
 8008d4c:	0c12      	lsrs	r2, r2, #16
 8008d4e:	fa13 f38a 	uxtah	r3, r3, sl
 8008d52:	fb06 e202 	mla	r2, r6, r2, lr
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	9b00      	ldr	r3, [sp, #0]
 8008d5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d5e:	b292      	uxth	r2, r2
 8008d60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d68:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d6c:	4581      	cmp	r9, r0
 8008d6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d72:	f84c 3b04 	str.w	r3, [ip], #4
 8008d76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d7a:	d2db      	bcs.n	8008d34 <quorem+0x44>
 8008d7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d80:	b92b      	cbnz	r3, 8008d8e <quorem+0x9e>
 8008d82:	9b01      	ldr	r3, [sp, #4]
 8008d84:	3b04      	subs	r3, #4
 8008d86:	429d      	cmp	r5, r3
 8008d88:	461a      	mov	r2, r3
 8008d8a:	d32e      	bcc.n	8008dea <quorem+0xfa>
 8008d8c:	613c      	str	r4, [r7, #16]
 8008d8e:	4638      	mov	r0, r7
 8008d90:	f001 fc90 	bl	800a6b4 <__mcmp>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	db24      	blt.n	8008de2 <quorem+0xf2>
 8008d98:	3601      	adds	r6, #1
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f04f 0c00 	mov.w	ip, #0
 8008da0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008da4:	f8d0 e000 	ldr.w	lr, [r0]
 8008da8:	b293      	uxth	r3, r2
 8008daa:	ebac 0303 	sub.w	r3, ip, r3
 8008dae:	0c12      	lsrs	r2, r2, #16
 8008db0:	fa13 f38e 	uxtah	r3, r3, lr
 8008db4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008db8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dc2:	45c1      	cmp	r9, r8
 8008dc4:	f840 3b04 	str.w	r3, [r0], #4
 8008dc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008dcc:	d2e8      	bcs.n	8008da0 <quorem+0xb0>
 8008dce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dd6:	b922      	cbnz	r2, 8008de2 <quorem+0xf2>
 8008dd8:	3b04      	subs	r3, #4
 8008dda:	429d      	cmp	r5, r3
 8008ddc:	461a      	mov	r2, r3
 8008dde:	d30a      	bcc.n	8008df6 <quorem+0x106>
 8008de0:	613c      	str	r4, [r7, #16]
 8008de2:	4630      	mov	r0, r6
 8008de4:	b003      	add	sp, #12
 8008de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dea:	6812      	ldr	r2, [r2, #0]
 8008dec:	3b04      	subs	r3, #4
 8008dee:	2a00      	cmp	r2, #0
 8008df0:	d1cc      	bne.n	8008d8c <quorem+0x9c>
 8008df2:	3c01      	subs	r4, #1
 8008df4:	e7c7      	b.n	8008d86 <quorem+0x96>
 8008df6:	6812      	ldr	r2, [r2, #0]
 8008df8:	3b04      	subs	r3, #4
 8008dfa:	2a00      	cmp	r2, #0
 8008dfc:	d1f0      	bne.n	8008de0 <quorem+0xf0>
 8008dfe:	3c01      	subs	r4, #1
 8008e00:	e7eb      	b.n	8008dda <quorem+0xea>
 8008e02:	2000      	movs	r0, #0
 8008e04:	e7ee      	b.n	8008de4 <quorem+0xf4>
	...

08008e08 <_dtoa_r>:
 8008e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	ed2d 8b04 	vpush	{d8-d9}
 8008e10:	ec57 6b10 	vmov	r6, r7, d0
 8008e14:	b093      	sub	sp, #76	; 0x4c
 8008e16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e1c:	9106      	str	r1, [sp, #24]
 8008e1e:	ee10 aa10 	vmov	sl, s0
 8008e22:	4604      	mov	r4, r0
 8008e24:	9209      	str	r2, [sp, #36]	; 0x24
 8008e26:	930c      	str	r3, [sp, #48]	; 0x30
 8008e28:	46bb      	mov	fp, r7
 8008e2a:	b975      	cbnz	r5, 8008e4a <_dtoa_r+0x42>
 8008e2c:	2010      	movs	r0, #16
 8008e2e:	f001 f94d 	bl	800a0cc <malloc>
 8008e32:	4602      	mov	r2, r0
 8008e34:	6260      	str	r0, [r4, #36]	; 0x24
 8008e36:	b920      	cbnz	r0, 8008e42 <_dtoa_r+0x3a>
 8008e38:	4ba7      	ldr	r3, [pc, #668]	; (80090d8 <_dtoa_r+0x2d0>)
 8008e3a:	21ea      	movs	r1, #234	; 0xea
 8008e3c:	48a7      	ldr	r0, [pc, #668]	; (80090dc <_dtoa_r+0x2d4>)
 8008e3e:	f002 f8bd 	bl	800afbc <__assert_func>
 8008e42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e46:	6005      	str	r5, [r0, #0]
 8008e48:	60c5      	str	r5, [r0, #12]
 8008e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e4c:	6819      	ldr	r1, [r3, #0]
 8008e4e:	b151      	cbz	r1, 8008e66 <_dtoa_r+0x5e>
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	604a      	str	r2, [r1, #4]
 8008e54:	2301      	movs	r3, #1
 8008e56:	4093      	lsls	r3, r2
 8008e58:	608b      	str	r3, [r1, #8]
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f001 f99e 	bl	800a19c <_Bfree>
 8008e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	1e3b      	subs	r3, r7, #0
 8008e68:	bfaa      	itet	ge
 8008e6a:	2300      	movge	r3, #0
 8008e6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008e70:	f8c8 3000 	strge.w	r3, [r8]
 8008e74:	4b9a      	ldr	r3, [pc, #616]	; (80090e0 <_dtoa_r+0x2d8>)
 8008e76:	bfbc      	itt	lt
 8008e78:	2201      	movlt	r2, #1
 8008e7a:	f8c8 2000 	strlt.w	r2, [r8]
 8008e7e:	ea33 030b 	bics.w	r3, r3, fp
 8008e82:	d11b      	bne.n	8008ebc <_dtoa_r+0xb4>
 8008e84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e86:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e8a:	6013      	str	r3, [r2, #0]
 8008e8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e90:	4333      	orrs	r3, r6
 8008e92:	f000 8592 	beq.w	80099ba <_dtoa_r+0xbb2>
 8008e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e98:	b963      	cbnz	r3, 8008eb4 <_dtoa_r+0xac>
 8008e9a:	4b92      	ldr	r3, [pc, #584]	; (80090e4 <_dtoa_r+0x2dc>)
 8008e9c:	e022      	b.n	8008ee4 <_dtoa_r+0xdc>
 8008e9e:	4b92      	ldr	r3, [pc, #584]	; (80090e8 <_dtoa_r+0x2e0>)
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	9801      	ldr	r0, [sp, #4]
 8008eaa:	b013      	add	sp, #76	; 0x4c
 8008eac:	ecbd 8b04 	vpop	{d8-d9}
 8008eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb4:	4b8b      	ldr	r3, [pc, #556]	; (80090e4 <_dtoa_r+0x2dc>)
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	3303      	adds	r3, #3
 8008eba:	e7f3      	b.n	8008ea4 <_dtoa_r+0x9c>
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	4650      	mov	r0, sl
 8008ec2:	4659      	mov	r1, fp
 8008ec4:	f7f7 fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ec8:	ec4b ab19 	vmov	d9, sl, fp
 8008ecc:	4680      	mov	r8, r0
 8008ece:	b158      	cbz	r0, 8008ee8 <_dtoa_r+0xe0>
 8008ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 856b 	beq.w	80099b4 <_dtoa_r+0xbac>
 8008ede:	4883      	ldr	r0, [pc, #524]	; (80090ec <_dtoa_r+0x2e4>)
 8008ee0:	6018      	str	r0, [r3, #0]
 8008ee2:	1e43      	subs	r3, r0, #1
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	e7df      	b.n	8008ea8 <_dtoa_r+0xa0>
 8008ee8:	ec4b ab10 	vmov	d0, sl, fp
 8008eec:	aa10      	add	r2, sp, #64	; 0x40
 8008eee:	a911      	add	r1, sp, #68	; 0x44
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f001 fd01 	bl	800a8f8 <__d2b>
 8008ef6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008efa:	ee08 0a10 	vmov	s16, r0
 8008efe:	2d00      	cmp	r5, #0
 8008f00:	f000 8084 	beq.w	800900c <_dtoa_r+0x204>
 8008f04:	ee19 3a90 	vmov	r3, s19
 8008f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f10:	4656      	mov	r6, sl
 8008f12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f1e:	4b74      	ldr	r3, [pc, #464]	; (80090f0 <_dtoa_r+0x2e8>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	4630      	mov	r0, r6
 8008f24:	4639      	mov	r1, r7
 8008f26:	f7f7 f9b7 	bl	8000298 <__aeabi_dsub>
 8008f2a:	a365      	add	r3, pc, #404	; (adr r3, 80090c0 <_dtoa_r+0x2b8>)
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f7f7 fb6a 	bl	8000608 <__aeabi_dmul>
 8008f34:	a364      	add	r3, pc, #400	; (adr r3, 80090c8 <_dtoa_r+0x2c0>)
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	f7f7 f9af 	bl	800029c <__adddf3>
 8008f3e:	4606      	mov	r6, r0
 8008f40:	4628      	mov	r0, r5
 8008f42:	460f      	mov	r7, r1
 8008f44:	f7f7 faf6 	bl	8000534 <__aeabi_i2d>
 8008f48:	a361      	add	r3, pc, #388	; (adr r3, 80090d0 <_dtoa_r+0x2c8>)
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	f7f7 fb5b 	bl	8000608 <__aeabi_dmul>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	4630      	mov	r0, r6
 8008f58:	4639      	mov	r1, r7
 8008f5a:	f7f7 f99f 	bl	800029c <__adddf3>
 8008f5e:	4606      	mov	r6, r0
 8008f60:	460f      	mov	r7, r1
 8008f62:	f7f7 fe01 	bl	8000b68 <__aeabi_d2iz>
 8008f66:	2200      	movs	r2, #0
 8008f68:	9000      	str	r0, [sp, #0]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	4639      	mov	r1, r7
 8008f70:	f7f7 fdbc 	bl	8000aec <__aeabi_dcmplt>
 8008f74:	b150      	cbz	r0, 8008f8c <_dtoa_r+0x184>
 8008f76:	9800      	ldr	r0, [sp, #0]
 8008f78:	f7f7 fadc 	bl	8000534 <__aeabi_i2d>
 8008f7c:	4632      	mov	r2, r6
 8008f7e:	463b      	mov	r3, r7
 8008f80:	f7f7 fdaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f84:	b910      	cbnz	r0, 8008f8c <_dtoa_r+0x184>
 8008f86:	9b00      	ldr	r3, [sp, #0]
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	9b00      	ldr	r3, [sp, #0]
 8008f8e:	2b16      	cmp	r3, #22
 8008f90:	d85a      	bhi.n	8009048 <_dtoa_r+0x240>
 8008f92:	9a00      	ldr	r2, [sp, #0]
 8008f94:	4b57      	ldr	r3, [pc, #348]	; (80090f4 <_dtoa_r+0x2ec>)
 8008f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9e:	ec51 0b19 	vmov	r0, r1, d9
 8008fa2:	f7f7 fda3 	bl	8000aec <__aeabi_dcmplt>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d050      	beq.n	800904c <_dtoa_r+0x244>
 8008faa:	9b00      	ldr	r3, [sp, #0]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fb6:	1b5d      	subs	r5, r3, r5
 8008fb8:	1e6b      	subs	r3, r5, #1
 8008fba:	9305      	str	r3, [sp, #20]
 8008fbc:	bf45      	ittet	mi
 8008fbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008fc2:	9304      	strmi	r3, [sp, #16]
 8008fc4:	2300      	movpl	r3, #0
 8008fc6:	2300      	movmi	r3, #0
 8008fc8:	bf4c      	ite	mi
 8008fca:	9305      	strmi	r3, [sp, #20]
 8008fcc:	9304      	strpl	r3, [sp, #16]
 8008fce:	9b00      	ldr	r3, [sp, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	db3d      	blt.n	8009050 <_dtoa_r+0x248>
 8008fd4:	9b05      	ldr	r3, [sp, #20]
 8008fd6:	9a00      	ldr	r2, [sp, #0]
 8008fd8:	920a      	str	r2, [sp, #40]	; 0x28
 8008fda:	4413      	add	r3, r2
 8008fdc:	9305      	str	r3, [sp, #20]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	9307      	str	r3, [sp, #28]
 8008fe2:	9b06      	ldr	r3, [sp, #24]
 8008fe4:	2b09      	cmp	r3, #9
 8008fe6:	f200 8089 	bhi.w	80090fc <_dtoa_r+0x2f4>
 8008fea:	2b05      	cmp	r3, #5
 8008fec:	bfc4      	itt	gt
 8008fee:	3b04      	subgt	r3, #4
 8008ff0:	9306      	strgt	r3, [sp, #24]
 8008ff2:	9b06      	ldr	r3, [sp, #24]
 8008ff4:	f1a3 0302 	sub.w	r3, r3, #2
 8008ff8:	bfcc      	ite	gt
 8008ffa:	2500      	movgt	r5, #0
 8008ffc:	2501      	movle	r5, #1
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	f200 8087 	bhi.w	8009112 <_dtoa_r+0x30a>
 8009004:	e8df f003 	tbb	[pc, r3]
 8009008:	59383a2d 	.word	0x59383a2d
 800900c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009010:	441d      	add	r5, r3
 8009012:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009016:	2b20      	cmp	r3, #32
 8009018:	bfc1      	itttt	gt
 800901a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800901e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009022:	fa0b f303 	lslgt.w	r3, fp, r3
 8009026:	fa26 f000 	lsrgt.w	r0, r6, r0
 800902a:	bfda      	itte	le
 800902c:	f1c3 0320 	rsble	r3, r3, #32
 8009030:	fa06 f003 	lslle.w	r0, r6, r3
 8009034:	4318      	orrgt	r0, r3
 8009036:	f7f7 fa6d 	bl	8000514 <__aeabi_ui2d>
 800903a:	2301      	movs	r3, #1
 800903c:	4606      	mov	r6, r0
 800903e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009042:	3d01      	subs	r5, #1
 8009044:	930e      	str	r3, [sp, #56]	; 0x38
 8009046:	e76a      	b.n	8008f1e <_dtoa_r+0x116>
 8009048:	2301      	movs	r3, #1
 800904a:	e7b2      	b.n	8008fb2 <_dtoa_r+0x1aa>
 800904c:	900b      	str	r0, [sp, #44]	; 0x2c
 800904e:	e7b1      	b.n	8008fb4 <_dtoa_r+0x1ac>
 8009050:	9b04      	ldr	r3, [sp, #16]
 8009052:	9a00      	ldr	r2, [sp, #0]
 8009054:	1a9b      	subs	r3, r3, r2
 8009056:	9304      	str	r3, [sp, #16]
 8009058:	4253      	negs	r3, r2
 800905a:	9307      	str	r3, [sp, #28]
 800905c:	2300      	movs	r3, #0
 800905e:	930a      	str	r3, [sp, #40]	; 0x28
 8009060:	e7bf      	b.n	8008fe2 <_dtoa_r+0x1da>
 8009062:	2300      	movs	r3, #0
 8009064:	9308      	str	r3, [sp, #32]
 8009066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009068:	2b00      	cmp	r3, #0
 800906a:	dc55      	bgt.n	8009118 <_dtoa_r+0x310>
 800906c:	2301      	movs	r3, #1
 800906e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009072:	461a      	mov	r2, r3
 8009074:	9209      	str	r2, [sp, #36]	; 0x24
 8009076:	e00c      	b.n	8009092 <_dtoa_r+0x28a>
 8009078:	2301      	movs	r3, #1
 800907a:	e7f3      	b.n	8009064 <_dtoa_r+0x25c>
 800907c:	2300      	movs	r3, #0
 800907e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009080:	9308      	str	r3, [sp, #32]
 8009082:	9b00      	ldr	r3, [sp, #0]
 8009084:	4413      	add	r3, r2
 8009086:	9302      	str	r3, [sp, #8]
 8009088:	3301      	adds	r3, #1
 800908a:	2b01      	cmp	r3, #1
 800908c:	9303      	str	r3, [sp, #12]
 800908e:	bfb8      	it	lt
 8009090:	2301      	movlt	r3, #1
 8009092:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009094:	2200      	movs	r2, #0
 8009096:	6042      	str	r2, [r0, #4]
 8009098:	2204      	movs	r2, #4
 800909a:	f102 0614 	add.w	r6, r2, #20
 800909e:	429e      	cmp	r6, r3
 80090a0:	6841      	ldr	r1, [r0, #4]
 80090a2:	d93d      	bls.n	8009120 <_dtoa_r+0x318>
 80090a4:	4620      	mov	r0, r4
 80090a6:	f001 f839 	bl	800a11c <_Balloc>
 80090aa:	9001      	str	r0, [sp, #4]
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d13b      	bne.n	8009128 <_dtoa_r+0x320>
 80090b0:	4b11      	ldr	r3, [pc, #68]	; (80090f8 <_dtoa_r+0x2f0>)
 80090b2:	4602      	mov	r2, r0
 80090b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80090b8:	e6c0      	b.n	8008e3c <_dtoa_r+0x34>
 80090ba:	2301      	movs	r3, #1
 80090bc:	e7df      	b.n	800907e <_dtoa_r+0x276>
 80090be:	bf00      	nop
 80090c0:	636f4361 	.word	0x636f4361
 80090c4:	3fd287a7 	.word	0x3fd287a7
 80090c8:	8b60c8b3 	.word	0x8b60c8b3
 80090cc:	3fc68a28 	.word	0x3fc68a28
 80090d0:	509f79fb 	.word	0x509f79fb
 80090d4:	3fd34413 	.word	0x3fd34413
 80090d8:	0800bd46 	.word	0x0800bd46
 80090dc:	0800bd5d 	.word	0x0800bd5d
 80090e0:	7ff00000 	.word	0x7ff00000
 80090e4:	0800bd42 	.word	0x0800bd42
 80090e8:	0800bd39 	.word	0x0800bd39
 80090ec:	0800bbb9 	.word	0x0800bbb9
 80090f0:	3ff80000 	.word	0x3ff80000
 80090f4:	0800bec8 	.word	0x0800bec8
 80090f8:	0800bdb8 	.word	0x0800bdb8
 80090fc:	2501      	movs	r5, #1
 80090fe:	2300      	movs	r3, #0
 8009100:	9306      	str	r3, [sp, #24]
 8009102:	9508      	str	r5, [sp, #32]
 8009104:	f04f 33ff 	mov.w	r3, #4294967295
 8009108:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800910c:	2200      	movs	r2, #0
 800910e:	2312      	movs	r3, #18
 8009110:	e7b0      	b.n	8009074 <_dtoa_r+0x26c>
 8009112:	2301      	movs	r3, #1
 8009114:	9308      	str	r3, [sp, #32]
 8009116:	e7f5      	b.n	8009104 <_dtoa_r+0x2fc>
 8009118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800911e:	e7b8      	b.n	8009092 <_dtoa_r+0x28a>
 8009120:	3101      	adds	r1, #1
 8009122:	6041      	str	r1, [r0, #4]
 8009124:	0052      	lsls	r2, r2, #1
 8009126:	e7b8      	b.n	800909a <_dtoa_r+0x292>
 8009128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800912a:	9a01      	ldr	r2, [sp, #4]
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	9b03      	ldr	r3, [sp, #12]
 8009130:	2b0e      	cmp	r3, #14
 8009132:	f200 809d 	bhi.w	8009270 <_dtoa_r+0x468>
 8009136:	2d00      	cmp	r5, #0
 8009138:	f000 809a 	beq.w	8009270 <_dtoa_r+0x468>
 800913c:	9b00      	ldr	r3, [sp, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	dd32      	ble.n	80091a8 <_dtoa_r+0x3a0>
 8009142:	4ab7      	ldr	r2, [pc, #732]	; (8009420 <_dtoa_r+0x618>)
 8009144:	f003 030f 	and.w	r3, r3, #15
 8009148:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800914c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009150:	9b00      	ldr	r3, [sp, #0]
 8009152:	05d8      	lsls	r0, r3, #23
 8009154:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009158:	d516      	bpl.n	8009188 <_dtoa_r+0x380>
 800915a:	4bb2      	ldr	r3, [pc, #712]	; (8009424 <_dtoa_r+0x61c>)
 800915c:	ec51 0b19 	vmov	r0, r1, d9
 8009160:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009164:	f7f7 fb7a 	bl	800085c <__aeabi_ddiv>
 8009168:	f007 070f 	and.w	r7, r7, #15
 800916c:	4682      	mov	sl, r0
 800916e:	468b      	mov	fp, r1
 8009170:	2503      	movs	r5, #3
 8009172:	4eac      	ldr	r6, [pc, #688]	; (8009424 <_dtoa_r+0x61c>)
 8009174:	b957      	cbnz	r7, 800918c <_dtoa_r+0x384>
 8009176:	4642      	mov	r2, r8
 8009178:	464b      	mov	r3, r9
 800917a:	4650      	mov	r0, sl
 800917c:	4659      	mov	r1, fp
 800917e:	f7f7 fb6d 	bl	800085c <__aeabi_ddiv>
 8009182:	4682      	mov	sl, r0
 8009184:	468b      	mov	fp, r1
 8009186:	e028      	b.n	80091da <_dtoa_r+0x3d2>
 8009188:	2502      	movs	r5, #2
 800918a:	e7f2      	b.n	8009172 <_dtoa_r+0x36a>
 800918c:	07f9      	lsls	r1, r7, #31
 800918e:	d508      	bpl.n	80091a2 <_dtoa_r+0x39a>
 8009190:	4640      	mov	r0, r8
 8009192:	4649      	mov	r1, r9
 8009194:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009198:	f7f7 fa36 	bl	8000608 <__aeabi_dmul>
 800919c:	3501      	adds	r5, #1
 800919e:	4680      	mov	r8, r0
 80091a0:	4689      	mov	r9, r1
 80091a2:	107f      	asrs	r7, r7, #1
 80091a4:	3608      	adds	r6, #8
 80091a6:	e7e5      	b.n	8009174 <_dtoa_r+0x36c>
 80091a8:	f000 809b 	beq.w	80092e2 <_dtoa_r+0x4da>
 80091ac:	9b00      	ldr	r3, [sp, #0]
 80091ae:	4f9d      	ldr	r7, [pc, #628]	; (8009424 <_dtoa_r+0x61c>)
 80091b0:	425e      	negs	r6, r3
 80091b2:	4b9b      	ldr	r3, [pc, #620]	; (8009420 <_dtoa_r+0x618>)
 80091b4:	f006 020f 	and.w	r2, r6, #15
 80091b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	ec51 0b19 	vmov	r0, r1, d9
 80091c4:	f7f7 fa20 	bl	8000608 <__aeabi_dmul>
 80091c8:	1136      	asrs	r6, r6, #4
 80091ca:	4682      	mov	sl, r0
 80091cc:	468b      	mov	fp, r1
 80091ce:	2300      	movs	r3, #0
 80091d0:	2502      	movs	r5, #2
 80091d2:	2e00      	cmp	r6, #0
 80091d4:	d17a      	bne.n	80092cc <_dtoa_r+0x4c4>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1d3      	bne.n	8009182 <_dtoa_r+0x37a>
 80091da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 8082 	beq.w	80092e6 <_dtoa_r+0x4de>
 80091e2:	4b91      	ldr	r3, [pc, #580]	; (8009428 <_dtoa_r+0x620>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	4650      	mov	r0, sl
 80091e8:	4659      	mov	r1, fp
 80091ea:	f7f7 fc7f 	bl	8000aec <__aeabi_dcmplt>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d079      	beq.n	80092e6 <_dtoa_r+0x4de>
 80091f2:	9b03      	ldr	r3, [sp, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d076      	beq.n	80092e6 <_dtoa_r+0x4de>
 80091f8:	9b02      	ldr	r3, [sp, #8]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dd36      	ble.n	800926c <_dtoa_r+0x464>
 80091fe:	9b00      	ldr	r3, [sp, #0]
 8009200:	4650      	mov	r0, sl
 8009202:	4659      	mov	r1, fp
 8009204:	1e5f      	subs	r7, r3, #1
 8009206:	2200      	movs	r2, #0
 8009208:	4b88      	ldr	r3, [pc, #544]	; (800942c <_dtoa_r+0x624>)
 800920a:	f7f7 f9fd 	bl	8000608 <__aeabi_dmul>
 800920e:	9e02      	ldr	r6, [sp, #8]
 8009210:	4682      	mov	sl, r0
 8009212:	468b      	mov	fp, r1
 8009214:	3501      	adds	r5, #1
 8009216:	4628      	mov	r0, r5
 8009218:	f7f7 f98c 	bl	8000534 <__aeabi_i2d>
 800921c:	4652      	mov	r2, sl
 800921e:	465b      	mov	r3, fp
 8009220:	f7f7 f9f2 	bl	8000608 <__aeabi_dmul>
 8009224:	4b82      	ldr	r3, [pc, #520]	; (8009430 <_dtoa_r+0x628>)
 8009226:	2200      	movs	r2, #0
 8009228:	f7f7 f838 	bl	800029c <__adddf3>
 800922c:	46d0      	mov	r8, sl
 800922e:	46d9      	mov	r9, fp
 8009230:	4682      	mov	sl, r0
 8009232:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009236:	2e00      	cmp	r6, #0
 8009238:	d158      	bne.n	80092ec <_dtoa_r+0x4e4>
 800923a:	4b7e      	ldr	r3, [pc, #504]	; (8009434 <_dtoa_r+0x62c>)
 800923c:	2200      	movs	r2, #0
 800923e:	4640      	mov	r0, r8
 8009240:	4649      	mov	r1, r9
 8009242:	f7f7 f829 	bl	8000298 <__aeabi_dsub>
 8009246:	4652      	mov	r2, sl
 8009248:	465b      	mov	r3, fp
 800924a:	4680      	mov	r8, r0
 800924c:	4689      	mov	r9, r1
 800924e:	f7f7 fc6b 	bl	8000b28 <__aeabi_dcmpgt>
 8009252:	2800      	cmp	r0, #0
 8009254:	f040 8295 	bne.w	8009782 <_dtoa_r+0x97a>
 8009258:	4652      	mov	r2, sl
 800925a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800925e:	4640      	mov	r0, r8
 8009260:	4649      	mov	r1, r9
 8009262:	f7f7 fc43 	bl	8000aec <__aeabi_dcmplt>
 8009266:	2800      	cmp	r0, #0
 8009268:	f040 8289 	bne.w	800977e <_dtoa_r+0x976>
 800926c:	ec5b ab19 	vmov	sl, fp, d9
 8009270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009272:	2b00      	cmp	r3, #0
 8009274:	f2c0 8148 	blt.w	8009508 <_dtoa_r+0x700>
 8009278:	9a00      	ldr	r2, [sp, #0]
 800927a:	2a0e      	cmp	r2, #14
 800927c:	f300 8144 	bgt.w	8009508 <_dtoa_r+0x700>
 8009280:	4b67      	ldr	r3, [pc, #412]	; (8009420 <_dtoa_r+0x618>)
 8009282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009286:	e9d3 8900 	ldrd	r8, r9, [r3]
 800928a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928c:	2b00      	cmp	r3, #0
 800928e:	f280 80d5 	bge.w	800943c <_dtoa_r+0x634>
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	f300 80d1 	bgt.w	800943c <_dtoa_r+0x634>
 800929a:	f040 826f 	bne.w	800977c <_dtoa_r+0x974>
 800929e:	4b65      	ldr	r3, [pc, #404]	; (8009434 <_dtoa_r+0x62c>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	4640      	mov	r0, r8
 80092a4:	4649      	mov	r1, r9
 80092a6:	f7f7 f9af 	bl	8000608 <__aeabi_dmul>
 80092aa:	4652      	mov	r2, sl
 80092ac:	465b      	mov	r3, fp
 80092ae:	f7f7 fc31 	bl	8000b14 <__aeabi_dcmpge>
 80092b2:	9e03      	ldr	r6, [sp, #12]
 80092b4:	4637      	mov	r7, r6
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f040 8245 	bne.w	8009746 <_dtoa_r+0x93e>
 80092bc:	9d01      	ldr	r5, [sp, #4]
 80092be:	2331      	movs	r3, #49	; 0x31
 80092c0:	f805 3b01 	strb.w	r3, [r5], #1
 80092c4:	9b00      	ldr	r3, [sp, #0]
 80092c6:	3301      	adds	r3, #1
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	e240      	b.n	800974e <_dtoa_r+0x946>
 80092cc:	07f2      	lsls	r2, r6, #31
 80092ce:	d505      	bpl.n	80092dc <_dtoa_r+0x4d4>
 80092d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d4:	f7f7 f998 	bl	8000608 <__aeabi_dmul>
 80092d8:	3501      	adds	r5, #1
 80092da:	2301      	movs	r3, #1
 80092dc:	1076      	asrs	r6, r6, #1
 80092de:	3708      	adds	r7, #8
 80092e0:	e777      	b.n	80091d2 <_dtoa_r+0x3ca>
 80092e2:	2502      	movs	r5, #2
 80092e4:	e779      	b.n	80091da <_dtoa_r+0x3d2>
 80092e6:	9f00      	ldr	r7, [sp, #0]
 80092e8:	9e03      	ldr	r6, [sp, #12]
 80092ea:	e794      	b.n	8009216 <_dtoa_r+0x40e>
 80092ec:	9901      	ldr	r1, [sp, #4]
 80092ee:	4b4c      	ldr	r3, [pc, #304]	; (8009420 <_dtoa_r+0x618>)
 80092f0:	4431      	add	r1, r6
 80092f2:	910d      	str	r1, [sp, #52]	; 0x34
 80092f4:	9908      	ldr	r1, [sp, #32]
 80092f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092fe:	2900      	cmp	r1, #0
 8009300:	d043      	beq.n	800938a <_dtoa_r+0x582>
 8009302:	494d      	ldr	r1, [pc, #308]	; (8009438 <_dtoa_r+0x630>)
 8009304:	2000      	movs	r0, #0
 8009306:	f7f7 faa9 	bl	800085c <__aeabi_ddiv>
 800930a:	4652      	mov	r2, sl
 800930c:	465b      	mov	r3, fp
 800930e:	f7f6 ffc3 	bl	8000298 <__aeabi_dsub>
 8009312:	9d01      	ldr	r5, [sp, #4]
 8009314:	4682      	mov	sl, r0
 8009316:	468b      	mov	fp, r1
 8009318:	4649      	mov	r1, r9
 800931a:	4640      	mov	r0, r8
 800931c:	f7f7 fc24 	bl	8000b68 <__aeabi_d2iz>
 8009320:	4606      	mov	r6, r0
 8009322:	f7f7 f907 	bl	8000534 <__aeabi_i2d>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	4640      	mov	r0, r8
 800932c:	4649      	mov	r1, r9
 800932e:	f7f6 ffb3 	bl	8000298 <__aeabi_dsub>
 8009332:	3630      	adds	r6, #48	; 0x30
 8009334:	f805 6b01 	strb.w	r6, [r5], #1
 8009338:	4652      	mov	r2, sl
 800933a:	465b      	mov	r3, fp
 800933c:	4680      	mov	r8, r0
 800933e:	4689      	mov	r9, r1
 8009340:	f7f7 fbd4 	bl	8000aec <__aeabi_dcmplt>
 8009344:	2800      	cmp	r0, #0
 8009346:	d163      	bne.n	8009410 <_dtoa_r+0x608>
 8009348:	4642      	mov	r2, r8
 800934a:	464b      	mov	r3, r9
 800934c:	4936      	ldr	r1, [pc, #216]	; (8009428 <_dtoa_r+0x620>)
 800934e:	2000      	movs	r0, #0
 8009350:	f7f6 ffa2 	bl	8000298 <__aeabi_dsub>
 8009354:	4652      	mov	r2, sl
 8009356:	465b      	mov	r3, fp
 8009358:	f7f7 fbc8 	bl	8000aec <__aeabi_dcmplt>
 800935c:	2800      	cmp	r0, #0
 800935e:	f040 80b5 	bne.w	80094cc <_dtoa_r+0x6c4>
 8009362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009364:	429d      	cmp	r5, r3
 8009366:	d081      	beq.n	800926c <_dtoa_r+0x464>
 8009368:	4b30      	ldr	r3, [pc, #192]	; (800942c <_dtoa_r+0x624>)
 800936a:	2200      	movs	r2, #0
 800936c:	4650      	mov	r0, sl
 800936e:	4659      	mov	r1, fp
 8009370:	f7f7 f94a 	bl	8000608 <__aeabi_dmul>
 8009374:	4b2d      	ldr	r3, [pc, #180]	; (800942c <_dtoa_r+0x624>)
 8009376:	4682      	mov	sl, r0
 8009378:	468b      	mov	fp, r1
 800937a:	4640      	mov	r0, r8
 800937c:	4649      	mov	r1, r9
 800937e:	2200      	movs	r2, #0
 8009380:	f7f7 f942 	bl	8000608 <__aeabi_dmul>
 8009384:	4680      	mov	r8, r0
 8009386:	4689      	mov	r9, r1
 8009388:	e7c6      	b.n	8009318 <_dtoa_r+0x510>
 800938a:	4650      	mov	r0, sl
 800938c:	4659      	mov	r1, fp
 800938e:	f7f7 f93b 	bl	8000608 <__aeabi_dmul>
 8009392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009394:	9d01      	ldr	r5, [sp, #4]
 8009396:	930f      	str	r3, [sp, #60]	; 0x3c
 8009398:	4682      	mov	sl, r0
 800939a:	468b      	mov	fp, r1
 800939c:	4649      	mov	r1, r9
 800939e:	4640      	mov	r0, r8
 80093a0:	f7f7 fbe2 	bl	8000b68 <__aeabi_d2iz>
 80093a4:	4606      	mov	r6, r0
 80093a6:	f7f7 f8c5 	bl	8000534 <__aeabi_i2d>
 80093aa:	3630      	adds	r6, #48	; 0x30
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4640      	mov	r0, r8
 80093b2:	4649      	mov	r1, r9
 80093b4:	f7f6 ff70 	bl	8000298 <__aeabi_dsub>
 80093b8:	f805 6b01 	strb.w	r6, [r5], #1
 80093bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093be:	429d      	cmp	r5, r3
 80093c0:	4680      	mov	r8, r0
 80093c2:	4689      	mov	r9, r1
 80093c4:	f04f 0200 	mov.w	r2, #0
 80093c8:	d124      	bne.n	8009414 <_dtoa_r+0x60c>
 80093ca:	4b1b      	ldr	r3, [pc, #108]	; (8009438 <_dtoa_r+0x630>)
 80093cc:	4650      	mov	r0, sl
 80093ce:	4659      	mov	r1, fp
 80093d0:	f7f6 ff64 	bl	800029c <__adddf3>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4640      	mov	r0, r8
 80093da:	4649      	mov	r1, r9
 80093dc:	f7f7 fba4 	bl	8000b28 <__aeabi_dcmpgt>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d173      	bne.n	80094cc <_dtoa_r+0x6c4>
 80093e4:	4652      	mov	r2, sl
 80093e6:	465b      	mov	r3, fp
 80093e8:	4913      	ldr	r1, [pc, #76]	; (8009438 <_dtoa_r+0x630>)
 80093ea:	2000      	movs	r0, #0
 80093ec:	f7f6 ff54 	bl	8000298 <__aeabi_dsub>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4640      	mov	r0, r8
 80093f6:	4649      	mov	r1, r9
 80093f8:	f7f7 fb78 	bl	8000aec <__aeabi_dcmplt>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	f43f af35 	beq.w	800926c <_dtoa_r+0x464>
 8009402:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009404:	1e6b      	subs	r3, r5, #1
 8009406:	930f      	str	r3, [sp, #60]	; 0x3c
 8009408:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800940c:	2b30      	cmp	r3, #48	; 0x30
 800940e:	d0f8      	beq.n	8009402 <_dtoa_r+0x5fa>
 8009410:	9700      	str	r7, [sp, #0]
 8009412:	e049      	b.n	80094a8 <_dtoa_r+0x6a0>
 8009414:	4b05      	ldr	r3, [pc, #20]	; (800942c <_dtoa_r+0x624>)
 8009416:	f7f7 f8f7 	bl	8000608 <__aeabi_dmul>
 800941a:	4680      	mov	r8, r0
 800941c:	4689      	mov	r9, r1
 800941e:	e7bd      	b.n	800939c <_dtoa_r+0x594>
 8009420:	0800bec8 	.word	0x0800bec8
 8009424:	0800bea0 	.word	0x0800bea0
 8009428:	3ff00000 	.word	0x3ff00000
 800942c:	40240000 	.word	0x40240000
 8009430:	401c0000 	.word	0x401c0000
 8009434:	40140000 	.word	0x40140000
 8009438:	3fe00000 	.word	0x3fe00000
 800943c:	9d01      	ldr	r5, [sp, #4]
 800943e:	4656      	mov	r6, sl
 8009440:	465f      	mov	r7, fp
 8009442:	4642      	mov	r2, r8
 8009444:	464b      	mov	r3, r9
 8009446:	4630      	mov	r0, r6
 8009448:	4639      	mov	r1, r7
 800944a:	f7f7 fa07 	bl	800085c <__aeabi_ddiv>
 800944e:	f7f7 fb8b 	bl	8000b68 <__aeabi_d2iz>
 8009452:	4682      	mov	sl, r0
 8009454:	f7f7 f86e 	bl	8000534 <__aeabi_i2d>
 8009458:	4642      	mov	r2, r8
 800945a:	464b      	mov	r3, r9
 800945c:	f7f7 f8d4 	bl	8000608 <__aeabi_dmul>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	4630      	mov	r0, r6
 8009466:	4639      	mov	r1, r7
 8009468:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800946c:	f7f6 ff14 	bl	8000298 <__aeabi_dsub>
 8009470:	f805 6b01 	strb.w	r6, [r5], #1
 8009474:	9e01      	ldr	r6, [sp, #4]
 8009476:	9f03      	ldr	r7, [sp, #12]
 8009478:	1bae      	subs	r6, r5, r6
 800947a:	42b7      	cmp	r7, r6
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	d135      	bne.n	80094ee <_dtoa_r+0x6e6>
 8009482:	f7f6 ff0b 	bl	800029c <__adddf3>
 8009486:	4642      	mov	r2, r8
 8009488:	464b      	mov	r3, r9
 800948a:	4606      	mov	r6, r0
 800948c:	460f      	mov	r7, r1
 800948e:	f7f7 fb4b 	bl	8000b28 <__aeabi_dcmpgt>
 8009492:	b9d0      	cbnz	r0, 80094ca <_dtoa_r+0x6c2>
 8009494:	4642      	mov	r2, r8
 8009496:	464b      	mov	r3, r9
 8009498:	4630      	mov	r0, r6
 800949a:	4639      	mov	r1, r7
 800949c:	f7f7 fb1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80094a0:	b110      	cbz	r0, 80094a8 <_dtoa_r+0x6a0>
 80094a2:	f01a 0f01 	tst.w	sl, #1
 80094a6:	d110      	bne.n	80094ca <_dtoa_r+0x6c2>
 80094a8:	4620      	mov	r0, r4
 80094aa:	ee18 1a10 	vmov	r1, s16
 80094ae:	f000 fe75 	bl	800a19c <_Bfree>
 80094b2:	2300      	movs	r3, #0
 80094b4:	9800      	ldr	r0, [sp, #0]
 80094b6:	702b      	strb	r3, [r5, #0]
 80094b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094ba:	3001      	adds	r0, #1
 80094bc:	6018      	str	r0, [r3, #0]
 80094be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f43f acf1 	beq.w	8008ea8 <_dtoa_r+0xa0>
 80094c6:	601d      	str	r5, [r3, #0]
 80094c8:	e4ee      	b.n	8008ea8 <_dtoa_r+0xa0>
 80094ca:	9f00      	ldr	r7, [sp, #0]
 80094cc:	462b      	mov	r3, r5
 80094ce:	461d      	mov	r5, r3
 80094d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094d4:	2a39      	cmp	r2, #57	; 0x39
 80094d6:	d106      	bne.n	80094e6 <_dtoa_r+0x6de>
 80094d8:	9a01      	ldr	r2, [sp, #4]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d1f7      	bne.n	80094ce <_dtoa_r+0x6c6>
 80094de:	9901      	ldr	r1, [sp, #4]
 80094e0:	2230      	movs	r2, #48	; 0x30
 80094e2:	3701      	adds	r7, #1
 80094e4:	700a      	strb	r2, [r1, #0]
 80094e6:	781a      	ldrb	r2, [r3, #0]
 80094e8:	3201      	adds	r2, #1
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	e790      	b.n	8009410 <_dtoa_r+0x608>
 80094ee:	4ba6      	ldr	r3, [pc, #664]	; (8009788 <_dtoa_r+0x980>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	f7f7 f889 	bl	8000608 <__aeabi_dmul>
 80094f6:	2200      	movs	r2, #0
 80094f8:	2300      	movs	r3, #0
 80094fa:	4606      	mov	r6, r0
 80094fc:	460f      	mov	r7, r1
 80094fe:	f7f7 faeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009502:	2800      	cmp	r0, #0
 8009504:	d09d      	beq.n	8009442 <_dtoa_r+0x63a>
 8009506:	e7cf      	b.n	80094a8 <_dtoa_r+0x6a0>
 8009508:	9a08      	ldr	r2, [sp, #32]
 800950a:	2a00      	cmp	r2, #0
 800950c:	f000 80d7 	beq.w	80096be <_dtoa_r+0x8b6>
 8009510:	9a06      	ldr	r2, [sp, #24]
 8009512:	2a01      	cmp	r2, #1
 8009514:	f300 80ba 	bgt.w	800968c <_dtoa_r+0x884>
 8009518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800951a:	2a00      	cmp	r2, #0
 800951c:	f000 80b2 	beq.w	8009684 <_dtoa_r+0x87c>
 8009520:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009524:	9e07      	ldr	r6, [sp, #28]
 8009526:	9d04      	ldr	r5, [sp, #16]
 8009528:	9a04      	ldr	r2, [sp, #16]
 800952a:	441a      	add	r2, r3
 800952c:	9204      	str	r2, [sp, #16]
 800952e:	9a05      	ldr	r2, [sp, #20]
 8009530:	2101      	movs	r1, #1
 8009532:	441a      	add	r2, r3
 8009534:	4620      	mov	r0, r4
 8009536:	9205      	str	r2, [sp, #20]
 8009538:	f000 ff32 	bl	800a3a0 <__i2b>
 800953c:	4607      	mov	r7, r0
 800953e:	2d00      	cmp	r5, #0
 8009540:	dd0c      	ble.n	800955c <_dtoa_r+0x754>
 8009542:	9b05      	ldr	r3, [sp, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	dd09      	ble.n	800955c <_dtoa_r+0x754>
 8009548:	42ab      	cmp	r3, r5
 800954a:	9a04      	ldr	r2, [sp, #16]
 800954c:	bfa8      	it	ge
 800954e:	462b      	movge	r3, r5
 8009550:	1ad2      	subs	r2, r2, r3
 8009552:	9204      	str	r2, [sp, #16]
 8009554:	9a05      	ldr	r2, [sp, #20]
 8009556:	1aed      	subs	r5, r5, r3
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	9305      	str	r3, [sp, #20]
 800955c:	9b07      	ldr	r3, [sp, #28]
 800955e:	b31b      	cbz	r3, 80095a8 <_dtoa_r+0x7a0>
 8009560:	9b08      	ldr	r3, [sp, #32]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 80af 	beq.w	80096c6 <_dtoa_r+0x8be>
 8009568:	2e00      	cmp	r6, #0
 800956a:	dd13      	ble.n	8009594 <_dtoa_r+0x78c>
 800956c:	4639      	mov	r1, r7
 800956e:	4632      	mov	r2, r6
 8009570:	4620      	mov	r0, r4
 8009572:	f000 ffd5 	bl	800a520 <__pow5mult>
 8009576:	ee18 2a10 	vmov	r2, s16
 800957a:	4601      	mov	r1, r0
 800957c:	4607      	mov	r7, r0
 800957e:	4620      	mov	r0, r4
 8009580:	f000 ff24 	bl	800a3cc <__multiply>
 8009584:	ee18 1a10 	vmov	r1, s16
 8009588:	4680      	mov	r8, r0
 800958a:	4620      	mov	r0, r4
 800958c:	f000 fe06 	bl	800a19c <_Bfree>
 8009590:	ee08 8a10 	vmov	s16, r8
 8009594:	9b07      	ldr	r3, [sp, #28]
 8009596:	1b9a      	subs	r2, r3, r6
 8009598:	d006      	beq.n	80095a8 <_dtoa_r+0x7a0>
 800959a:	ee18 1a10 	vmov	r1, s16
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 ffbe 	bl	800a520 <__pow5mult>
 80095a4:	ee08 0a10 	vmov	s16, r0
 80095a8:	2101      	movs	r1, #1
 80095aa:	4620      	mov	r0, r4
 80095ac:	f000 fef8 	bl	800a3a0 <__i2b>
 80095b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	4606      	mov	r6, r0
 80095b6:	f340 8088 	ble.w	80096ca <_dtoa_r+0x8c2>
 80095ba:	461a      	mov	r2, r3
 80095bc:	4601      	mov	r1, r0
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 ffae 	bl	800a520 <__pow5mult>
 80095c4:	9b06      	ldr	r3, [sp, #24]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	4606      	mov	r6, r0
 80095ca:	f340 8081 	ble.w	80096d0 <_dtoa_r+0x8c8>
 80095ce:	f04f 0800 	mov.w	r8, #0
 80095d2:	6933      	ldr	r3, [r6, #16]
 80095d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095d8:	6918      	ldr	r0, [r3, #16]
 80095da:	f000 fe91 	bl	800a300 <__hi0bits>
 80095de:	f1c0 0020 	rsb	r0, r0, #32
 80095e2:	9b05      	ldr	r3, [sp, #20]
 80095e4:	4418      	add	r0, r3
 80095e6:	f010 001f 	ands.w	r0, r0, #31
 80095ea:	f000 8092 	beq.w	8009712 <_dtoa_r+0x90a>
 80095ee:	f1c0 0320 	rsb	r3, r0, #32
 80095f2:	2b04      	cmp	r3, #4
 80095f4:	f340 808a 	ble.w	800970c <_dtoa_r+0x904>
 80095f8:	f1c0 001c 	rsb	r0, r0, #28
 80095fc:	9b04      	ldr	r3, [sp, #16]
 80095fe:	4403      	add	r3, r0
 8009600:	9304      	str	r3, [sp, #16]
 8009602:	9b05      	ldr	r3, [sp, #20]
 8009604:	4403      	add	r3, r0
 8009606:	4405      	add	r5, r0
 8009608:	9305      	str	r3, [sp, #20]
 800960a:	9b04      	ldr	r3, [sp, #16]
 800960c:	2b00      	cmp	r3, #0
 800960e:	dd07      	ble.n	8009620 <_dtoa_r+0x818>
 8009610:	ee18 1a10 	vmov	r1, s16
 8009614:	461a      	mov	r2, r3
 8009616:	4620      	mov	r0, r4
 8009618:	f000 ffdc 	bl	800a5d4 <__lshift>
 800961c:	ee08 0a10 	vmov	s16, r0
 8009620:	9b05      	ldr	r3, [sp, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	dd05      	ble.n	8009632 <_dtoa_r+0x82a>
 8009626:	4631      	mov	r1, r6
 8009628:	461a      	mov	r2, r3
 800962a:	4620      	mov	r0, r4
 800962c:	f000 ffd2 	bl	800a5d4 <__lshift>
 8009630:	4606      	mov	r6, r0
 8009632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009634:	2b00      	cmp	r3, #0
 8009636:	d06e      	beq.n	8009716 <_dtoa_r+0x90e>
 8009638:	ee18 0a10 	vmov	r0, s16
 800963c:	4631      	mov	r1, r6
 800963e:	f001 f839 	bl	800a6b4 <__mcmp>
 8009642:	2800      	cmp	r0, #0
 8009644:	da67      	bge.n	8009716 <_dtoa_r+0x90e>
 8009646:	9b00      	ldr	r3, [sp, #0]
 8009648:	3b01      	subs	r3, #1
 800964a:	ee18 1a10 	vmov	r1, s16
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	220a      	movs	r2, #10
 8009652:	2300      	movs	r3, #0
 8009654:	4620      	mov	r0, r4
 8009656:	f000 fdc3 	bl	800a1e0 <__multadd>
 800965a:	9b08      	ldr	r3, [sp, #32]
 800965c:	ee08 0a10 	vmov	s16, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 81b1 	beq.w	80099c8 <_dtoa_r+0xbc0>
 8009666:	2300      	movs	r3, #0
 8009668:	4639      	mov	r1, r7
 800966a:	220a      	movs	r2, #10
 800966c:	4620      	mov	r0, r4
 800966e:	f000 fdb7 	bl	800a1e0 <__multadd>
 8009672:	9b02      	ldr	r3, [sp, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	4607      	mov	r7, r0
 8009678:	f300 808e 	bgt.w	8009798 <_dtoa_r+0x990>
 800967c:	9b06      	ldr	r3, [sp, #24]
 800967e:	2b02      	cmp	r3, #2
 8009680:	dc51      	bgt.n	8009726 <_dtoa_r+0x91e>
 8009682:	e089      	b.n	8009798 <_dtoa_r+0x990>
 8009684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009686:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800968a:	e74b      	b.n	8009524 <_dtoa_r+0x71c>
 800968c:	9b03      	ldr	r3, [sp, #12]
 800968e:	1e5e      	subs	r6, r3, #1
 8009690:	9b07      	ldr	r3, [sp, #28]
 8009692:	42b3      	cmp	r3, r6
 8009694:	bfbf      	itttt	lt
 8009696:	9b07      	ldrlt	r3, [sp, #28]
 8009698:	9607      	strlt	r6, [sp, #28]
 800969a:	1af2      	sublt	r2, r6, r3
 800969c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800969e:	bfb6      	itet	lt
 80096a0:	189b      	addlt	r3, r3, r2
 80096a2:	1b9e      	subge	r6, r3, r6
 80096a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	bfb8      	it	lt
 80096aa:	2600      	movlt	r6, #0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	bfb7      	itett	lt
 80096b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80096b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80096b8:	1a9d      	sublt	r5, r3, r2
 80096ba:	2300      	movlt	r3, #0
 80096bc:	e734      	b.n	8009528 <_dtoa_r+0x720>
 80096be:	9e07      	ldr	r6, [sp, #28]
 80096c0:	9d04      	ldr	r5, [sp, #16]
 80096c2:	9f08      	ldr	r7, [sp, #32]
 80096c4:	e73b      	b.n	800953e <_dtoa_r+0x736>
 80096c6:	9a07      	ldr	r2, [sp, #28]
 80096c8:	e767      	b.n	800959a <_dtoa_r+0x792>
 80096ca:	9b06      	ldr	r3, [sp, #24]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	dc18      	bgt.n	8009702 <_dtoa_r+0x8fa>
 80096d0:	f1ba 0f00 	cmp.w	sl, #0
 80096d4:	d115      	bne.n	8009702 <_dtoa_r+0x8fa>
 80096d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096da:	b993      	cbnz	r3, 8009702 <_dtoa_r+0x8fa>
 80096dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096e0:	0d1b      	lsrs	r3, r3, #20
 80096e2:	051b      	lsls	r3, r3, #20
 80096e4:	b183      	cbz	r3, 8009708 <_dtoa_r+0x900>
 80096e6:	9b04      	ldr	r3, [sp, #16]
 80096e8:	3301      	adds	r3, #1
 80096ea:	9304      	str	r3, [sp, #16]
 80096ec:	9b05      	ldr	r3, [sp, #20]
 80096ee:	3301      	adds	r3, #1
 80096f0:	9305      	str	r3, [sp, #20]
 80096f2:	f04f 0801 	mov.w	r8, #1
 80096f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f47f af6a 	bne.w	80095d2 <_dtoa_r+0x7ca>
 80096fe:	2001      	movs	r0, #1
 8009700:	e76f      	b.n	80095e2 <_dtoa_r+0x7da>
 8009702:	f04f 0800 	mov.w	r8, #0
 8009706:	e7f6      	b.n	80096f6 <_dtoa_r+0x8ee>
 8009708:	4698      	mov	r8, r3
 800970a:	e7f4      	b.n	80096f6 <_dtoa_r+0x8ee>
 800970c:	f43f af7d 	beq.w	800960a <_dtoa_r+0x802>
 8009710:	4618      	mov	r0, r3
 8009712:	301c      	adds	r0, #28
 8009714:	e772      	b.n	80095fc <_dtoa_r+0x7f4>
 8009716:	9b03      	ldr	r3, [sp, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	dc37      	bgt.n	800978c <_dtoa_r+0x984>
 800971c:	9b06      	ldr	r3, [sp, #24]
 800971e:	2b02      	cmp	r3, #2
 8009720:	dd34      	ble.n	800978c <_dtoa_r+0x984>
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	9302      	str	r3, [sp, #8]
 8009726:	9b02      	ldr	r3, [sp, #8]
 8009728:	b96b      	cbnz	r3, 8009746 <_dtoa_r+0x93e>
 800972a:	4631      	mov	r1, r6
 800972c:	2205      	movs	r2, #5
 800972e:	4620      	mov	r0, r4
 8009730:	f000 fd56 	bl	800a1e0 <__multadd>
 8009734:	4601      	mov	r1, r0
 8009736:	4606      	mov	r6, r0
 8009738:	ee18 0a10 	vmov	r0, s16
 800973c:	f000 ffba 	bl	800a6b4 <__mcmp>
 8009740:	2800      	cmp	r0, #0
 8009742:	f73f adbb 	bgt.w	80092bc <_dtoa_r+0x4b4>
 8009746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009748:	9d01      	ldr	r5, [sp, #4]
 800974a:	43db      	mvns	r3, r3
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	f04f 0800 	mov.w	r8, #0
 8009752:	4631      	mov	r1, r6
 8009754:	4620      	mov	r0, r4
 8009756:	f000 fd21 	bl	800a19c <_Bfree>
 800975a:	2f00      	cmp	r7, #0
 800975c:	f43f aea4 	beq.w	80094a8 <_dtoa_r+0x6a0>
 8009760:	f1b8 0f00 	cmp.w	r8, #0
 8009764:	d005      	beq.n	8009772 <_dtoa_r+0x96a>
 8009766:	45b8      	cmp	r8, r7
 8009768:	d003      	beq.n	8009772 <_dtoa_r+0x96a>
 800976a:	4641      	mov	r1, r8
 800976c:	4620      	mov	r0, r4
 800976e:	f000 fd15 	bl	800a19c <_Bfree>
 8009772:	4639      	mov	r1, r7
 8009774:	4620      	mov	r0, r4
 8009776:	f000 fd11 	bl	800a19c <_Bfree>
 800977a:	e695      	b.n	80094a8 <_dtoa_r+0x6a0>
 800977c:	2600      	movs	r6, #0
 800977e:	4637      	mov	r7, r6
 8009780:	e7e1      	b.n	8009746 <_dtoa_r+0x93e>
 8009782:	9700      	str	r7, [sp, #0]
 8009784:	4637      	mov	r7, r6
 8009786:	e599      	b.n	80092bc <_dtoa_r+0x4b4>
 8009788:	40240000 	.word	0x40240000
 800978c:	9b08      	ldr	r3, [sp, #32]
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 80ca 	beq.w	8009928 <_dtoa_r+0xb20>
 8009794:	9b03      	ldr	r3, [sp, #12]
 8009796:	9302      	str	r3, [sp, #8]
 8009798:	2d00      	cmp	r5, #0
 800979a:	dd05      	ble.n	80097a8 <_dtoa_r+0x9a0>
 800979c:	4639      	mov	r1, r7
 800979e:	462a      	mov	r2, r5
 80097a0:	4620      	mov	r0, r4
 80097a2:	f000 ff17 	bl	800a5d4 <__lshift>
 80097a6:	4607      	mov	r7, r0
 80097a8:	f1b8 0f00 	cmp.w	r8, #0
 80097ac:	d05b      	beq.n	8009866 <_dtoa_r+0xa5e>
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 fcb3 	bl	800a11c <_Balloc>
 80097b6:	4605      	mov	r5, r0
 80097b8:	b928      	cbnz	r0, 80097c6 <_dtoa_r+0x9be>
 80097ba:	4b87      	ldr	r3, [pc, #540]	; (80099d8 <_dtoa_r+0xbd0>)
 80097bc:	4602      	mov	r2, r0
 80097be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80097c2:	f7ff bb3b 	b.w	8008e3c <_dtoa_r+0x34>
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	3202      	adds	r2, #2
 80097ca:	0092      	lsls	r2, r2, #2
 80097cc:	f107 010c 	add.w	r1, r7, #12
 80097d0:	300c      	adds	r0, #12
 80097d2:	f000 fc95 	bl	800a100 <memcpy>
 80097d6:	2201      	movs	r2, #1
 80097d8:	4629      	mov	r1, r5
 80097da:	4620      	mov	r0, r4
 80097dc:	f000 fefa 	bl	800a5d4 <__lshift>
 80097e0:	9b01      	ldr	r3, [sp, #4]
 80097e2:	f103 0901 	add.w	r9, r3, #1
 80097e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80097ea:	4413      	add	r3, r2
 80097ec:	9305      	str	r3, [sp, #20]
 80097ee:	f00a 0301 	and.w	r3, sl, #1
 80097f2:	46b8      	mov	r8, r7
 80097f4:	9304      	str	r3, [sp, #16]
 80097f6:	4607      	mov	r7, r0
 80097f8:	4631      	mov	r1, r6
 80097fa:	ee18 0a10 	vmov	r0, s16
 80097fe:	f7ff fa77 	bl	8008cf0 <quorem>
 8009802:	4641      	mov	r1, r8
 8009804:	9002      	str	r0, [sp, #8]
 8009806:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800980a:	ee18 0a10 	vmov	r0, s16
 800980e:	f000 ff51 	bl	800a6b4 <__mcmp>
 8009812:	463a      	mov	r2, r7
 8009814:	9003      	str	r0, [sp, #12]
 8009816:	4631      	mov	r1, r6
 8009818:	4620      	mov	r0, r4
 800981a:	f000 ff67 	bl	800a6ec <__mdiff>
 800981e:	68c2      	ldr	r2, [r0, #12]
 8009820:	f109 3bff 	add.w	fp, r9, #4294967295
 8009824:	4605      	mov	r5, r0
 8009826:	bb02      	cbnz	r2, 800986a <_dtoa_r+0xa62>
 8009828:	4601      	mov	r1, r0
 800982a:	ee18 0a10 	vmov	r0, s16
 800982e:	f000 ff41 	bl	800a6b4 <__mcmp>
 8009832:	4602      	mov	r2, r0
 8009834:	4629      	mov	r1, r5
 8009836:	4620      	mov	r0, r4
 8009838:	9207      	str	r2, [sp, #28]
 800983a:	f000 fcaf 	bl	800a19c <_Bfree>
 800983e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009842:	ea43 0102 	orr.w	r1, r3, r2
 8009846:	9b04      	ldr	r3, [sp, #16]
 8009848:	430b      	orrs	r3, r1
 800984a:	464d      	mov	r5, r9
 800984c:	d10f      	bne.n	800986e <_dtoa_r+0xa66>
 800984e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009852:	d02a      	beq.n	80098aa <_dtoa_r+0xaa2>
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	dd02      	ble.n	8009860 <_dtoa_r+0xa58>
 800985a:	9b02      	ldr	r3, [sp, #8]
 800985c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009860:	f88b a000 	strb.w	sl, [fp]
 8009864:	e775      	b.n	8009752 <_dtoa_r+0x94a>
 8009866:	4638      	mov	r0, r7
 8009868:	e7ba      	b.n	80097e0 <_dtoa_r+0x9d8>
 800986a:	2201      	movs	r2, #1
 800986c:	e7e2      	b.n	8009834 <_dtoa_r+0xa2c>
 800986e:	9b03      	ldr	r3, [sp, #12]
 8009870:	2b00      	cmp	r3, #0
 8009872:	db04      	blt.n	800987e <_dtoa_r+0xa76>
 8009874:	9906      	ldr	r1, [sp, #24]
 8009876:	430b      	orrs	r3, r1
 8009878:	9904      	ldr	r1, [sp, #16]
 800987a:	430b      	orrs	r3, r1
 800987c:	d122      	bne.n	80098c4 <_dtoa_r+0xabc>
 800987e:	2a00      	cmp	r2, #0
 8009880:	ddee      	ble.n	8009860 <_dtoa_r+0xa58>
 8009882:	ee18 1a10 	vmov	r1, s16
 8009886:	2201      	movs	r2, #1
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fea3 	bl	800a5d4 <__lshift>
 800988e:	4631      	mov	r1, r6
 8009890:	ee08 0a10 	vmov	s16, r0
 8009894:	f000 ff0e 	bl	800a6b4 <__mcmp>
 8009898:	2800      	cmp	r0, #0
 800989a:	dc03      	bgt.n	80098a4 <_dtoa_r+0xa9c>
 800989c:	d1e0      	bne.n	8009860 <_dtoa_r+0xa58>
 800989e:	f01a 0f01 	tst.w	sl, #1
 80098a2:	d0dd      	beq.n	8009860 <_dtoa_r+0xa58>
 80098a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098a8:	d1d7      	bne.n	800985a <_dtoa_r+0xa52>
 80098aa:	2339      	movs	r3, #57	; 0x39
 80098ac:	f88b 3000 	strb.w	r3, [fp]
 80098b0:	462b      	mov	r3, r5
 80098b2:	461d      	mov	r5, r3
 80098b4:	3b01      	subs	r3, #1
 80098b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80098ba:	2a39      	cmp	r2, #57	; 0x39
 80098bc:	d071      	beq.n	80099a2 <_dtoa_r+0xb9a>
 80098be:	3201      	adds	r2, #1
 80098c0:	701a      	strb	r2, [r3, #0]
 80098c2:	e746      	b.n	8009752 <_dtoa_r+0x94a>
 80098c4:	2a00      	cmp	r2, #0
 80098c6:	dd07      	ble.n	80098d8 <_dtoa_r+0xad0>
 80098c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098cc:	d0ed      	beq.n	80098aa <_dtoa_r+0xaa2>
 80098ce:	f10a 0301 	add.w	r3, sl, #1
 80098d2:	f88b 3000 	strb.w	r3, [fp]
 80098d6:	e73c      	b.n	8009752 <_dtoa_r+0x94a>
 80098d8:	9b05      	ldr	r3, [sp, #20]
 80098da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80098de:	4599      	cmp	r9, r3
 80098e0:	d047      	beq.n	8009972 <_dtoa_r+0xb6a>
 80098e2:	ee18 1a10 	vmov	r1, s16
 80098e6:	2300      	movs	r3, #0
 80098e8:	220a      	movs	r2, #10
 80098ea:	4620      	mov	r0, r4
 80098ec:	f000 fc78 	bl	800a1e0 <__multadd>
 80098f0:	45b8      	cmp	r8, r7
 80098f2:	ee08 0a10 	vmov	s16, r0
 80098f6:	f04f 0300 	mov.w	r3, #0
 80098fa:	f04f 020a 	mov.w	r2, #10
 80098fe:	4641      	mov	r1, r8
 8009900:	4620      	mov	r0, r4
 8009902:	d106      	bne.n	8009912 <_dtoa_r+0xb0a>
 8009904:	f000 fc6c 	bl	800a1e0 <__multadd>
 8009908:	4680      	mov	r8, r0
 800990a:	4607      	mov	r7, r0
 800990c:	f109 0901 	add.w	r9, r9, #1
 8009910:	e772      	b.n	80097f8 <_dtoa_r+0x9f0>
 8009912:	f000 fc65 	bl	800a1e0 <__multadd>
 8009916:	4639      	mov	r1, r7
 8009918:	4680      	mov	r8, r0
 800991a:	2300      	movs	r3, #0
 800991c:	220a      	movs	r2, #10
 800991e:	4620      	mov	r0, r4
 8009920:	f000 fc5e 	bl	800a1e0 <__multadd>
 8009924:	4607      	mov	r7, r0
 8009926:	e7f1      	b.n	800990c <_dtoa_r+0xb04>
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	9302      	str	r3, [sp, #8]
 800992c:	9d01      	ldr	r5, [sp, #4]
 800992e:	ee18 0a10 	vmov	r0, s16
 8009932:	4631      	mov	r1, r6
 8009934:	f7ff f9dc 	bl	8008cf0 <quorem>
 8009938:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800993c:	9b01      	ldr	r3, [sp, #4]
 800993e:	f805 ab01 	strb.w	sl, [r5], #1
 8009942:	1aea      	subs	r2, r5, r3
 8009944:	9b02      	ldr	r3, [sp, #8]
 8009946:	4293      	cmp	r3, r2
 8009948:	dd09      	ble.n	800995e <_dtoa_r+0xb56>
 800994a:	ee18 1a10 	vmov	r1, s16
 800994e:	2300      	movs	r3, #0
 8009950:	220a      	movs	r2, #10
 8009952:	4620      	mov	r0, r4
 8009954:	f000 fc44 	bl	800a1e0 <__multadd>
 8009958:	ee08 0a10 	vmov	s16, r0
 800995c:	e7e7      	b.n	800992e <_dtoa_r+0xb26>
 800995e:	9b02      	ldr	r3, [sp, #8]
 8009960:	2b00      	cmp	r3, #0
 8009962:	bfc8      	it	gt
 8009964:	461d      	movgt	r5, r3
 8009966:	9b01      	ldr	r3, [sp, #4]
 8009968:	bfd8      	it	le
 800996a:	2501      	movle	r5, #1
 800996c:	441d      	add	r5, r3
 800996e:	f04f 0800 	mov.w	r8, #0
 8009972:	ee18 1a10 	vmov	r1, s16
 8009976:	2201      	movs	r2, #1
 8009978:	4620      	mov	r0, r4
 800997a:	f000 fe2b 	bl	800a5d4 <__lshift>
 800997e:	4631      	mov	r1, r6
 8009980:	ee08 0a10 	vmov	s16, r0
 8009984:	f000 fe96 	bl	800a6b4 <__mcmp>
 8009988:	2800      	cmp	r0, #0
 800998a:	dc91      	bgt.n	80098b0 <_dtoa_r+0xaa8>
 800998c:	d102      	bne.n	8009994 <_dtoa_r+0xb8c>
 800998e:	f01a 0f01 	tst.w	sl, #1
 8009992:	d18d      	bne.n	80098b0 <_dtoa_r+0xaa8>
 8009994:	462b      	mov	r3, r5
 8009996:	461d      	mov	r5, r3
 8009998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800999c:	2a30      	cmp	r2, #48	; 0x30
 800999e:	d0fa      	beq.n	8009996 <_dtoa_r+0xb8e>
 80099a0:	e6d7      	b.n	8009752 <_dtoa_r+0x94a>
 80099a2:	9a01      	ldr	r2, [sp, #4]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d184      	bne.n	80098b2 <_dtoa_r+0xaaa>
 80099a8:	9b00      	ldr	r3, [sp, #0]
 80099aa:	3301      	adds	r3, #1
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	2331      	movs	r3, #49	; 0x31
 80099b0:	7013      	strb	r3, [r2, #0]
 80099b2:	e6ce      	b.n	8009752 <_dtoa_r+0x94a>
 80099b4:	4b09      	ldr	r3, [pc, #36]	; (80099dc <_dtoa_r+0xbd4>)
 80099b6:	f7ff ba95 	b.w	8008ee4 <_dtoa_r+0xdc>
 80099ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f47f aa6e 	bne.w	8008e9e <_dtoa_r+0x96>
 80099c2:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <_dtoa_r+0xbd8>)
 80099c4:	f7ff ba8e 	b.w	8008ee4 <_dtoa_r+0xdc>
 80099c8:	9b02      	ldr	r3, [sp, #8]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	dcae      	bgt.n	800992c <_dtoa_r+0xb24>
 80099ce:	9b06      	ldr	r3, [sp, #24]
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	f73f aea8 	bgt.w	8009726 <_dtoa_r+0x91e>
 80099d6:	e7a9      	b.n	800992c <_dtoa_r+0xb24>
 80099d8:	0800bdb8 	.word	0x0800bdb8
 80099dc:	0800bbb8 	.word	0x0800bbb8
 80099e0:	0800bd39 	.word	0x0800bd39

080099e4 <rshift>:
 80099e4:	6903      	ldr	r3, [r0, #16]
 80099e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80099ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80099f2:	f100 0414 	add.w	r4, r0, #20
 80099f6:	dd45      	ble.n	8009a84 <rshift+0xa0>
 80099f8:	f011 011f 	ands.w	r1, r1, #31
 80099fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a04:	d10c      	bne.n	8009a20 <rshift+0x3c>
 8009a06:	f100 0710 	add.w	r7, r0, #16
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	42b1      	cmp	r1, r6
 8009a0e:	d334      	bcc.n	8009a7a <rshift+0x96>
 8009a10:	1a9b      	subs	r3, r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	1eea      	subs	r2, r5, #3
 8009a16:	4296      	cmp	r6, r2
 8009a18:	bf38      	it	cc
 8009a1a:	2300      	movcc	r3, #0
 8009a1c:	4423      	add	r3, r4
 8009a1e:	e015      	b.n	8009a4c <rshift+0x68>
 8009a20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a24:	f1c1 0820 	rsb	r8, r1, #32
 8009a28:	40cf      	lsrs	r7, r1
 8009a2a:	f105 0e04 	add.w	lr, r5, #4
 8009a2e:	46a1      	mov	r9, r4
 8009a30:	4576      	cmp	r6, lr
 8009a32:	46f4      	mov	ip, lr
 8009a34:	d815      	bhi.n	8009a62 <rshift+0x7e>
 8009a36:	1a9a      	subs	r2, r3, r2
 8009a38:	0092      	lsls	r2, r2, #2
 8009a3a:	3a04      	subs	r2, #4
 8009a3c:	3501      	adds	r5, #1
 8009a3e:	42ae      	cmp	r6, r5
 8009a40:	bf38      	it	cc
 8009a42:	2200      	movcc	r2, #0
 8009a44:	18a3      	adds	r3, r4, r2
 8009a46:	50a7      	str	r7, [r4, r2]
 8009a48:	b107      	cbz	r7, 8009a4c <rshift+0x68>
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	1b1a      	subs	r2, r3, r4
 8009a4e:	42a3      	cmp	r3, r4
 8009a50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a54:	bf08      	it	eq
 8009a56:	2300      	moveq	r3, #0
 8009a58:	6102      	str	r2, [r0, #16]
 8009a5a:	bf08      	it	eq
 8009a5c:	6143      	streq	r3, [r0, #20]
 8009a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a62:	f8dc c000 	ldr.w	ip, [ip]
 8009a66:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a6a:	ea4c 0707 	orr.w	r7, ip, r7
 8009a6e:	f849 7b04 	str.w	r7, [r9], #4
 8009a72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a76:	40cf      	lsrs	r7, r1
 8009a78:	e7da      	b.n	8009a30 <rshift+0x4c>
 8009a7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a82:	e7c3      	b.n	8009a0c <rshift+0x28>
 8009a84:	4623      	mov	r3, r4
 8009a86:	e7e1      	b.n	8009a4c <rshift+0x68>

08009a88 <__hexdig_fun>:
 8009a88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009a8c:	2b09      	cmp	r3, #9
 8009a8e:	d802      	bhi.n	8009a96 <__hexdig_fun+0xe>
 8009a90:	3820      	subs	r0, #32
 8009a92:	b2c0      	uxtb	r0, r0
 8009a94:	4770      	bx	lr
 8009a96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a9a:	2b05      	cmp	r3, #5
 8009a9c:	d801      	bhi.n	8009aa2 <__hexdig_fun+0x1a>
 8009a9e:	3847      	subs	r0, #71	; 0x47
 8009aa0:	e7f7      	b.n	8009a92 <__hexdig_fun+0xa>
 8009aa2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009aa6:	2b05      	cmp	r3, #5
 8009aa8:	d801      	bhi.n	8009aae <__hexdig_fun+0x26>
 8009aaa:	3827      	subs	r0, #39	; 0x27
 8009aac:	e7f1      	b.n	8009a92 <__hexdig_fun+0xa>
 8009aae:	2000      	movs	r0, #0
 8009ab0:	4770      	bx	lr
	...

08009ab4 <__gethex>:
 8009ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab8:	ed2d 8b02 	vpush	{d8}
 8009abc:	b089      	sub	sp, #36	; 0x24
 8009abe:	ee08 0a10 	vmov	s16, r0
 8009ac2:	9304      	str	r3, [sp, #16]
 8009ac4:	4bb4      	ldr	r3, [pc, #720]	; (8009d98 <__gethex+0x2e4>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	4618      	mov	r0, r3
 8009acc:	468b      	mov	fp, r1
 8009ace:	4690      	mov	r8, r2
 8009ad0:	f7f6 fb86 	bl	80001e0 <strlen>
 8009ad4:	9b01      	ldr	r3, [sp, #4]
 8009ad6:	f8db 2000 	ldr.w	r2, [fp]
 8009ada:	4403      	add	r3, r0
 8009adc:	4682      	mov	sl, r0
 8009ade:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009ae2:	9305      	str	r3, [sp, #20]
 8009ae4:	1c93      	adds	r3, r2, #2
 8009ae6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009aea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009aee:	32fe      	adds	r2, #254	; 0xfe
 8009af0:	18d1      	adds	r1, r2, r3
 8009af2:	461f      	mov	r7, r3
 8009af4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009af8:	9100      	str	r1, [sp, #0]
 8009afa:	2830      	cmp	r0, #48	; 0x30
 8009afc:	d0f8      	beq.n	8009af0 <__gethex+0x3c>
 8009afe:	f7ff ffc3 	bl	8009a88 <__hexdig_fun>
 8009b02:	4604      	mov	r4, r0
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d13a      	bne.n	8009b7e <__gethex+0xca>
 8009b08:	9901      	ldr	r1, [sp, #4]
 8009b0a:	4652      	mov	r2, sl
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	f001 fa33 	bl	800af78 <strncmp>
 8009b12:	4605      	mov	r5, r0
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d168      	bne.n	8009bea <__gethex+0x136>
 8009b18:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009b1c:	eb07 060a 	add.w	r6, r7, sl
 8009b20:	f7ff ffb2 	bl	8009a88 <__hexdig_fun>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d062      	beq.n	8009bee <__gethex+0x13a>
 8009b28:	4633      	mov	r3, r6
 8009b2a:	7818      	ldrb	r0, [r3, #0]
 8009b2c:	2830      	cmp	r0, #48	; 0x30
 8009b2e:	461f      	mov	r7, r3
 8009b30:	f103 0301 	add.w	r3, r3, #1
 8009b34:	d0f9      	beq.n	8009b2a <__gethex+0x76>
 8009b36:	f7ff ffa7 	bl	8009a88 <__hexdig_fun>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	fab0 f480 	clz	r4, r0
 8009b40:	0964      	lsrs	r4, r4, #5
 8009b42:	4635      	mov	r5, r6
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	463a      	mov	r2, r7
 8009b48:	4616      	mov	r6, r2
 8009b4a:	3201      	adds	r2, #1
 8009b4c:	7830      	ldrb	r0, [r6, #0]
 8009b4e:	f7ff ff9b 	bl	8009a88 <__hexdig_fun>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d1f8      	bne.n	8009b48 <__gethex+0x94>
 8009b56:	9901      	ldr	r1, [sp, #4]
 8009b58:	4652      	mov	r2, sl
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f001 fa0c 	bl	800af78 <strncmp>
 8009b60:	b980      	cbnz	r0, 8009b84 <__gethex+0xd0>
 8009b62:	b94d      	cbnz	r5, 8009b78 <__gethex+0xc4>
 8009b64:	eb06 050a 	add.w	r5, r6, sl
 8009b68:	462a      	mov	r2, r5
 8009b6a:	4616      	mov	r6, r2
 8009b6c:	3201      	adds	r2, #1
 8009b6e:	7830      	ldrb	r0, [r6, #0]
 8009b70:	f7ff ff8a 	bl	8009a88 <__hexdig_fun>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d1f8      	bne.n	8009b6a <__gethex+0xb6>
 8009b78:	1bad      	subs	r5, r5, r6
 8009b7a:	00ad      	lsls	r5, r5, #2
 8009b7c:	e004      	b.n	8009b88 <__gethex+0xd4>
 8009b7e:	2400      	movs	r4, #0
 8009b80:	4625      	mov	r5, r4
 8009b82:	e7e0      	b.n	8009b46 <__gethex+0x92>
 8009b84:	2d00      	cmp	r5, #0
 8009b86:	d1f7      	bne.n	8009b78 <__gethex+0xc4>
 8009b88:	7833      	ldrb	r3, [r6, #0]
 8009b8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b8e:	2b50      	cmp	r3, #80	; 0x50
 8009b90:	d13b      	bne.n	8009c0a <__gethex+0x156>
 8009b92:	7873      	ldrb	r3, [r6, #1]
 8009b94:	2b2b      	cmp	r3, #43	; 0x2b
 8009b96:	d02c      	beq.n	8009bf2 <__gethex+0x13e>
 8009b98:	2b2d      	cmp	r3, #45	; 0x2d
 8009b9a:	d02e      	beq.n	8009bfa <__gethex+0x146>
 8009b9c:	1c71      	adds	r1, r6, #1
 8009b9e:	f04f 0900 	mov.w	r9, #0
 8009ba2:	7808      	ldrb	r0, [r1, #0]
 8009ba4:	f7ff ff70 	bl	8009a88 <__hexdig_fun>
 8009ba8:	1e43      	subs	r3, r0, #1
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b18      	cmp	r3, #24
 8009bae:	d82c      	bhi.n	8009c0a <__gethex+0x156>
 8009bb0:	f1a0 0210 	sub.w	r2, r0, #16
 8009bb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009bb8:	f7ff ff66 	bl	8009a88 <__hexdig_fun>
 8009bbc:	1e43      	subs	r3, r0, #1
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b18      	cmp	r3, #24
 8009bc2:	d91d      	bls.n	8009c00 <__gethex+0x14c>
 8009bc4:	f1b9 0f00 	cmp.w	r9, #0
 8009bc8:	d000      	beq.n	8009bcc <__gethex+0x118>
 8009bca:	4252      	negs	r2, r2
 8009bcc:	4415      	add	r5, r2
 8009bce:	f8cb 1000 	str.w	r1, [fp]
 8009bd2:	b1e4      	cbz	r4, 8009c0e <__gethex+0x15a>
 8009bd4:	9b00      	ldr	r3, [sp, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	bf14      	ite	ne
 8009bda:	2700      	movne	r7, #0
 8009bdc:	2706      	moveq	r7, #6
 8009bde:	4638      	mov	r0, r7
 8009be0:	b009      	add	sp, #36	; 0x24
 8009be2:	ecbd 8b02 	vpop	{d8}
 8009be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bea:	463e      	mov	r6, r7
 8009bec:	4625      	mov	r5, r4
 8009bee:	2401      	movs	r4, #1
 8009bf0:	e7ca      	b.n	8009b88 <__gethex+0xd4>
 8009bf2:	f04f 0900 	mov.w	r9, #0
 8009bf6:	1cb1      	adds	r1, r6, #2
 8009bf8:	e7d3      	b.n	8009ba2 <__gethex+0xee>
 8009bfa:	f04f 0901 	mov.w	r9, #1
 8009bfe:	e7fa      	b.n	8009bf6 <__gethex+0x142>
 8009c00:	230a      	movs	r3, #10
 8009c02:	fb03 0202 	mla	r2, r3, r2, r0
 8009c06:	3a10      	subs	r2, #16
 8009c08:	e7d4      	b.n	8009bb4 <__gethex+0x100>
 8009c0a:	4631      	mov	r1, r6
 8009c0c:	e7df      	b.n	8009bce <__gethex+0x11a>
 8009c0e:	1bf3      	subs	r3, r6, r7
 8009c10:	3b01      	subs	r3, #1
 8009c12:	4621      	mov	r1, r4
 8009c14:	2b07      	cmp	r3, #7
 8009c16:	dc0b      	bgt.n	8009c30 <__gethex+0x17c>
 8009c18:	ee18 0a10 	vmov	r0, s16
 8009c1c:	f000 fa7e 	bl	800a11c <_Balloc>
 8009c20:	4604      	mov	r4, r0
 8009c22:	b940      	cbnz	r0, 8009c36 <__gethex+0x182>
 8009c24:	4b5d      	ldr	r3, [pc, #372]	; (8009d9c <__gethex+0x2e8>)
 8009c26:	4602      	mov	r2, r0
 8009c28:	21de      	movs	r1, #222	; 0xde
 8009c2a:	485d      	ldr	r0, [pc, #372]	; (8009da0 <__gethex+0x2ec>)
 8009c2c:	f001 f9c6 	bl	800afbc <__assert_func>
 8009c30:	3101      	adds	r1, #1
 8009c32:	105b      	asrs	r3, r3, #1
 8009c34:	e7ee      	b.n	8009c14 <__gethex+0x160>
 8009c36:	f100 0914 	add.w	r9, r0, #20
 8009c3a:	f04f 0b00 	mov.w	fp, #0
 8009c3e:	f1ca 0301 	rsb	r3, sl, #1
 8009c42:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c46:	f8cd b000 	str.w	fp, [sp]
 8009c4a:	9306      	str	r3, [sp, #24]
 8009c4c:	42b7      	cmp	r7, r6
 8009c4e:	d340      	bcc.n	8009cd2 <__gethex+0x21e>
 8009c50:	9802      	ldr	r0, [sp, #8]
 8009c52:	9b00      	ldr	r3, [sp, #0]
 8009c54:	f840 3b04 	str.w	r3, [r0], #4
 8009c58:	eba0 0009 	sub.w	r0, r0, r9
 8009c5c:	1080      	asrs	r0, r0, #2
 8009c5e:	0146      	lsls	r6, r0, #5
 8009c60:	6120      	str	r0, [r4, #16]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fb4c 	bl	800a300 <__hi0bits>
 8009c68:	1a30      	subs	r0, r6, r0
 8009c6a:	f8d8 6000 	ldr.w	r6, [r8]
 8009c6e:	42b0      	cmp	r0, r6
 8009c70:	dd63      	ble.n	8009d3a <__gethex+0x286>
 8009c72:	1b87      	subs	r7, r0, r6
 8009c74:	4639      	mov	r1, r7
 8009c76:	4620      	mov	r0, r4
 8009c78:	f000 fef0 	bl	800aa5c <__any_on>
 8009c7c:	4682      	mov	sl, r0
 8009c7e:	b1a8      	cbz	r0, 8009cac <__gethex+0x1f8>
 8009c80:	1e7b      	subs	r3, r7, #1
 8009c82:	1159      	asrs	r1, r3, #5
 8009c84:	f003 021f 	and.w	r2, r3, #31
 8009c88:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009c8c:	f04f 0a01 	mov.w	sl, #1
 8009c90:	fa0a f202 	lsl.w	r2, sl, r2
 8009c94:	420a      	tst	r2, r1
 8009c96:	d009      	beq.n	8009cac <__gethex+0x1f8>
 8009c98:	4553      	cmp	r3, sl
 8009c9a:	dd05      	ble.n	8009ca8 <__gethex+0x1f4>
 8009c9c:	1eb9      	subs	r1, r7, #2
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f000 fedc 	bl	800aa5c <__any_on>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d145      	bne.n	8009d34 <__gethex+0x280>
 8009ca8:	f04f 0a02 	mov.w	sl, #2
 8009cac:	4639      	mov	r1, r7
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7ff fe98 	bl	80099e4 <rshift>
 8009cb4:	443d      	add	r5, r7
 8009cb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cba:	42ab      	cmp	r3, r5
 8009cbc:	da4c      	bge.n	8009d58 <__gethex+0x2a4>
 8009cbe:	ee18 0a10 	vmov	r0, s16
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	f000 fa6a 	bl	800a19c <_Bfree>
 8009cc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cca:	2300      	movs	r3, #0
 8009ccc:	6013      	str	r3, [r2, #0]
 8009cce:	27a3      	movs	r7, #163	; 0xa3
 8009cd0:	e785      	b.n	8009bde <__gethex+0x12a>
 8009cd2:	1e73      	subs	r3, r6, #1
 8009cd4:	9a05      	ldr	r2, [sp, #20]
 8009cd6:	9303      	str	r3, [sp, #12]
 8009cd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d019      	beq.n	8009d14 <__gethex+0x260>
 8009ce0:	f1bb 0f20 	cmp.w	fp, #32
 8009ce4:	d107      	bne.n	8009cf6 <__gethex+0x242>
 8009ce6:	9b02      	ldr	r3, [sp, #8]
 8009ce8:	9a00      	ldr	r2, [sp, #0]
 8009cea:	f843 2b04 	str.w	r2, [r3], #4
 8009cee:	9302      	str	r3, [sp, #8]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	469b      	mov	fp, r3
 8009cf6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009cfa:	f7ff fec5 	bl	8009a88 <__hexdig_fun>
 8009cfe:	9b00      	ldr	r3, [sp, #0]
 8009d00:	f000 000f 	and.w	r0, r0, #15
 8009d04:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d08:	4303      	orrs	r3, r0
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	f10b 0b04 	add.w	fp, fp, #4
 8009d10:	9b03      	ldr	r3, [sp, #12]
 8009d12:	e00d      	b.n	8009d30 <__gethex+0x27c>
 8009d14:	9b03      	ldr	r3, [sp, #12]
 8009d16:	9a06      	ldr	r2, [sp, #24]
 8009d18:	4413      	add	r3, r2
 8009d1a:	42bb      	cmp	r3, r7
 8009d1c:	d3e0      	bcc.n	8009ce0 <__gethex+0x22c>
 8009d1e:	4618      	mov	r0, r3
 8009d20:	9901      	ldr	r1, [sp, #4]
 8009d22:	9307      	str	r3, [sp, #28]
 8009d24:	4652      	mov	r2, sl
 8009d26:	f001 f927 	bl	800af78 <strncmp>
 8009d2a:	9b07      	ldr	r3, [sp, #28]
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d1d7      	bne.n	8009ce0 <__gethex+0x22c>
 8009d30:	461e      	mov	r6, r3
 8009d32:	e78b      	b.n	8009c4c <__gethex+0x198>
 8009d34:	f04f 0a03 	mov.w	sl, #3
 8009d38:	e7b8      	b.n	8009cac <__gethex+0x1f8>
 8009d3a:	da0a      	bge.n	8009d52 <__gethex+0x29e>
 8009d3c:	1a37      	subs	r7, r6, r0
 8009d3e:	4621      	mov	r1, r4
 8009d40:	ee18 0a10 	vmov	r0, s16
 8009d44:	463a      	mov	r2, r7
 8009d46:	f000 fc45 	bl	800a5d4 <__lshift>
 8009d4a:	1bed      	subs	r5, r5, r7
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	f100 0914 	add.w	r9, r0, #20
 8009d52:	f04f 0a00 	mov.w	sl, #0
 8009d56:	e7ae      	b.n	8009cb6 <__gethex+0x202>
 8009d58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d5c:	42a8      	cmp	r0, r5
 8009d5e:	dd72      	ble.n	8009e46 <__gethex+0x392>
 8009d60:	1b45      	subs	r5, r0, r5
 8009d62:	42ae      	cmp	r6, r5
 8009d64:	dc36      	bgt.n	8009dd4 <__gethex+0x320>
 8009d66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d02a      	beq.n	8009dc4 <__gethex+0x310>
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d02c      	beq.n	8009dcc <__gethex+0x318>
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d11c      	bne.n	8009db0 <__gethex+0x2fc>
 8009d76:	42ae      	cmp	r6, r5
 8009d78:	d11a      	bne.n	8009db0 <__gethex+0x2fc>
 8009d7a:	2e01      	cmp	r6, #1
 8009d7c:	d112      	bne.n	8009da4 <__gethex+0x2f0>
 8009d7e:	9a04      	ldr	r2, [sp, #16]
 8009d80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d84:	6013      	str	r3, [r2, #0]
 8009d86:	2301      	movs	r3, #1
 8009d88:	6123      	str	r3, [r4, #16]
 8009d8a:	f8c9 3000 	str.w	r3, [r9]
 8009d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d90:	2762      	movs	r7, #98	; 0x62
 8009d92:	601c      	str	r4, [r3, #0]
 8009d94:	e723      	b.n	8009bde <__gethex+0x12a>
 8009d96:	bf00      	nop
 8009d98:	0800be30 	.word	0x0800be30
 8009d9c:	0800bdb8 	.word	0x0800bdb8
 8009da0:	0800bdc9 	.word	0x0800bdc9
 8009da4:	1e71      	subs	r1, r6, #1
 8009da6:	4620      	mov	r0, r4
 8009da8:	f000 fe58 	bl	800aa5c <__any_on>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d1e6      	bne.n	8009d7e <__gethex+0x2ca>
 8009db0:	ee18 0a10 	vmov	r0, s16
 8009db4:	4621      	mov	r1, r4
 8009db6:	f000 f9f1 	bl	800a19c <_Bfree>
 8009dba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	2750      	movs	r7, #80	; 0x50
 8009dc2:	e70c      	b.n	8009bde <__gethex+0x12a>
 8009dc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1f2      	bne.n	8009db0 <__gethex+0x2fc>
 8009dca:	e7d8      	b.n	8009d7e <__gethex+0x2ca>
 8009dcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1d5      	bne.n	8009d7e <__gethex+0x2ca>
 8009dd2:	e7ed      	b.n	8009db0 <__gethex+0x2fc>
 8009dd4:	1e6f      	subs	r7, r5, #1
 8009dd6:	f1ba 0f00 	cmp.w	sl, #0
 8009dda:	d131      	bne.n	8009e40 <__gethex+0x38c>
 8009ddc:	b127      	cbz	r7, 8009de8 <__gethex+0x334>
 8009dde:	4639      	mov	r1, r7
 8009de0:	4620      	mov	r0, r4
 8009de2:	f000 fe3b 	bl	800aa5c <__any_on>
 8009de6:	4682      	mov	sl, r0
 8009de8:	117b      	asrs	r3, r7, #5
 8009dea:	2101      	movs	r1, #1
 8009dec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009df0:	f007 071f 	and.w	r7, r7, #31
 8009df4:	fa01 f707 	lsl.w	r7, r1, r7
 8009df8:	421f      	tst	r7, r3
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	bf18      	it	ne
 8009e00:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e04:	1b76      	subs	r6, r6, r5
 8009e06:	f7ff fded 	bl	80099e4 <rshift>
 8009e0a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e0e:	2702      	movs	r7, #2
 8009e10:	f1ba 0f00 	cmp.w	sl, #0
 8009e14:	d048      	beq.n	8009ea8 <__gethex+0x3f4>
 8009e16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d015      	beq.n	8009e4a <__gethex+0x396>
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d017      	beq.n	8009e52 <__gethex+0x39e>
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d109      	bne.n	8009e3a <__gethex+0x386>
 8009e26:	f01a 0f02 	tst.w	sl, #2
 8009e2a:	d006      	beq.n	8009e3a <__gethex+0x386>
 8009e2c:	f8d9 0000 	ldr.w	r0, [r9]
 8009e30:	ea4a 0a00 	orr.w	sl, sl, r0
 8009e34:	f01a 0f01 	tst.w	sl, #1
 8009e38:	d10e      	bne.n	8009e58 <__gethex+0x3a4>
 8009e3a:	f047 0710 	orr.w	r7, r7, #16
 8009e3e:	e033      	b.n	8009ea8 <__gethex+0x3f4>
 8009e40:	f04f 0a01 	mov.w	sl, #1
 8009e44:	e7d0      	b.n	8009de8 <__gethex+0x334>
 8009e46:	2701      	movs	r7, #1
 8009e48:	e7e2      	b.n	8009e10 <__gethex+0x35c>
 8009e4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e4c:	f1c3 0301 	rsb	r3, r3, #1
 8009e50:	9315      	str	r3, [sp, #84]	; 0x54
 8009e52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0f0      	beq.n	8009e3a <__gethex+0x386>
 8009e58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e5c:	f104 0314 	add.w	r3, r4, #20
 8009e60:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e64:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e68:	f04f 0c00 	mov.w	ip, #0
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e72:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e76:	d01c      	beq.n	8009eb2 <__gethex+0x3fe>
 8009e78:	3201      	adds	r2, #1
 8009e7a:	6002      	str	r2, [r0, #0]
 8009e7c:	2f02      	cmp	r7, #2
 8009e7e:	f104 0314 	add.w	r3, r4, #20
 8009e82:	d13f      	bne.n	8009f04 <__gethex+0x450>
 8009e84:	f8d8 2000 	ldr.w	r2, [r8]
 8009e88:	3a01      	subs	r2, #1
 8009e8a:	42b2      	cmp	r2, r6
 8009e8c:	d10a      	bne.n	8009ea4 <__gethex+0x3f0>
 8009e8e:	1171      	asrs	r1, r6, #5
 8009e90:	2201      	movs	r2, #1
 8009e92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e96:	f006 061f 	and.w	r6, r6, #31
 8009e9a:	fa02 f606 	lsl.w	r6, r2, r6
 8009e9e:	421e      	tst	r6, r3
 8009ea0:	bf18      	it	ne
 8009ea2:	4617      	movne	r7, r2
 8009ea4:	f047 0720 	orr.w	r7, r7, #32
 8009ea8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009eaa:	601c      	str	r4, [r3, #0]
 8009eac:	9b04      	ldr	r3, [sp, #16]
 8009eae:	601d      	str	r5, [r3, #0]
 8009eb0:	e695      	b.n	8009bde <__gethex+0x12a>
 8009eb2:	4299      	cmp	r1, r3
 8009eb4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009eb8:	d8d8      	bhi.n	8009e6c <__gethex+0x3b8>
 8009eba:	68a3      	ldr	r3, [r4, #8]
 8009ebc:	459b      	cmp	fp, r3
 8009ebe:	db19      	blt.n	8009ef4 <__gethex+0x440>
 8009ec0:	6861      	ldr	r1, [r4, #4]
 8009ec2:	ee18 0a10 	vmov	r0, s16
 8009ec6:	3101      	adds	r1, #1
 8009ec8:	f000 f928 	bl	800a11c <_Balloc>
 8009ecc:	4681      	mov	r9, r0
 8009ece:	b918      	cbnz	r0, 8009ed8 <__gethex+0x424>
 8009ed0:	4b1a      	ldr	r3, [pc, #104]	; (8009f3c <__gethex+0x488>)
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	2184      	movs	r1, #132	; 0x84
 8009ed6:	e6a8      	b.n	8009c2a <__gethex+0x176>
 8009ed8:	6922      	ldr	r2, [r4, #16]
 8009eda:	3202      	adds	r2, #2
 8009edc:	f104 010c 	add.w	r1, r4, #12
 8009ee0:	0092      	lsls	r2, r2, #2
 8009ee2:	300c      	adds	r0, #12
 8009ee4:	f000 f90c 	bl	800a100 <memcpy>
 8009ee8:	4621      	mov	r1, r4
 8009eea:	ee18 0a10 	vmov	r0, s16
 8009eee:	f000 f955 	bl	800a19c <_Bfree>
 8009ef2:	464c      	mov	r4, r9
 8009ef4:	6923      	ldr	r3, [r4, #16]
 8009ef6:	1c5a      	adds	r2, r3, #1
 8009ef8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009efc:	6122      	str	r2, [r4, #16]
 8009efe:	2201      	movs	r2, #1
 8009f00:	615a      	str	r2, [r3, #20]
 8009f02:	e7bb      	b.n	8009e7c <__gethex+0x3c8>
 8009f04:	6922      	ldr	r2, [r4, #16]
 8009f06:	455a      	cmp	r2, fp
 8009f08:	dd0b      	ble.n	8009f22 <__gethex+0x46e>
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f7ff fd69 	bl	80099e4 <rshift>
 8009f12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f16:	3501      	adds	r5, #1
 8009f18:	42ab      	cmp	r3, r5
 8009f1a:	f6ff aed0 	blt.w	8009cbe <__gethex+0x20a>
 8009f1e:	2701      	movs	r7, #1
 8009f20:	e7c0      	b.n	8009ea4 <__gethex+0x3f0>
 8009f22:	f016 061f 	ands.w	r6, r6, #31
 8009f26:	d0fa      	beq.n	8009f1e <__gethex+0x46a>
 8009f28:	4453      	add	r3, sl
 8009f2a:	f1c6 0620 	rsb	r6, r6, #32
 8009f2e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f32:	f000 f9e5 	bl	800a300 <__hi0bits>
 8009f36:	42b0      	cmp	r0, r6
 8009f38:	dbe7      	blt.n	8009f0a <__gethex+0x456>
 8009f3a:	e7f0      	b.n	8009f1e <__gethex+0x46a>
 8009f3c:	0800bdb8 	.word	0x0800bdb8

08009f40 <L_shift>:
 8009f40:	f1c2 0208 	rsb	r2, r2, #8
 8009f44:	0092      	lsls	r2, r2, #2
 8009f46:	b570      	push	{r4, r5, r6, lr}
 8009f48:	f1c2 0620 	rsb	r6, r2, #32
 8009f4c:	6843      	ldr	r3, [r0, #4]
 8009f4e:	6804      	ldr	r4, [r0, #0]
 8009f50:	fa03 f506 	lsl.w	r5, r3, r6
 8009f54:	432c      	orrs	r4, r5
 8009f56:	40d3      	lsrs	r3, r2
 8009f58:	6004      	str	r4, [r0, #0]
 8009f5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f5e:	4288      	cmp	r0, r1
 8009f60:	d3f4      	bcc.n	8009f4c <L_shift+0xc>
 8009f62:	bd70      	pop	{r4, r5, r6, pc}

08009f64 <__match>:
 8009f64:	b530      	push	{r4, r5, lr}
 8009f66:	6803      	ldr	r3, [r0, #0]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f6e:	b914      	cbnz	r4, 8009f76 <__match+0x12>
 8009f70:	6003      	str	r3, [r0, #0]
 8009f72:	2001      	movs	r0, #1
 8009f74:	bd30      	pop	{r4, r5, pc}
 8009f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009f7e:	2d19      	cmp	r5, #25
 8009f80:	bf98      	it	ls
 8009f82:	3220      	addls	r2, #32
 8009f84:	42a2      	cmp	r2, r4
 8009f86:	d0f0      	beq.n	8009f6a <__match+0x6>
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e7f3      	b.n	8009f74 <__match+0x10>

08009f8c <__hexnan>:
 8009f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f90:	680b      	ldr	r3, [r1, #0]
 8009f92:	115e      	asrs	r6, r3, #5
 8009f94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f98:	f013 031f 	ands.w	r3, r3, #31
 8009f9c:	b087      	sub	sp, #28
 8009f9e:	bf18      	it	ne
 8009fa0:	3604      	addne	r6, #4
 8009fa2:	2500      	movs	r5, #0
 8009fa4:	1f37      	subs	r7, r6, #4
 8009fa6:	4690      	mov	r8, r2
 8009fa8:	6802      	ldr	r2, [r0, #0]
 8009faa:	9301      	str	r3, [sp, #4]
 8009fac:	4682      	mov	sl, r0
 8009fae:	f846 5c04 	str.w	r5, [r6, #-4]
 8009fb2:	46b9      	mov	r9, r7
 8009fb4:	463c      	mov	r4, r7
 8009fb6:	9502      	str	r5, [sp, #8]
 8009fb8:	46ab      	mov	fp, r5
 8009fba:	7851      	ldrb	r1, [r2, #1]
 8009fbc:	1c53      	adds	r3, r2, #1
 8009fbe:	9303      	str	r3, [sp, #12]
 8009fc0:	b341      	cbz	r1, 800a014 <__hexnan+0x88>
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	9205      	str	r2, [sp, #20]
 8009fc6:	9104      	str	r1, [sp, #16]
 8009fc8:	f7ff fd5e 	bl	8009a88 <__hexdig_fun>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d14f      	bne.n	800a070 <__hexnan+0xe4>
 8009fd0:	9904      	ldr	r1, [sp, #16]
 8009fd2:	9a05      	ldr	r2, [sp, #20]
 8009fd4:	2920      	cmp	r1, #32
 8009fd6:	d818      	bhi.n	800a00a <__hexnan+0x7e>
 8009fd8:	9b02      	ldr	r3, [sp, #8]
 8009fda:	459b      	cmp	fp, r3
 8009fdc:	dd13      	ble.n	800a006 <__hexnan+0x7a>
 8009fde:	454c      	cmp	r4, r9
 8009fe0:	d206      	bcs.n	8009ff0 <__hexnan+0x64>
 8009fe2:	2d07      	cmp	r5, #7
 8009fe4:	dc04      	bgt.n	8009ff0 <__hexnan+0x64>
 8009fe6:	462a      	mov	r2, r5
 8009fe8:	4649      	mov	r1, r9
 8009fea:	4620      	mov	r0, r4
 8009fec:	f7ff ffa8 	bl	8009f40 <L_shift>
 8009ff0:	4544      	cmp	r4, r8
 8009ff2:	d950      	bls.n	800a096 <__hexnan+0x10a>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f1a4 0904 	sub.w	r9, r4, #4
 8009ffa:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ffe:	f8cd b008 	str.w	fp, [sp, #8]
 800a002:	464c      	mov	r4, r9
 800a004:	461d      	mov	r5, r3
 800a006:	9a03      	ldr	r2, [sp, #12]
 800a008:	e7d7      	b.n	8009fba <__hexnan+0x2e>
 800a00a:	2929      	cmp	r1, #41	; 0x29
 800a00c:	d156      	bne.n	800a0bc <__hexnan+0x130>
 800a00e:	3202      	adds	r2, #2
 800a010:	f8ca 2000 	str.w	r2, [sl]
 800a014:	f1bb 0f00 	cmp.w	fp, #0
 800a018:	d050      	beq.n	800a0bc <__hexnan+0x130>
 800a01a:	454c      	cmp	r4, r9
 800a01c:	d206      	bcs.n	800a02c <__hexnan+0xa0>
 800a01e:	2d07      	cmp	r5, #7
 800a020:	dc04      	bgt.n	800a02c <__hexnan+0xa0>
 800a022:	462a      	mov	r2, r5
 800a024:	4649      	mov	r1, r9
 800a026:	4620      	mov	r0, r4
 800a028:	f7ff ff8a 	bl	8009f40 <L_shift>
 800a02c:	4544      	cmp	r4, r8
 800a02e:	d934      	bls.n	800a09a <__hexnan+0x10e>
 800a030:	f1a8 0204 	sub.w	r2, r8, #4
 800a034:	4623      	mov	r3, r4
 800a036:	f853 1b04 	ldr.w	r1, [r3], #4
 800a03a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a03e:	429f      	cmp	r7, r3
 800a040:	d2f9      	bcs.n	800a036 <__hexnan+0xaa>
 800a042:	1b3b      	subs	r3, r7, r4
 800a044:	f023 0303 	bic.w	r3, r3, #3
 800a048:	3304      	adds	r3, #4
 800a04a:	3401      	adds	r4, #1
 800a04c:	3e03      	subs	r6, #3
 800a04e:	42b4      	cmp	r4, r6
 800a050:	bf88      	it	hi
 800a052:	2304      	movhi	r3, #4
 800a054:	4443      	add	r3, r8
 800a056:	2200      	movs	r2, #0
 800a058:	f843 2b04 	str.w	r2, [r3], #4
 800a05c:	429f      	cmp	r7, r3
 800a05e:	d2fb      	bcs.n	800a058 <__hexnan+0xcc>
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	b91b      	cbnz	r3, 800a06c <__hexnan+0xe0>
 800a064:	4547      	cmp	r7, r8
 800a066:	d127      	bne.n	800a0b8 <__hexnan+0x12c>
 800a068:	2301      	movs	r3, #1
 800a06a:	603b      	str	r3, [r7, #0]
 800a06c:	2005      	movs	r0, #5
 800a06e:	e026      	b.n	800a0be <__hexnan+0x132>
 800a070:	3501      	adds	r5, #1
 800a072:	2d08      	cmp	r5, #8
 800a074:	f10b 0b01 	add.w	fp, fp, #1
 800a078:	dd06      	ble.n	800a088 <__hexnan+0xfc>
 800a07a:	4544      	cmp	r4, r8
 800a07c:	d9c3      	bls.n	800a006 <__hexnan+0x7a>
 800a07e:	2300      	movs	r3, #0
 800a080:	f844 3c04 	str.w	r3, [r4, #-4]
 800a084:	2501      	movs	r5, #1
 800a086:	3c04      	subs	r4, #4
 800a088:	6822      	ldr	r2, [r4, #0]
 800a08a:	f000 000f 	and.w	r0, r0, #15
 800a08e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a092:	6022      	str	r2, [r4, #0]
 800a094:	e7b7      	b.n	800a006 <__hexnan+0x7a>
 800a096:	2508      	movs	r5, #8
 800a098:	e7b5      	b.n	800a006 <__hexnan+0x7a>
 800a09a:	9b01      	ldr	r3, [sp, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d0df      	beq.n	800a060 <__hexnan+0xd4>
 800a0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a4:	f1c3 0320 	rsb	r3, r3, #32
 800a0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a0b0:	401a      	ands	r2, r3
 800a0b2:	f846 2c04 	str.w	r2, [r6, #-4]
 800a0b6:	e7d3      	b.n	800a060 <__hexnan+0xd4>
 800a0b8:	3f04      	subs	r7, #4
 800a0ba:	e7d1      	b.n	800a060 <__hexnan+0xd4>
 800a0bc:	2004      	movs	r0, #4
 800a0be:	b007      	add	sp, #28
 800a0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0c4 <_localeconv_r>:
 800a0c4:	4800      	ldr	r0, [pc, #0]	; (800a0c8 <_localeconv_r+0x4>)
 800a0c6:	4770      	bx	lr
 800a0c8:	2000016c 	.word	0x2000016c

0800a0cc <malloc>:
 800a0cc:	4b02      	ldr	r3, [pc, #8]	; (800a0d8 <malloc+0xc>)
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	6818      	ldr	r0, [r3, #0]
 800a0d2:	f000 bd67 	b.w	800aba4 <_malloc_r>
 800a0d6:	bf00      	nop
 800a0d8:	20000014 	.word	0x20000014

0800a0dc <__ascii_mbtowc>:
 800a0dc:	b082      	sub	sp, #8
 800a0de:	b901      	cbnz	r1, 800a0e2 <__ascii_mbtowc+0x6>
 800a0e0:	a901      	add	r1, sp, #4
 800a0e2:	b142      	cbz	r2, 800a0f6 <__ascii_mbtowc+0x1a>
 800a0e4:	b14b      	cbz	r3, 800a0fa <__ascii_mbtowc+0x1e>
 800a0e6:	7813      	ldrb	r3, [r2, #0]
 800a0e8:	600b      	str	r3, [r1, #0]
 800a0ea:	7812      	ldrb	r2, [r2, #0]
 800a0ec:	1e10      	subs	r0, r2, #0
 800a0ee:	bf18      	it	ne
 800a0f0:	2001      	movne	r0, #1
 800a0f2:	b002      	add	sp, #8
 800a0f4:	4770      	bx	lr
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	e7fb      	b.n	800a0f2 <__ascii_mbtowc+0x16>
 800a0fa:	f06f 0001 	mvn.w	r0, #1
 800a0fe:	e7f8      	b.n	800a0f2 <__ascii_mbtowc+0x16>

0800a100 <memcpy>:
 800a100:	440a      	add	r2, r1
 800a102:	4291      	cmp	r1, r2
 800a104:	f100 33ff 	add.w	r3, r0, #4294967295
 800a108:	d100      	bne.n	800a10c <memcpy+0xc>
 800a10a:	4770      	bx	lr
 800a10c:	b510      	push	{r4, lr}
 800a10e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a112:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a116:	4291      	cmp	r1, r2
 800a118:	d1f9      	bne.n	800a10e <memcpy+0xe>
 800a11a:	bd10      	pop	{r4, pc}

0800a11c <_Balloc>:
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a120:	4604      	mov	r4, r0
 800a122:	460d      	mov	r5, r1
 800a124:	b976      	cbnz	r6, 800a144 <_Balloc+0x28>
 800a126:	2010      	movs	r0, #16
 800a128:	f7ff ffd0 	bl	800a0cc <malloc>
 800a12c:	4602      	mov	r2, r0
 800a12e:	6260      	str	r0, [r4, #36]	; 0x24
 800a130:	b920      	cbnz	r0, 800a13c <_Balloc+0x20>
 800a132:	4b18      	ldr	r3, [pc, #96]	; (800a194 <_Balloc+0x78>)
 800a134:	4818      	ldr	r0, [pc, #96]	; (800a198 <_Balloc+0x7c>)
 800a136:	2166      	movs	r1, #102	; 0x66
 800a138:	f000 ff40 	bl	800afbc <__assert_func>
 800a13c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a140:	6006      	str	r6, [r0, #0]
 800a142:	60c6      	str	r6, [r0, #12]
 800a144:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a146:	68f3      	ldr	r3, [r6, #12]
 800a148:	b183      	cbz	r3, 800a16c <_Balloc+0x50>
 800a14a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a152:	b9b8      	cbnz	r0, 800a184 <_Balloc+0x68>
 800a154:	2101      	movs	r1, #1
 800a156:	fa01 f605 	lsl.w	r6, r1, r5
 800a15a:	1d72      	adds	r2, r6, #5
 800a15c:	0092      	lsls	r2, r2, #2
 800a15e:	4620      	mov	r0, r4
 800a160:	f000 fc9d 	bl	800aa9e <_calloc_r>
 800a164:	b160      	cbz	r0, 800a180 <_Balloc+0x64>
 800a166:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a16a:	e00e      	b.n	800a18a <_Balloc+0x6e>
 800a16c:	2221      	movs	r2, #33	; 0x21
 800a16e:	2104      	movs	r1, #4
 800a170:	4620      	mov	r0, r4
 800a172:	f000 fc94 	bl	800aa9e <_calloc_r>
 800a176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a178:	60f0      	str	r0, [r6, #12]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1e4      	bne.n	800a14a <_Balloc+0x2e>
 800a180:	2000      	movs	r0, #0
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	6802      	ldr	r2, [r0, #0]
 800a186:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a18a:	2300      	movs	r3, #0
 800a18c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a190:	e7f7      	b.n	800a182 <_Balloc+0x66>
 800a192:	bf00      	nop
 800a194:	0800bd46 	.word	0x0800bd46
 800a198:	0800be44 	.word	0x0800be44

0800a19c <_Bfree>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1a0:	4605      	mov	r5, r0
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	b976      	cbnz	r6, 800a1c4 <_Bfree+0x28>
 800a1a6:	2010      	movs	r0, #16
 800a1a8:	f7ff ff90 	bl	800a0cc <malloc>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	6268      	str	r0, [r5, #36]	; 0x24
 800a1b0:	b920      	cbnz	r0, 800a1bc <_Bfree+0x20>
 800a1b2:	4b09      	ldr	r3, [pc, #36]	; (800a1d8 <_Bfree+0x3c>)
 800a1b4:	4809      	ldr	r0, [pc, #36]	; (800a1dc <_Bfree+0x40>)
 800a1b6:	218a      	movs	r1, #138	; 0x8a
 800a1b8:	f000 ff00 	bl	800afbc <__assert_func>
 800a1bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1c0:	6006      	str	r6, [r0, #0]
 800a1c2:	60c6      	str	r6, [r0, #12]
 800a1c4:	b13c      	cbz	r4, 800a1d6 <_Bfree+0x3a>
 800a1c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1c8:	6862      	ldr	r2, [r4, #4]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1d0:	6021      	str	r1, [r4, #0]
 800a1d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1d6:	bd70      	pop	{r4, r5, r6, pc}
 800a1d8:	0800bd46 	.word	0x0800bd46
 800a1dc:	0800be44 	.word	0x0800be44

0800a1e0 <__multadd>:
 800a1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e4:	690d      	ldr	r5, [r1, #16]
 800a1e6:	4607      	mov	r7, r0
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	461e      	mov	r6, r3
 800a1ec:	f101 0c14 	add.w	ip, r1, #20
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a1f6:	b299      	uxth	r1, r3
 800a1f8:	fb02 6101 	mla	r1, r2, r1, r6
 800a1fc:	0c1e      	lsrs	r6, r3, #16
 800a1fe:	0c0b      	lsrs	r3, r1, #16
 800a200:	fb02 3306 	mla	r3, r2, r6, r3
 800a204:	b289      	uxth	r1, r1
 800a206:	3001      	adds	r0, #1
 800a208:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a20c:	4285      	cmp	r5, r0
 800a20e:	f84c 1b04 	str.w	r1, [ip], #4
 800a212:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a216:	dcec      	bgt.n	800a1f2 <__multadd+0x12>
 800a218:	b30e      	cbz	r6, 800a25e <__multadd+0x7e>
 800a21a:	68a3      	ldr	r3, [r4, #8]
 800a21c:	42ab      	cmp	r3, r5
 800a21e:	dc19      	bgt.n	800a254 <__multadd+0x74>
 800a220:	6861      	ldr	r1, [r4, #4]
 800a222:	4638      	mov	r0, r7
 800a224:	3101      	adds	r1, #1
 800a226:	f7ff ff79 	bl	800a11c <_Balloc>
 800a22a:	4680      	mov	r8, r0
 800a22c:	b928      	cbnz	r0, 800a23a <__multadd+0x5a>
 800a22e:	4602      	mov	r2, r0
 800a230:	4b0c      	ldr	r3, [pc, #48]	; (800a264 <__multadd+0x84>)
 800a232:	480d      	ldr	r0, [pc, #52]	; (800a268 <__multadd+0x88>)
 800a234:	21b5      	movs	r1, #181	; 0xb5
 800a236:	f000 fec1 	bl	800afbc <__assert_func>
 800a23a:	6922      	ldr	r2, [r4, #16]
 800a23c:	3202      	adds	r2, #2
 800a23e:	f104 010c 	add.w	r1, r4, #12
 800a242:	0092      	lsls	r2, r2, #2
 800a244:	300c      	adds	r0, #12
 800a246:	f7ff ff5b 	bl	800a100 <memcpy>
 800a24a:	4621      	mov	r1, r4
 800a24c:	4638      	mov	r0, r7
 800a24e:	f7ff ffa5 	bl	800a19c <_Bfree>
 800a252:	4644      	mov	r4, r8
 800a254:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a258:	3501      	adds	r5, #1
 800a25a:	615e      	str	r6, [r3, #20]
 800a25c:	6125      	str	r5, [r4, #16]
 800a25e:	4620      	mov	r0, r4
 800a260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a264:	0800bdb8 	.word	0x0800bdb8
 800a268:	0800be44 	.word	0x0800be44

0800a26c <__s2b>:
 800a26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a270:	460c      	mov	r4, r1
 800a272:	4615      	mov	r5, r2
 800a274:	461f      	mov	r7, r3
 800a276:	2209      	movs	r2, #9
 800a278:	3308      	adds	r3, #8
 800a27a:	4606      	mov	r6, r0
 800a27c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a280:	2100      	movs	r1, #0
 800a282:	2201      	movs	r2, #1
 800a284:	429a      	cmp	r2, r3
 800a286:	db09      	blt.n	800a29c <__s2b+0x30>
 800a288:	4630      	mov	r0, r6
 800a28a:	f7ff ff47 	bl	800a11c <_Balloc>
 800a28e:	b940      	cbnz	r0, 800a2a2 <__s2b+0x36>
 800a290:	4602      	mov	r2, r0
 800a292:	4b19      	ldr	r3, [pc, #100]	; (800a2f8 <__s2b+0x8c>)
 800a294:	4819      	ldr	r0, [pc, #100]	; (800a2fc <__s2b+0x90>)
 800a296:	21ce      	movs	r1, #206	; 0xce
 800a298:	f000 fe90 	bl	800afbc <__assert_func>
 800a29c:	0052      	lsls	r2, r2, #1
 800a29e:	3101      	adds	r1, #1
 800a2a0:	e7f0      	b.n	800a284 <__s2b+0x18>
 800a2a2:	9b08      	ldr	r3, [sp, #32]
 800a2a4:	6143      	str	r3, [r0, #20]
 800a2a6:	2d09      	cmp	r5, #9
 800a2a8:	f04f 0301 	mov.w	r3, #1
 800a2ac:	6103      	str	r3, [r0, #16]
 800a2ae:	dd16      	ble.n	800a2de <__s2b+0x72>
 800a2b0:	f104 0909 	add.w	r9, r4, #9
 800a2b4:	46c8      	mov	r8, r9
 800a2b6:	442c      	add	r4, r5
 800a2b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a2bc:	4601      	mov	r1, r0
 800a2be:	3b30      	subs	r3, #48	; 0x30
 800a2c0:	220a      	movs	r2, #10
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	f7ff ff8c 	bl	800a1e0 <__multadd>
 800a2c8:	45a0      	cmp	r8, r4
 800a2ca:	d1f5      	bne.n	800a2b8 <__s2b+0x4c>
 800a2cc:	f1a5 0408 	sub.w	r4, r5, #8
 800a2d0:	444c      	add	r4, r9
 800a2d2:	1b2d      	subs	r5, r5, r4
 800a2d4:	1963      	adds	r3, r4, r5
 800a2d6:	42bb      	cmp	r3, r7
 800a2d8:	db04      	blt.n	800a2e4 <__s2b+0x78>
 800a2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2de:	340a      	adds	r4, #10
 800a2e0:	2509      	movs	r5, #9
 800a2e2:	e7f6      	b.n	800a2d2 <__s2b+0x66>
 800a2e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a2e8:	4601      	mov	r1, r0
 800a2ea:	3b30      	subs	r3, #48	; 0x30
 800a2ec:	220a      	movs	r2, #10
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f7ff ff76 	bl	800a1e0 <__multadd>
 800a2f4:	e7ee      	b.n	800a2d4 <__s2b+0x68>
 800a2f6:	bf00      	nop
 800a2f8:	0800bdb8 	.word	0x0800bdb8
 800a2fc:	0800be44 	.word	0x0800be44

0800a300 <__hi0bits>:
 800a300:	0c03      	lsrs	r3, r0, #16
 800a302:	041b      	lsls	r3, r3, #16
 800a304:	b9d3      	cbnz	r3, 800a33c <__hi0bits+0x3c>
 800a306:	0400      	lsls	r0, r0, #16
 800a308:	2310      	movs	r3, #16
 800a30a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a30e:	bf04      	itt	eq
 800a310:	0200      	lsleq	r0, r0, #8
 800a312:	3308      	addeq	r3, #8
 800a314:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a318:	bf04      	itt	eq
 800a31a:	0100      	lsleq	r0, r0, #4
 800a31c:	3304      	addeq	r3, #4
 800a31e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a322:	bf04      	itt	eq
 800a324:	0080      	lsleq	r0, r0, #2
 800a326:	3302      	addeq	r3, #2
 800a328:	2800      	cmp	r0, #0
 800a32a:	db05      	blt.n	800a338 <__hi0bits+0x38>
 800a32c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a330:	f103 0301 	add.w	r3, r3, #1
 800a334:	bf08      	it	eq
 800a336:	2320      	moveq	r3, #32
 800a338:	4618      	mov	r0, r3
 800a33a:	4770      	bx	lr
 800a33c:	2300      	movs	r3, #0
 800a33e:	e7e4      	b.n	800a30a <__hi0bits+0xa>

0800a340 <__lo0bits>:
 800a340:	6803      	ldr	r3, [r0, #0]
 800a342:	f013 0207 	ands.w	r2, r3, #7
 800a346:	4601      	mov	r1, r0
 800a348:	d00b      	beq.n	800a362 <__lo0bits+0x22>
 800a34a:	07da      	lsls	r2, r3, #31
 800a34c:	d423      	bmi.n	800a396 <__lo0bits+0x56>
 800a34e:	0798      	lsls	r0, r3, #30
 800a350:	bf49      	itett	mi
 800a352:	085b      	lsrmi	r3, r3, #1
 800a354:	089b      	lsrpl	r3, r3, #2
 800a356:	2001      	movmi	r0, #1
 800a358:	600b      	strmi	r3, [r1, #0]
 800a35a:	bf5c      	itt	pl
 800a35c:	600b      	strpl	r3, [r1, #0]
 800a35e:	2002      	movpl	r0, #2
 800a360:	4770      	bx	lr
 800a362:	b298      	uxth	r0, r3
 800a364:	b9a8      	cbnz	r0, 800a392 <__lo0bits+0x52>
 800a366:	0c1b      	lsrs	r3, r3, #16
 800a368:	2010      	movs	r0, #16
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	b90a      	cbnz	r2, 800a372 <__lo0bits+0x32>
 800a36e:	3008      	adds	r0, #8
 800a370:	0a1b      	lsrs	r3, r3, #8
 800a372:	071a      	lsls	r2, r3, #28
 800a374:	bf04      	itt	eq
 800a376:	091b      	lsreq	r3, r3, #4
 800a378:	3004      	addeq	r0, #4
 800a37a:	079a      	lsls	r2, r3, #30
 800a37c:	bf04      	itt	eq
 800a37e:	089b      	lsreq	r3, r3, #2
 800a380:	3002      	addeq	r0, #2
 800a382:	07da      	lsls	r2, r3, #31
 800a384:	d403      	bmi.n	800a38e <__lo0bits+0x4e>
 800a386:	085b      	lsrs	r3, r3, #1
 800a388:	f100 0001 	add.w	r0, r0, #1
 800a38c:	d005      	beq.n	800a39a <__lo0bits+0x5a>
 800a38e:	600b      	str	r3, [r1, #0]
 800a390:	4770      	bx	lr
 800a392:	4610      	mov	r0, r2
 800a394:	e7e9      	b.n	800a36a <__lo0bits+0x2a>
 800a396:	2000      	movs	r0, #0
 800a398:	4770      	bx	lr
 800a39a:	2020      	movs	r0, #32
 800a39c:	4770      	bx	lr
	...

0800a3a0 <__i2b>:
 800a3a0:	b510      	push	{r4, lr}
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	f7ff feb9 	bl	800a11c <_Balloc>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	b928      	cbnz	r0, 800a3ba <__i2b+0x1a>
 800a3ae:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <__i2b+0x24>)
 800a3b0:	4805      	ldr	r0, [pc, #20]	; (800a3c8 <__i2b+0x28>)
 800a3b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3b6:	f000 fe01 	bl	800afbc <__assert_func>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	6144      	str	r4, [r0, #20]
 800a3be:	6103      	str	r3, [r0, #16]
 800a3c0:	bd10      	pop	{r4, pc}
 800a3c2:	bf00      	nop
 800a3c4:	0800bdb8 	.word	0x0800bdb8
 800a3c8:	0800be44 	.word	0x0800be44

0800a3cc <__multiply>:
 800a3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d0:	4691      	mov	r9, r2
 800a3d2:	690a      	ldr	r2, [r1, #16]
 800a3d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	bfb8      	it	lt
 800a3dc:	460b      	movlt	r3, r1
 800a3de:	460c      	mov	r4, r1
 800a3e0:	bfbc      	itt	lt
 800a3e2:	464c      	movlt	r4, r9
 800a3e4:	4699      	movlt	r9, r3
 800a3e6:	6927      	ldr	r7, [r4, #16]
 800a3e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3ec:	68a3      	ldr	r3, [r4, #8]
 800a3ee:	6861      	ldr	r1, [r4, #4]
 800a3f0:	eb07 060a 	add.w	r6, r7, sl
 800a3f4:	42b3      	cmp	r3, r6
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	bfb8      	it	lt
 800a3fa:	3101      	addlt	r1, #1
 800a3fc:	f7ff fe8e 	bl	800a11c <_Balloc>
 800a400:	b930      	cbnz	r0, 800a410 <__multiply+0x44>
 800a402:	4602      	mov	r2, r0
 800a404:	4b44      	ldr	r3, [pc, #272]	; (800a518 <__multiply+0x14c>)
 800a406:	4845      	ldr	r0, [pc, #276]	; (800a51c <__multiply+0x150>)
 800a408:	f240 115d 	movw	r1, #349	; 0x15d
 800a40c:	f000 fdd6 	bl	800afbc <__assert_func>
 800a410:	f100 0514 	add.w	r5, r0, #20
 800a414:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a418:	462b      	mov	r3, r5
 800a41a:	2200      	movs	r2, #0
 800a41c:	4543      	cmp	r3, r8
 800a41e:	d321      	bcc.n	800a464 <__multiply+0x98>
 800a420:	f104 0314 	add.w	r3, r4, #20
 800a424:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a428:	f109 0314 	add.w	r3, r9, #20
 800a42c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a430:	9202      	str	r2, [sp, #8]
 800a432:	1b3a      	subs	r2, r7, r4
 800a434:	3a15      	subs	r2, #21
 800a436:	f022 0203 	bic.w	r2, r2, #3
 800a43a:	3204      	adds	r2, #4
 800a43c:	f104 0115 	add.w	r1, r4, #21
 800a440:	428f      	cmp	r7, r1
 800a442:	bf38      	it	cc
 800a444:	2204      	movcc	r2, #4
 800a446:	9201      	str	r2, [sp, #4]
 800a448:	9a02      	ldr	r2, [sp, #8]
 800a44a:	9303      	str	r3, [sp, #12]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d80c      	bhi.n	800a46a <__multiply+0x9e>
 800a450:	2e00      	cmp	r6, #0
 800a452:	dd03      	ble.n	800a45c <__multiply+0x90>
 800a454:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d05a      	beq.n	800a512 <__multiply+0x146>
 800a45c:	6106      	str	r6, [r0, #16]
 800a45e:	b005      	add	sp, #20
 800a460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a464:	f843 2b04 	str.w	r2, [r3], #4
 800a468:	e7d8      	b.n	800a41c <__multiply+0x50>
 800a46a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a46e:	f1ba 0f00 	cmp.w	sl, #0
 800a472:	d024      	beq.n	800a4be <__multiply+0xf2>
 800a474:	f104 0e14 	add.w	lr, r4, #20
 800a478:	46a9      	mov	r9, r5
 800a47a:	f04f 0c00 	mov.w	ip, #0
 800a47e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a482:	f8d9 1000 	ldr.w	r1, [r9]
 800a486:	fa1f fb82 	uxth.w	fp, r2
 800a48a:	b289      	uxth	r1, r1
 800a48c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a490:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a494:	f8d9 2000 	ldr.w	r2, [r9]
 800a498:	4461      	add	r1, ip
 800a49a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a49e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a4a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4a6:	b289      	uxth	r1, r1
 800a4a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4ac:	4577      	cmp	r7, lr
 800a4ae:	f849 1b04 	str.w	r1, [r9], #4
 800a4b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4b6:	d8e2      	bhi.n	800a47e <__multiply+0xb2>
 800a4b8:	9a01      	ldr	r2, [sp, #4]
 800a4ba:	f845 c002 	str.w	ip, [r5, r2]
 800a4be:	9a03      	ldr	r2, [sp, #12]
 800a4c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	f1b9 0f00 	cmp.w	r9, #0
 800a4ca:	d020      	beq.n	800a50e <__multiply+0x142>
 800a4cc:	6829      	ldr	r1, [r5, #0]
 800a4ce:	f104 0c14 	add.w	ip, r4, #20
 800a4d2:	46ae      	mov	lr, r5
 800a4d4:	f04f 0a00 	mov.w	sl, #0
 800a4d8:	f8bc b000 	ldrh.w	fp, [ip]
 800a4dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4e0:	fb09 220b 	mla	r2, r9, fp, r2
 800a4e4:	4492      	add	sl, r2
 800a4e6:	b289      	uxth	r1, r1
 800a4e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a4ec:	f84e 1b04 	str.w	r1, [lr], #4
 800a4f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a4f4:	f8be 1000 	ldrh.w	r1, [lr]
 800a4f8:	0c12      	lsrs	r2, r2, #16
 800a4fa:	fb09 1102 	mla	r1, r9, r2, r1
 800a4fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a502:	4567      	cmp	r7, ip
 800a504:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a508:	d8e6      	bhi.n	800a4d8 <__multiply+0x10c>
 800a50a:	9a01      	ldr	r2, [sp, #4]
 800a50c:	50a9      	str	r1, [r5, r2]
 800a50e:	3504      	adds	r5, #4
 800a510:	e79a      	b.n	800a448 <__multiply+0x7c>
 800a512:	3e01      	subs	r6, #1
 800a514:	e79c      	b.n	800a450 <__multiply+0x84>
 800a516:	bf00      	nop
 800a518:	0800bdb8 	.word	0x0800bdb8
 800a51c:	0800be44 	.word	0x0800be44

0800a520 <__pow5mult>:
 800a520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a524:	4615      	mov	r5, r2
 800a526:	f012 0203 	ands.w	r2, r2, #3
 800a52a:	4606      	mov	r6, r0
 800a52c:	460f      	mov	r7, r1
 800a52e:	d007      	beq.n	800a540 <__pow5mult+0x20>
 800a530:	4c25      	ldr	r4, [pc, #148]	; (800a5c8 <__pow5mult+0xa8>)
 800a532:	3a01      	subs	r2, #1
 800a534:	2300      	movs	r3, #0
 800a536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a53a:	f7ff fe51 	bl	800a1e0 <__multadd>
 800a53e:	4607      	mov	r7, r0
 800a540:	10ad      	asrs	r5, r5, #2
 800a542:	d03d      	beq.n	800a5c0 <__pow5mult+0xa0>
 800a544:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a546:	b97c      	cbnz	r4, 800a568 <__pow5mult+0x48>
 800a548:	2010      	movs	r0, #16
 800a54a:	f7ff fdbf 	bl	800a0cc <malloc>
 800a54e:	4602      	mov	r2, r0
 800a550:	6270      	str	r0, [r6, #36]	; 0x24
 800a552:	b928      	cbnz	r0, 800a560 <__pow5mult+0x40>
 800a554:	4b1d      	ldr	r3, [pc, #116]	; (800a5cc <__pow5mult+0xac>)
 800a556:	481e      	ldr	r0, [pc, #120]	; (800a5d0 <__pow5mult+0xb0>)
 800a558:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a55c:	f000 fd2e 	bl	800afbc <__assert_func>
 800a560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a564:	6004      	str	r4, [r0, #0]
 800a566:	60c4      	str	r4, [r0, #12]
 800a568:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a56c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a570:	b94c      	cbnz	r4, 800a586 <__pow5mult+0x66>
 800a572:	f240 2171 	movw	r1, #625	; 0x271
 800a576:	4630      	mov	r0, r6
 800a578:	f7ff ff12 	bl	800a3a0 <__i2b>
 800a57c:	2300      	movs	r3, #0
 800a57e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a582:	4604      	mov	r4, r0
 800a584:	6003      	str	r3, [r0, #0]
 800a586:	f04f 0900 	mov.w	r9, #0
 800a58a:	07eb      	lsls	r3, r5, #31
 800a58c:	d50a      	bpl.n	800a5a4 <__pow5mult+0x84>
 800a58e:	4639      	mov	r1, r7
 800a590:	4622      	mov	r2, r4
 800a592:	4630      	mov	r0, r6
 800a594:	f7ff ff1a 	bl	800a3cc <__multiply>
 800a598:	4639      	mov	r1, r7
 800a59a:	4680      	mov	r8, r0
 800a59c:	4630      	mov	r0, r6
 800a59e:	f7ff fdfd 	bl	800a19c <_Bfree>
 800a5a2:	4647      	mov	r7, r8
 800a5a4:	106d      	asrs	r5, r5, #1
 800a5a6:	d00b      	beq.n	800a5c0 <__pow5mult+0xa0>
 800a5a8:	6820      	ldr	r0, [r4, #0]
 800a5aa:	b938      	cbnz	r0, 800a5bc <__pow5mult+0x9c>
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7ff ff0b 	bl	800a3cc <__multiply>
 800a5b6:	6020      	str	r0, [r4, #0]
 800a5b8:	f8c0 9000 	str.w	r9, [r0]
 800a5bc:	4604      	mov	r4, r0
 800a5be:	e7e4      	b.n	800a58a <__pow5mult+0x6a>
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5c6:	bf00      	nop
 800a5c8:	0800bf90 	.word	0x0800bf90
 800a5cc:	0800bd46 	.word	0x0800bd46
 800a5d0:	0800be44 	.word	0x0800be44

0800a5d4 <__lshift>:
 800a5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d8:	460c      	mov	r4, r1
 800a5da:	6849      	ldr	r1, [r1, #4]
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5e2:	68a3      	ldr	r3, [r4, #8]
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	4691      	mov	r9, r2
 800a5e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5ec:	f108 0601 	add.w	r6, r8, #1
 800a5f0:	42b3      	cmp	r3, r6
 800a5f2:	db0b      	blt.n	800a60c <__lshift+0x38>
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f7ff fd91 	bl	800a11c <_Balloc>
 800a5fa:	4605      	mov	r5, r0
 800a5fc:	b948      	cbnz	r0, 800a612 <__lshift+0x3e>
 800a5fe:	4602      	mov	r2, r0
 800a600:	4b2a      	ldr	r3, [pc, #168]	; (800a6ac <__lshift+0xd8>)
 800a602:	482b      	ldr	r0, [pc, #172]	; (800a6b0 <__lshift+0xdc>)
 800a604:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a608:	f000 fcd8 	bl	800afbc <__assert_func>
 800a60c:	3101      	adds	r1, #1
 800a60e:	005b      	lsls	r3, r3, #1
 800a610:	e7ee      	b.n	800a5f0 <__lshift+0x1c>
 800a612:	2300      	movs	r3, #0
 800a614:	f100 0114 	add.w	r1, r0, #20
 800a618:	f100 0210 	add.w	r2, r0, #16
 800a61c:	4618      	mov	r0, r3
 800a61e:	4553      	cmp	r3, sl
 800a620:	db37      	blt.n	800a692 <__lshift+0xbe>
 800a622:	6920      	ldr	r0, [r4, #16]
 800a624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a628:	f104 0314 	add.w	r3, r4, #20
 800a62c:	f019 091f 	ands.w	r9, r9, #31
 800a630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a634:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a638:	d02f      	beq.n	800a69a <__lshift+0xc6>
 800a63a:	f1c9 0e20 	rsb	lr, r9, #32
 800a63e:	468a      	mov	sl, r1
 800a640:	f04f 0c00 	mov.w	ip, #0
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	fa02 f209 	lsl.w	r2, r2, r9
 800a64a:	ea42 020c 	orr.w	r2, r2, ip
 800a64e:	f84a 2b04 	str.w	r2, [sl], #4
 800a652:	f853 2b04 	ldr.w	r2, [r3], #4
 800a656:	4298      	cmp	r0, r3
 800a658:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a65c:	d8f2      	bhi.n	800a644 <__lshift+0x70>
 800a65e:	1b03      	subs	r3, r0, r4
 800a660:	3b15      	subs	r3, #21
 800a662:	f023 0303 	bic.w	r3, r3, #3
 800a666:	3304      	adds	r3, #4
 800a668:	f104 0215 	add.w	r2, r4, #21
 800a66c:	4290      	cmp	r0, r2
 800a66e:	bf38      	it	cc
 800a670:	2304      	movcc	r3, #4
 800a672:	f841 c003 	str.w	ip, [r1, r3]
 800a676:	f1bc 0f00 	cmp.w	ip, #0
 800a67a:	d001      	beq.n	800a680 <__lshift+0xac>
 800a67c:	f108 0602 	add.w	r6, r8, #2
 800a680:	3e01      	subs	r6, #1
 800a682:	4638      	mov	r0, r7
 800a684:	612e      	str	r6, [r5, #16]
 800a686:	4621      	mov	r1, r4
 800a688:	f7ff fd88 	bl	800a19c <_Bfree>
 800a68c:	4628      	mov	r0, r5
 800a68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a692:	f842 0f04 	str.w	r0, [r2, #4]!
 800a696:	3301      	adds	r3, #1
 800a698:	e7c1      	b.n	800a61e <__lshift+0x4a>
 800a69a:	3904      	subs	r1, #4
 800a69c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6a4:	4298      	cmp	r0, r3
 800a6a6:	d8f9      	bhi.n	800a69c <__lshift+0xc8>
 800a6a8:	e7ea      	b.n	800a680 <__lshift+0xac>
 800a6aa:	bf00      	nop
 800a6ac:	0800bdb8 	.word	0x0800bdb8
 800a6b0:	0800be44 	.word	0x0800be44

0800a6b4 <__mcmp>:
 800a6b4:	b530      	push	{r4, r5, lr}
 800a6b6:	6902      	ldr	r2, [r0, #16]
 800a6b8:	690c      	ldr	r4, [r1, #16]
 800a6ba:	1b12      	subs	r2, r2, r4
 800a6bc:	d10e      	bne.n	800a6dc <__mcmp+0x28>
 800a6be:	f100 0314 	add.w	r3, r0, #20
 800a6c2:	3114      	adds	r1, #20
 800a6c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6d4:	42a5      	cmp	r5, r4
 800a6d6:	d003      	beq.n	800a6e0 <__mcmp+0x2c>
 800a6d8:	d305      	bcc.n	800a6e6 <__mcmp+0x32>
 800a6da:	2201      	movs	r2, #1
 800a6dc:	4610      	mov	r0, r2
 800a6de:	bd30      	pop	{r4, r5, pc}
 800a6e0:	4283      	cmp	r3, r0
 800a6e2:	d3f3      	bcc.n	800a6cc <__mcmp+0x18>
 800a6e4:	e7fa      	b.n	800a6dc <__mcmp+0x28>
 800a6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ea:	e7f7      	b.n	800a6dc <__mcmp+0x28>

0800a6ec <__mdiff>:
 800a6ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	4690      	mov	r8, r2
 800a6fa:	f7ff ffdb 	bl	800a6b4 <__mcmp>
 800a6fe:	1e05      	subs	r5, r0, #0
 800a700:	d110      	bne.n	800a724 <__mdiff+0x38>
 800a702:	4629      	mov	r1, r5
 800a704:	4630      	mov	r0, r6
 800a706:	f7ff fd09 	bl	800a11c <_Balloc>
 800a70a:	b930      	cbnz	r0, 800a71a <__mdiff+0x2e>
 800a70c:	4b3a      	ldr	r3, [pc, #232]	; (800a7f8 <__mdiff+0x10c>)
 800a70e:	4602      	mov	r2, r0
 800a710:	f240 2132 	movw	r1, #562	; 0x232
 800a714:	4839      	ldr	r0, [pc, #228]	; (800a7fc <__mdiff+0x110>)
 800a716:	f000 fc51 	bl	800afbc <__assert_func>
 800a71a:	2301      	movs	r3, #1
 800a71c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a724:	bfa4      	itt	ge
 800a726:	4643      	movge	r3, r8
 800a728:	46a0      	movge	r8, r4
 800a72a:	4630      	mov	r0, r6
 800a72c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a730:	bfa6      	itte	ge
 800a732:	461c      	movge	r4, r3
 800a734:	2500      	movge	r5, #0
 800a736:	2501      	movlt	r5, #1
 800a738:	f7ff fcf0 	bl	800a11c <_Balloc>
 800a73c:	b920      	cbnz	r0, 800a748 <__mdiff+0x5c>
 800a73e:	4b2e      	ldr	r3, [pc, #184]	; (800a7f8 <__mdiff+0x10c>)
 800a740:	4602      	mov	r2, r0
 800a742:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a746:	e7e5      	b.n	800a714 <__mdiff+0x28>
 800a748:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a74c:	6926      	ldr	r6, [r4, #16]
 800a74e:	60c5      	str	r5, [r0, #12]
 800a750:	f104 0914 	add.w	r9, r4, #20
 800a754:	f108 0514 	add.w	r5, r8, #20
 800a758:	f100 0e14 	add.w	lr, r0, #20
 800a75c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a760:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a764:	f108 0210 	add.w	r2, r8, #16
 800a768:	46f2      	mov	sl, lr
 800a76a:	2100      	movs	r1, #0
 800a76c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a770:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a774:	fa1f f883 	uxth.w	r8, r3
 800a778:	fa11 f18b 	uxtah	r1, r1, fp
 800a77c:	0c1b      	lsrs	r3, r3, #16
 800a77e:	eba1 0808 	sub.w	r8, r1, r8
 800a782:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a786:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a78a:	fa1f f888 	uxth.w	r8, r8
 800a78e:	1419      	asrs	r1, r3, #16
 800a790:	454e      	cmp	r6, r9
 800a792:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a796:	f84a 3b04 	str.w	r3, [sl], #4
 800a79a:	d8e7      	bhi.n	800a76c <__mdiff+0x80>
 800a79c:	1b33      	subs	r3, r6, r4
 800a79e:	3b15      	subs	r3, #21
 800a7a0:	f023 0303 	bic.w	r3, r3, #3
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	3415      	adds	r4, #21
 800a7a8:	42a6      	cmp	r6, r4
 800a7aa:	bf38      	it	cc
 800a7ac:	2304      	movcc	r3, #4
 800a7ae:	441d      	add	r5, r3
 800a7b0:	4473      	add	r3, lr
 800a7b2:	469e      	mov	lr, r3
 800a7b4:	462e      	mov	r6, r5
 800a7b6:	4566      	cmp	r6, ip
 800a7b8:	d30e      	bcc.n	800a7d8 <__mdiff+0xec>
 800a7ba:	f10c 0203 	add.w	r2, ip, #3
 800a7be:	1b52      	subs	r2, r2, r5
 800a7c0:	f022 0203 	bic.w	r2, r2, #3
 800a7c4:	3d03      	subs	r5, #3
 800a7c6:	45ac      	cmp	ip, r5
 800a7c8:	bf38      	it	cc
 800a7ca:	2200      	movcc	r2, #0
 800a7cc:	441a      	add	r2, r3
 800a7ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7d2:	b17b      	cbz	r3, 800a7f4 <__mdiff+0x108>
 800a7d4:	6107      	str	r7, [r0, #16]
 800a7d6:	e7a3      	b.n	800a720 <__mdiff+0x34>
 800a7d8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7dc:	fa11 f288 	uxtah	r2, r1, r8
 800a7e0:	1414      	asrs	r4, r2, #16
 800a7e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7e6:	b292      	uxth	r2, r2
 800a7e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a7ec:	f84e 2b04 	str.w	r2, [lr], #4
 800a7f0:	1421      	asrs	r1, r4, #16
 800a7f2:	e7e0      	b.n	800a7b6 <__mdiff+0xca>
 800a7f4:	3f01      	subs	r7, #1
 800a7f6:	e7ea      	b.n	800a7ce <__mdiff+0xe2>
 800a7f8:	0800bdb8 	.word	0x0800bdb8
 800a7fc:	0800be44 	.word	0x0800be44

0800a800 <__ulp>:
 800a800:	b082      	sub	sp, #8
 800a802:	ed8d 0b00 	vstr	d0, [sp]
 800a806:	9b01      	ldr	r3, [sp, #4]
 800a808:	4912      	ldr	r1, [pc, #72]	; (800a854 <__ulp+0x54>)
 800a80a:	4019      	ands	r1, r3
 800a80c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a810:	2900      	cmp	r1, #0
 800a812:	dd05      	ble.n	800a820 <__ulp+0x20>
 800a814:	2200      	movs	r2, #0
 800a816:	460b      	mov	r3, r1
 800a818:	ec43 2b10 	vmov	d0, r2, r3
 800a81c:	b002      	add	sp, #8
 800a81e:	4770      	bx	lr
 800a820:	4249      	negs	r1, r1
 800a822:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a826:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a82a:	f04f 0200 	mov.w	r2, #0
 800a82e:	f04f 0300 	mov.w	r3, #0
 800a832:	da04      	bge.n	800a83e <__ulp+0x3e>
 800a834:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a838:	fa41 f300 	asr.w	r3, r1, r0
 800a83c:	e7ec      	b.n	800a818 <__ulp+0x18>
 800a83e:	f1a0 0114 	sub.w	r1, r0, #20
 800a842:	291e      	cmp	r1, #30
 800a844:	bfda      	itte	le
 800a846:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a84a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a84e:	2101      	movgt	r1, #1
 800a850:	460a      	mov	r2, r1
 800a852:	e7e1      	b.n	800a818 <__ulp+0x18>
 800a854:	7ff00000 	.word	0x7ff00000

0800a858 <__b2d>:
 800a858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85a:	6905      	ldr	r5, [r0, #16]
 800a85c:	f100 0714 	add.w	r7, r0, #20
 800a860:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a864:	1f2e      	subs	r6, r5, #4
 800a866:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a86a:	4620      	mov	r0, r4
 800a86c:	f7ff fd48 	bl	800a300 <__hi0bits>
 800a870:	f1c0 0320 	rsb	r3, r0, #32
 800a874:	280a      	cmp	r0, #10
 800a876:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a8f4 <__b2d+0x9c>
 800a87a:	600b      	str	r3, [r1, #0]
 800a87c:	dc14      	bgt.n	800a8a8 <__b2d+0x50>
 800a87e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a882:	fa24 f10e 	lsr.w	r1, r4, lr
 800a886:	42b7      	cmp	r7, r6
 800a888:	ea41 030c 	orr.w	r3, r1, ip
 800a88c:	bf34      	ite	cc
 800a88e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a892:	2100      	movcs	r1, #0
 800a894:	3015      	adds	r0, #21
 800a896:	fa04 f000 	lsl.w	r0, r4, r0
 800a89a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a89e:	ea40 0201 	orr.w	r2, r0, r1
 800a8a2:	ec43 2b10 	vmov	d0, r2, r3
 800a8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8a8:	42b7      	cmp	r7, r6
 800a8aa:	bf3a      	itte	cc
 800a8ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a8b0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a8b4:	2100      	movcs	r1, #0
 800a8b6:	380b      	subs	r0, #11
 800a8b8:	d017      	beq.n	800a8ea <__b2d+0x92>
 800a8ba:	f1c0 0c20 	rsb	ip, r0, #32
 800a8be:	fa04 f500 	lsl.w	r5, r4, r0
 800a8c2:	42be      	cmp	r6, r7
 800a8c4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a8c8:	ea45 0504 	orr.w	r5, r5, r4
 800a8cc:	bf8c      	ite	hi
 800a8ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a8d2:	2400      	movls	r4, #0
 800a8d4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a8d8:	fa01 f000 	lsl.w	r0, r1, r0
 800a8dc:	fa24 f40c 	lsr.w	r4, r4, ip
 800a8e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a8e4:	ea40 0204 	orr.w	r2, r0, r4
 800a8e8:	e7db      	b.n	800a8a2 <__b2d+0x4a>
 800a8ea:	ea44 030c 	orr.w	r3, r4, ip
 800a8ee:	460a      	mov	r2, r1
 800a8f0:	e7d7      	b.n	800a8a2 <__b2d+0x4a>
 800a8f2:	bf00      	nop
 800a8f4:	3ff00000 	.word	0x3ff00000

0800a8f8 <__d2b>:
 800a8f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8fc:	4689      	mov	r9, r1
 800a8fe:	2101      	movs	r1, #1
 800a900:	ec57 6b10 	vmov	r6, r7, d0
 800a904:	4690      	mov	r8, r2
 800a906:	f7ff fc09 	bl	800a11c <_Balloc>
 800a90a:	4604      	mov	r4, r0
 800a90c:	b930      	cbnz	r0, 800a91c <__d2b+0x24>
 800a90e:	4602      	mov	r2, r0
 800a910:	4b25      	ldr	r3, [pc, #148]	; (800a9a8 <__d2b+0xb0>)
 800a912:	4826      	ldr	r0, [pc, #152]	; (800a9ac <__d2b+0xb4>)
 800a914:	f240 310a 	movw	r1, #778	; 0x30a
 800a918:	f000 fb50 	bl	800afbc <__assert_func>
 800a91c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a920:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a924:	bb35      	cbnz	r5, 800a974 <__d2b+0x7c>
 800a926:	2e00      	cmp	r6, #0
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	d028      	beq.n	800a97e <__d2b+0x86>
 800a92c:	4668      	mov	r0, sp
 800a92e:	9600      	str	r6, [sp, #0]
 800a930:	f7ff fd06 	bl	800a340 <__lo0bits>
 800a934:	9900      	ldr	r1, [sp, #0]
 800a936:	b300      	cbz	r0, 800a97a <__d2b+0x82>
 800a938:	9a01      	ldr	r2, [sp, #4]
 800a93a:	f1c0 0320 	rsb	r3, r0, #32
 800a93e:	fa02 f303 	lsl.w	r3, r2, r3
 800a942:	430b      	orrs	r3, r1
 800a944:	40c2      	lsrs	r2, r0
 800a946:	6163      	str	r3, [r4, #20]
 800a948:	9201      	str	r2, [sp, #4]
 800a94a:	9b01      	ldr	r3, [sp, #4]
 800a94c:	61a3      	str	r3, [r4, #24]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	bf14      	ite	ne
 800a952:	2202      	movne	r2, #2
 800a954:	2201      	moveq	r2, #1
 800a956:	6122      	str	r2, [r4, #16]
 800a958:	b1d5      	cbz	r5, 800a990 <__d2b+0x98>
 800a95a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a95e:	4405      	add	r5, r0
 800a960:	f8c9 5000 	str.w	r5, [r9]
 800a964:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a968:	f8c8 0000 	str.w	r0, [r8]
 800a96c:	4620      	mov	r0, r4
 800a96e:	b003      	add	sp, #12
 800a970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a978:	e7d5      	b.n	800a926 <__d2b+0x2e>
 800a97a:	6161      	str	r1, [r4, #20]
 800a97c:	e7e5      	b.n	800a94a <__d2b+0x52>
 800a97e:	a801      	add	r0, sp, #4
 800a980:	f7ff fcde 	bl	800a340 <__lo0bits>
 800a984:	9b01      	ldr	r3, [sp, #4]
 800a986:	6163      	str	r3, [r4, #20]
 800a988:	2201      	movs	r2, #1
 800a98a:	6122      	str	r2, [r4, #16]
 800a98c:	3020      	adds	r0, #32
 800a98e:	e7e3      	b.n	800a958 <__d2b+0x60>
 800a990:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a994:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a998:	f8c9 0000 	str.w	r0, [r9]
 800a99c:	6918      	ldr	r0, [r3, #16]
 800a99e:	f7ff fcaf 	bl	800a300 <__hi0bits>
 800a9a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9a6:	e7df      	b.n	800a968 <__d2b+0x70>
 800a9a8:	0800bdb8 	.word	0x0800bdb8
 800a9ac:	0800be44 	.word	0x0800be44

0800a9b0 <__ratio>:
 800a9b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	4688      	mov	r8, r1
 800a9b6:	4669      	mov	r1, sp
 800a9b8:	4681      	mov	r9, r0
 800a9ba:	f7ff ff4d 	bl	800a858 <__b2d>
 800a9be:	a901      	add	r1, sp, #4
 800a9c0:	4640      	mov	r0, r8
 800a9c2:	ec55 4b10 	vmov	r4, r5, d0
 800a9c6:	f7ff ff47 	bl	800a858 <__b2d>
 800a9ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a9d2:	eba3 0c02 	sub.w	ip, r3, r2
 800a9d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a9da:	1a9b      	subs	r3, r3, r2
 800a9dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a9e0:	ec51 0b10 	vmov	r0, r1, d0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	bfd6      	itet	le
 800a9e8:	460a      	movle	r2, r1
 800a9ea:	462a      	movgt	r2, r5
 800a9ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a9f0:	468b      	mov	fp, r1
 800a9f2:	462f      	mov	r7, r5
 800a9f4:	bfd4      	ite	le
 800a9f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a9fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a9fe:	4620      	mov	r0, r4
 800aa00:	ee10 2a10 	vmov	r2, s0
 800aa04:	465b      	mov	r3, fp
 800aa06:	4639      	mov	r1, r7
 800aa08:	f7f5 ff28 	bl	800085c <__aeabi_ddiv>
 800aa0c:	ec41 0b10 	vmov	d0, r0, r1
 800aa10:	b003      	add	sp, #12
 800aa12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa16 <__copybits>:
 800aa16:	3901      	subs	r1, #1
 800aa18:	b570      	push	{r4, r5, r6, lr}
 800aa1a:	1149      	asrs	r1, r1, #5
 800aa1c:	6914      	ldr	r4, [r2, #16]
 800aa1e:	3101      	adds	r1, #1
 800aa20:	f102 0314 	add.w	r3, r2, #20
 800aa24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa2c:	1f05      	subs	r5, r0, #4
 800aa2e:	42a3      	cmp	r3, r4
 800aa30:	d30c      	bcc.n	800aa4c <__copybits+0x36>
 800aa32:	1aa3      	subs	r3, r4, r2
 800aa34:	3b11      	subs	r3, #17
 800aa36:	f023 0303 	bic.w	r3, r3, #3
 800aa3a:	3211      	adds	r2, #17
 800aa3c:	42a2      	cmp	r2, r4
 800aa3e:	bf88      	it	hi
 800aa40:	2300      	movhi	r3, #0
 800aa42:	4418      	add	r0, r3
 800aa44:	2300      	movs	r3, #0
 800aa46:	4288      	cmp	r0, r1
 800aa48:	d305      	bcc.n	800aa56 <__copybits+0x40>
 800aa4a:	bd70      	pop	{r4, r5, r6, pc}
 800aa4c:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa50:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa54:	e7eb      	b.n	800aa2e <__copybits+0x18>
 800aa56:	f840 3b04 	str.w	r3, [r0], #4
 800aa5a:	e7f4      	b.n	800aa46 <__copybits+0x30>

0800aa5c <__any_on>:
 800aa5c:	f100 0214 	add.w	r2, r0, #20
 800aa60:	6900      	ldr	r0, [r0, #16]
 800aa62:	114b      	asrs	r3, r1, #5
 800aa64:	4298      	cmp	r0, r3
 800aa66:	b510      	push	{r4, lr}
 800aa68:	db11      	blt.n	800aa8e <__any_on+0x32>
 800aa6a:	dd0a      	ble.n	800aa82 <__any_on+0x26>
 800aa6c:	f011 011f 	ands.w	r1, r1, #31
 800aa70:	d007      	beq.n	800aa82 <__any_on+0x26>
 800aa72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa76:	fa24 f001 	lsr.w	r0, r4, r1
 800aa7a:	fa00 f101 	lsl.w	r1, r0, r1
 800aa7e:	428c      	cmp	r4, r1
 800aa80:	d10b      	bne.n	800aa9a <__any_on+0x3e>
 800aa82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d803      	bhi.n	800aa92 <__any_on+0x36>
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	bd10      	pop	{r4, pc}
 800aa8e:	4603      	mov	r3, r0
 800aa90:	e7f7      	b.n	800aa82 <__any_on+0x26>
 800aa92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa96:	2900      	cmp	r1, #0
 800aa98:	d0f5      	beq.n	800aa86 <__any_on+0x2a>
 800aa9a:	2001      	movs	r0, #1
 800aa9c:	e7f6      	b.n	800aa8c <__any_on+0x30>

0800aa9e <_calloc_r>:
 800aa9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaa0:	fba1 2402 	umull	r2, r4, r1, r2
 800aaa4:	b94c      	cbnz	r4, 800aaba <_calloc_r+0x1c>
 800aaa6:	4611      	mov	r1, r2
 800aaa8:	9201      	str	r2, [sp, #4]
 800aaaa:	f000 f87b 	bl	800aba4 <_malloc_r>
 800aaae:	9a01      	ldr	r2, [sp, #4]
 800aab0:	4605      	mov	r5, r0
 800aab2:	b930      	cbnz	r0, 800aac2 <_calloc_r+0x24>
 800aab4:	4628      	mov	r0, r5
 800aab6:	b003      	add	sp, #12
 800aab8:	bd30      	pop	{r4, r5, pc}
 800aaba:	220c      	movs	r2, #12
 800aabc:	6002      	str	r2, [r0, #0]
 800aabe:	2500      	movs	r5, #0
 800aac0:	e7f8      	b.n	800aab4 <_calloc_r+0x16>
 800aac2:	4621      	mov	r1, r4
 800aac4:	f7fc fbbe 	bl	8007244 <memset>
 800aac8:	e7f4      	b.n	800aab4 <_calloc_r+0x16>
	...

0800aacc <_free_r>:
 800aacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aace:	2900      	cmp	r1, #0
 800aad0:	d044      	beq.n	800ab5c <_free_r+0x90>
 800aad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad6:	9001      	str	r0, [sp, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f1a1 0404 	sub.w	r4, r1, #4
 800aade:	bfb8      	it	lt
 800aae0:	18e4      	addlt	r4, r4, r3
 800aae2:	f000 fab5 	bl	800b050 <__malloc_lock>
 800aae6:	4a1e      	ldr	r2, [pc, #120]	; (800ab60 <_free_r+0x94>)
 800aae8:	9801      	ldr	r0, [sp, #4]
 800aaea:	6813      	ldr	r3, [r2, #0]
 800aaec:	b933      	cbnz	r3, 800aafc <_free_r+0x30>
 800aaee:	6063      	str	r3, [r4, #4]
 800aaf0:	6014      	str	r4, [r2, #0]
 800aaf2:	b003      	add	sp, #12
 800aaf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aaf8:	f000 bab0 	b.w	800b05c <__malloc_unlock>
 800aafc:	42a3      	cmp	r3, r4
 800aafe:	d908      	bls.n	800ab12 <_free_r+0x46>
 800ab00:	6825      	ldr	r5, [r4, #0]
 800ab02:	1961      	adds	r1, r4, r5
 800ab04:	428b      	cmp	r3, r1
 800ab06:	bf01      	itttt	eq
 800ab08:	6819      	ldreq	r1, [r3, #0]
 800ab0a:	685b      	ldreq	r3, [r3, #4]
 800ab0c:	1949      	addeq	r1, r1, r5
 800ab0e:	6021      	streq	r1, [r4, #0]
 800ab10:	e7ed      	b.n	800aaee <_free_r+0x22>
 800ab12:	461a      	mov	r2, r3
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	b10b      	cbz	r3, 800ab1c <_free_r+0x50>
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	d9fa      	bls.n	800ab12 <_free_r+0x46>
 800ab1c:	6811      	ldr	r1, [r2, #0]
 800ab1e:	1855      	adds	r5, r2, r1
 800ab20:	42a5      	cmp	r5, r4
 800ab22:	d10b      	bne.n	800ab3c <_free_r+0x70>
 800ab24:	6824      	ldr	r4, [r4, #0]
 800ab26:	4421      	add	r1, r4
 800ab28:	1854      	adds	r4, r2, r1
 800ab2a:	42a3      	cmp	r3, r4
 800ab2c:	6011      	str	r1, [r2, #0]
 800ab2e:	d1e0      	bne.n	800aaf2 <_free_r+0x26>
 800ab30:	681c      	ldr	r4, [r3, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	6053      	str	r3, [r2, #4]
 800ab36:	4421      	add	r1, r4
 800ab38:	6011      	str	r1, [r2, #0]
 800ab3a:	e7da      	b.n	800aaf2 <_free_r+0x26>
 800ab3c:	d902      	bls.n	800ab44 <_free_r+0x78>
 800ab3e:	230c      	movs	r3, #12
 800ab40:	6003      	str	r3, [r0, #0]
 800ab42:	e7d6      	b.n	800aaf2 <_free_r+0x26>
 800ab44:	6825      	ldr	r5, [r4, #0]
 800ab46:	1961      	adds	r1, r4, r5
 800ab48:	428b      	cmp	r3, r1
 800ab4a:	bf04      	itt	eq
 800ab4c:	6819      	ldreq	r1, [r3, #0]
 800ab4e:	685b      	ldreq	r3, [r3, #4]
 800ab50:	6063      	str	r3, [r4, #4]
 800ab52:	bf04      	itt	eq
 800ab54:	1949      	addeq	r1, r1, r5
 800ab56:	6021      	streq	r1, [r4, #0]
 800ab58:	6054      	str	r4, [r2, #4]
 800ab5a:	e7ca      	b.n	800aaf2 <_free_r+0x26>
 800ab5c:	b003      	add	sp, #12
 800ab5e:	bd30      	pop	{r4, r5, pc}
 800ab60:	20000480 	.word	0x20000480

0800ab64 <sbrk_aligned>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	4e0e      	ldr	r6, [pc, #56]	; (800aba0 <sbrk_aligned+0x3c>)
 800ab68:	460c      	mov	r4, r1
 800ab6a:	6831      	ldr	r1, [r6, #0]
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	b911      	cbnz	r1, 800ab76 <sbrk_aligned+0x12>
 800ab70:	f000 f9f2 	bl	800af58 <_sbrk_r>
 800ab74:	6030      	str	r0, [r6, #0]
 800ab76:	4621      	mov	r1, r4
 800ab78:	4628      	mov	r0, r5
 800ab7a:	f000 f9ed 	bl	800af58 <_sbrk_r>
 800ab7e:	1c43      	adds	r3, r0, #1
 800ab80:	d00a      	beq.n	800ab98 <sbrk_aligned+0x34>
 800ab82:	1cc4      	adds	r4, r0, #3
 800ab84:	f024 0403 	bic.w	r4, r4, #3
 800ab88:	42a0      	cmp	r0, r4
 800ab8a:	d007      	beq.n	800ab9c <sbrk_aligned+0x38>
 800ab8c:	1a21      	subs	r1, r4, r0
 800ab8e:	4628      	mov	r0, r5
 800ab90:	f000 f9e2 	bl	800af58 <_sbrk_r>
 800ab94:	3001      	adds	r0, #1
 800ab96:	d101      	bne.n	800ab9c <sbrk_aligned+0x38>
 800ab98:	f04f 34ff 	mov.w	r4, #4294967295
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	bd70      	pop	{r4, r5, r6, pc}
 800aba0:	20000484 	.word	0x20000484

0800aba4 <_malloc_r>:
 800aba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba8:	1ccd      	adds	r5, r1, #3
 800abaa:	f025 0503 	bic.w	r5, r5, #3
 800abae:	3508      	adds	r5, #8
 800abb0:	2d0c      	cmp	r5, #12
 800abb2:	bf38      	it	cc
 800abb4:	250c      	movcc	r5, #12
 800abb6:	2d00      	cmp	r5, #0
 800abb8:	4607      	mov	r7, r0
 800abba:	db01      	blt.n	800abc0 <_malloc_r+0x1c>
 800abbc:	42a9      	cmp	r1, r5
 800abbe:	d905      	bls.n	800abcc <_malloc_r+0x28>
 800abc0:	230c      	movs	r3, #12
 800abc2:	603b      	str	r3, [r7, #0]
 800abc4:	2600      	movs	r6, #0
 800abc6:	4630      	mov	r0, r6
 800abc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abcc:	4e2e      	ldr	r6, [pc, #184]	; (800ac88 <_malloc_r+0xe4>)
 800abce:	f000 fa3f 	bl	800b050 <__malloc_lock>
 800abd2:	6833      	ldr	r3, [r6, #0]
 800abd4:	461c      	mov	r4, r3
 800abd6:	bb34      	cbnz	r4, 800ac26 <_malloc_r+0x82>
 800abd8:	4629      	mov	r1, r5
 800abda:	4638      	mov	r0, r7
 800abdc:	f7ff ffc2 	bl	800ab64 <sbrk_aligned>
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	4604      	mov	r4, r0
 800abe4:	d14d      	bne.n	800ac82 <_malloc_r+0xde>
 800abe6:	6834      	ldr	r4, [r6, #0]
 800abe8:	4626      	mov	r6, r4
 800abea:	2e00      	cmp	r6, #0
 800abec:	d140      	bne.n	800ac70 <_malloc_r+0xcc>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	4631      	mov	r1, r6
 800abf2:	4638      	mov	r0, r7
 800abf4:	eb04 0803 	add.w	r8, r4, r3
 800abf8:	f000 f9ae 	bl	800af58 <_sbrk_r>
 800abfc:	4580      	cmp	r8, r0
 800abfe:	d13a      	bne.n	800ac76 <_malloc_r+0xd2>
 800ac00:	6821      	ldr	r1, [r4, #0]
 800ac02:	3503      	adds	r5, #3
 800ac04:	1a6d      	subs	r5, r5, r1
 800ac06:	f025 0503 	bic.w	r5, r5, #3
 800ac0a:	3508      	adds	r5, #8
 800ac0c:	2d0c      	cmp	r5, #12
 800ac0e:	bf38      	it	cc
 800ac10:	250c      	movcc	r5, #12
 800ac12:	4629      	mov	r1, r5
 800ac14:	4638      	mov	r0, r7
 800ac16:	f7ff ffa5 	bl	800ab64 <sbrk_aligned>
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	d02b      	beq.n	800ac76 <_malloc_r+0xd2>
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	442b      	add	r3, r5
 800ac22:	6023      	str	r3, [r4, #0]
 800ac24:	e00e      	b.n	800ac44 <_malloc_r+0xa0>
 800ac26:	6822      	ldr	r2, [r4, #0]
 800ac28:	1b52      	subs	r2, r2, r5
 800ac2a:	d41e      	bmi.n	800ac6a <_malloc_r+0xc6>
 800ac2c:	2a0b      	cmp	r2, #11
 800ac2e:	d916      	bls.n	800ac5e <_malloc_r+0xba>
 800ac30:	1961      	adds	r1, r4, r5
 800ac32:	42a3      	cmp	r3, r4
 800ac34:	6025      	str	r5, [r4, #0]
 800ac36:	bf18      	it	ne
 800ac38:	6059      	strne	r1, [r3, #4]
 800ac3a:	6863      	ldr	r3, [r4, #4]
 800ac3c:	bf08      	it	eq
 800ac3e:	6031      	streq	r1, [r6, #0]
 800ac40:	5162      	str	r2, [r4, r5]
 800ac42:	604b      	str	r3, [r1, #4]
 800ac44:	4638      	mov	r0, r7
 800ac46:	f104 060b 	add.w	r6, r4, #11
 800ac4a:	f000 fa07 	bl	800b05c <__malloc_unlock>
 800ac4e:	f026 0607 	bic.w	r6, r6, #7
 800ac52:	1d23      	adds	r3, r4, #4
 800ac54:	1af2      	subs	r2, r6, r3
 800ac56:	d0b6      	beq.n	800abc6 <_malloc_r+0x22>
 800ac58:	1b9b      	subs	r3, r3, r6
 800ac5a:	50a3      	str	r3, [r4, r2]
 800ac5c:	e7b3      	b.n	800abc6 <_malloc_r+0x22>
 800ac5e:	6862      	ldr	r2, [r4, #4]
 800ac60:	42a3      	cmp	r3, r4
 800ac62:	bf0c      	ite	eq
 800ac64:	6032      	streq	r2, [r6, #0]
 800ac66:	605a      	strne	r2, [r3, #4]
 800ac68:	e7ec      	b.n	800ac44 <_malloc_r+0xa0>
 800ac6a:	4623      	mov	r3, r4
 800ac6c:	6864      	ldr	r4, [r4, #4]
 800ac6e:	e7b2      	b.n	800abd6 <_malloc_r+0x32>
 800ac70:	4634      	mov	r4, r6
 800ac72:	6876      	ldr	r6, [r6, #4]
 800ac74:	e7b9      	b.n	800abea <_malloc_r+0x46>
 800ac76:	230c      	movs	r3, #12
 800ac78:	603b      	str	r3, [r7, #0]
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	f000 f9ee 	bl	800b05c <__malloc_unlock>
 800ac80:	e7a1      	b.n	800abc6 <_malloc_r+0x22>
 800ac82:	6025      	str	r5, [r4, #0]
 800ac84:	e7de      	b.n	800ac44 <_malloc_r+0xa0>
 800ac86:	bf00      	nop
 800ac88:	20000480 	.word	0x20000480

0800ac8c <__ssputs_r>:
 800ac8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac90:	688e      	ldr	r6, [r1, #8]
 800ac92:	429e      	cmp	r6, r3
 800ac94:	4682      	mov	sl, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	4690      	mov	r8, r2
 800ac9a:	461f      	mov	r7, r3
 800ac9c:	d838      	bhi.n	800ad10 <__ssputs_r+0x84>
 800ac9e:	898a      	ldrh	r2, [r1, #12]
 800aca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aca4:	d032      	beq.n	800ad0c <__ssputs_r+0x80>
 800aca6:	6825      	ldr	r5, [r4, #0]
 800aca8:	6909      	ldr	r1, [r1, #16]
 800acaa:	eba5 0901 	sub.w	r9, r5, r1
 800acae:	6965      	ldr	r5, [r4, #20]
 800acb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acb8:	3301      	adds	r3, #1
 800acba:	444b      	add	r3, r9
 800acbc:	106d      	asrs	r5, r5, #1
 800acbe:	429d      	cmp	r5, r3
 800acc0:	bf38      	it	cc
 800acc2:	461d      	movcc	r5, r3
 800acc4:	0553      	lsls	r3, r2, #21
 800acc6:	d531      	bpl.n	800ad2c <__ssputs_r+0xa0>
 800acc8:	4629      	mov	r1, r5
 800acca:	f7ff ff6b 	bl	800aba4 <_malloc_r>
 800acce:	4606      	mov	r6, r0
 800acd0:	b950      	cbnz	r0, 800ace8 <__ssputs_r+0x5c>
 800acd2:	230c      	movs	r3, #12
 800acd4:	f8ca 3000 	str.w	r3, [sl]
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acde:	81a3      	strh	r3, [r4, #12]
 800ace0:	f04f 30ff 	mov.w	r0, #4294967295
 800ace4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace8:	6921      	ldr	r1, [r4, #16]
 800acea:	464a      	mov	r2, r9
 800acec:	f7ff fa08 	bl	800a100 <memcpy>
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acfa:	81a3      	strh	r3, [r4, #12]
 800acfc:	6126      	str	r6, [r4, #16]
 800acfe:	6165      	str	r5, [r4, #20]
 800ad00:	444e      	add	r6, r9
 800ad02:	eba5 0509 	sub.w	r5, r5, r9
 800ad06:	6026      	str	r6, [r4, #0]
 800ad08:	60a5      	str	r5, [r4, #8]
 800ad0a:	463e      	mov	r6, r7
 800ad0c:	42be      	cmp	r6, r7
 800ad0e:	d900      	bls.n	800ad12 <__ssputs_r+0x86>
 800ad10:	463e      	mov	r6, r7
 800ad12:	6820      	ldr	r0, [r4, #0]
 800ad14:	4632      	mov	r2, r6
 800ad16:	4641      	mov	r1, r8
 800ad18:	f000 f980 	bl	800b01c <memmove>
 800ad1c:	68a3      	ldr	r3, [r4, #8]
 800ad1e:	1b9b      	subs	r3, r3, r6
 800ad20:	60a3      	str	r3, [r4, #8]
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	4433      	add	r3, r6
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	2000      	movs	r0, #0
 800ad2a:	e7db      	b.n	800ace4 <__ssputs_r+0x58>
 800ad2c:	462a      	mov	r2, r5
 800ad2e:	f000 f99b 	bl	800b068 <_realloc_r>
 800ad32:	4606      	mov	r6, r0
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d1e1      	bne.n	800acfc <__ssputs_r+0x70>
 800ad38:	6921      	ldr	r1, [r4, #16]
 800ad3a:	4650      	mov	r0, sl
 800ad3c:	f7ff fec6 	bl	800aacc <_free_r>
 800ad40:	e7c7      	b.n	800acd2 <__ssputs_r+0x46>
	...

0800ad44 <_svfiprintf_r>:
 800ad44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad48:	4698      	mov	r8, r3
 800ad4a:	898b      	ldrh	r3, [r1, #12]
 800ad4c:	061b      	lsls	r3, r3, #24
 800ad4e:	b09d      	sub	sp, #116	; 0x74
 800ad50:	4607      	mov	r7, r0
 800ad52:	460d      	mov	r5, r1
 800ad54:	4614      	mov	r4, r2
 800ad56:	d50e      	bpl.n	800ad76 <_svfiprintf_r+0x32>
 800ad58:	690b      	ldr	r3, [r1, #16]
 800ad5a:	b963      	cbnz	r3, 800ad76 <_svfiprintf_r+0x32>
 800ad5c:	2140      	movs	r1, #64	; 0x40
 800ad5e:	f7ff ff21 	bl	800aba4 <_malloc_r>
 800ad62:	6028      	str	r0, [r5, #0]
 800ad64:	6128      	str	r0, [r5, #16]
 800ad66:	b920      	cbnz	r0, 800ad72 <_svfiprintf_r+0x2e>
 800ad68:	230c      	movs	r3, #12
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad70:	e0d1      	b.n	800af16 <_svfiprintf_r+0x1d2>
 800ad72:	2340      	movs	r3, #64	; 0x40
 800ad74:	616b      	str	r3, [r5, #20]
 800ad76:	2300      	movs	r3, #0
 800ad78:	9309      	str	r3, [sp, #36]	; 0x24
 800ad7a:	2320      	movs	r3, #32
 800ad7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad80:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad84:	2330      	movs	r3, #48	; 0x30
 800ad86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af30 <_svfiprintf_r+0x1ec>
 800ad8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad8e:	f04f 0901 	mov.w	r9, #1
 800ad92:	4623      	mov	r3, r4
 800ad94:	469a      	mov	sl, r3
 800ad96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad9a:	b10a      	cbz	r2, 800ada0 <_svfiprintf_r+0x5c>
 800ad9c:	2a25      	cmp	r2, #37	; 0x25
 800ad9e:	d1f9      	bne.n	800ad94 <_svfiprintf_r+0x50>
 800ada0:	ebba 0b04 	subs.w	fp, sl, r4
 800ada4:	d00b      	beq.n	800adbe <_svfiprintf_r+0x7a>
 800ada6:	465b      	mov	r3, fp
 800ada8:	4622      	mov	r2, r4
 800adaa:	4629      	mov	r1, r5
 800adac:	4638      	mov	r0, r7
 800adae:	f7ff ff6d 	bl	800ac8c <__ssputs_r>
 800adb2:	3001      	adds	r0, #1
 800adb4:	f000 80aa 	beq.w	800af0c <_svfiprintf_r+0x1c8>
 800adb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adba:	445a      	add	r2, fp
 800adbc:	9209      	str	r2, [sp, #36]	; 0x24
 800adbe:	f89a 3000 	ldrb.w	r3, [sl]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 80a2 	beq.w	800af0c <_svfiprintf_r+0x1c8>
 800adc8:	2300      	movs	r3, #0
 800adca:	f04f 32ff 	mov.w	r2, #4294967295
 800adce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800add2:	f10a 0a01 	add.w	sl, sl, #1
 800add6:	9304      	str	r3, [sp, #16]
 800add8:	9307      	str	r3, [sp, #28]
 800adda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adde:	931a      	str	r3, [sp, #104]	; 0x68
 800ade0:	4654      	mov	r4, sl
 800ade2:	2205      	movs	r2, #5
 800ade4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ade8:	4851      	ldr	r0, [pc, #324]	; (800af30 <_svfiprintf_r+0x1ec>)
 800adea:	f7f5 fa01 	bl	80001f0 <memchr>
 800adee:	9a04      	ldr	r2, [sp, #16]
 800adf0:	b9d8      	cbnz	r0, 800ae2a <_svfiprintf_r+0xe6>
 800adf2:	06d0      	lsls	r0, r2, #27
 800adf4:	bf44      	itt	mi
 800adf6:	2320      	movmi	r3, #32
 800adf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adfc:	0711      	lsls	r1, r2, #28
 800adfe:	bf44      	itt	mi
 800ae00:	232b      	movmi	r3, #43	; 0x2b
 800ae02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae06:	f89a 3000 	ldrb.w	r3, [sl]
 800ae0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae0c:	d015      	beq.n	800ae3a <_svfiprintf_r+0xf6>
 800ae0e:	9a07      	ldr	r2, [sp, #28]
 800ae10:	4654      	mov	r4, sl
 800ae12:	2000      	movs	r0, #0
 800ae14:	f04f 0c0a 	mov.w	ip, #10
 800ae18:	4621      	mov	r1, r4
 800ae1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae1e:	3b30      	subs	r3, #48	; 0x30
 800ae20:	2b09      	cmp	r3, #9
 800ae22:	d94e      	bls.n	800aec2 <_svfiprintf_r+0x17e>
 800ae24:	b1b0      	cbz	r0, 800ae54 <_svfiprintf_r+0x110>
 800ae26:	9207      	str	r2, [sp, #28]
 800ae28:	e014      	b.n	800ae54 <_svfiprintf_r+0x110>
 800ae2a:	eba0 0308 	sub.w	r3, r0, r8
 800ae2e:	fa09 f303 	lsl.w	r3, r9, r3
 800ae32:	4313      	orrs	r3, r2
 800ae34:	9304      	str	r3, [sp, #16]
 800ae36:	46a2      	mov	sl, r4
 800ae38:	e7d2      	b.n	800ade0 <_svfiprintf_r+0x9c>
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	1d19      	adds	r1, r3, #4
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	9103      	str	r1, [sp, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	bfbb      	ittet	lt
 800ae46:	425b      	neglt	r3, r3
 800ae48:	f042 0202 	orrlt.w	r2, r2, #2
 800ae4c:	9307      	strge	r3, [sp, #28]
 800ae4e:	9307      	strlt	r3, [sp, #28]
 800ae50:	bfb8      	it	lt
 800ae52:	9204      	strlt	r2, [sp, #16]
 800ae54:	7823      	ldrb	r3, [r4, #0]
 800ae56:	2b2e      	cmp	r3, #46	; 0x2e
 800ae58:	d10c      	bne.n	800ae74 <_svfiprintf_r+0x130>
 800ae5a:	7863      	ldrb	r3, [r4, #1]
 800ae5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae5e:	d135      	bne.n	800aecc <_svfiprintf_r+0x188>
 800ae60:	9b03      	ldr	r3, [sp, #12]
 800ae62:	1d1a      	adds	r2, r3, #4
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	9203      	str	r2, [sp, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	bfb8      	it	lt
 800ae6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae70:	3402      	adds	r4, #2
 800ae72:	9305      	str	r3, [sp, #20]
 800ae74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af40 <_svfiprintf_r+0x1fc>
 800ae78:	7821      	ldrb	r1, [r4, #0]
 800ae7a:	2203      	movs	r2, #3
 800ae7c:	4650      	mov	r0, sl
 800ae7e:	f7f5 f9b7 	bl	80001f0 <memchr>
 800ae82:	b140      	cbz	r0, 800ae96 <_svfiprintf_r+0x152>
 800ae84:	2340      	movs	r3, #64	; 0x40
 800ae86:	eba0 000a 	sub.w	r0, r0, sl
 800ae8a:	fa03 f000 	lsl.w	r0, r3, r0
 800ae8e:	9b04      	ldr	r3, [sp, #16]
 800ae90:	4303      	orrs	r3, r0
 800ae92:	3401      	adds	r4, #1
 800ae94:	9304      	str	r3, [sp, #16]
 800ae96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae9a:	4826      	ldr	r0, [pc, #152]	; (800af34 <_svfiprintf_r+0x1f0>)
 800ae9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aea0:	2206      	movs	r2, #6
 800aea2:	f7f5 f9a5 	bl	80001f0 <memchr>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d038      	beq.n	800af1c <_svfiprintf_r+0x1d8>
 800aeaa:	4b23      	ldr	r3, [pc, #140]	; (800af38 <_svfiprintf_r+0x1f4>)
 800aeac:	bb1b      	cbnz	r3, 800aef6 <_svfiprintf_r+0x1b2>
 800aeae:	9b03      	ldr	r3, [sp, #12]
 800aeb0:	3307      	adds	r3, #7
 800aeb2:	f023 0307 	bic.w	r3, r3, #7
 800aeb6:	3308      	adds	r3, #8
 800aeb8:	9303      	str	r3, [sp, #12]
 800aeba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aebc:	4433      	add	r3, r6
 800aebe:	9309      	str	r3, [sp, #36]	; 0x24
 800aec0:	e767      	b.n	800ad92 <_svfiprintf_r+0x4e>
 800aec2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aec6:	460c      	mov	r4, r1
 800aec8:	2001      	movs	r0, #1
 800aeca:	e7a5      	b.n	800ae18 <_svfiprintf_r+0xd4>
 800aecc:	2300      	movs	r3, #0
 800aece:	3401      	adds	r4, #1
 800aed0:	9305      	str	r3, [sp, #20]
 800aed2:	4619      	mov	r1, r3
 800aed4:	f04f 0c0a 	mov.w	ip, #10
 800aed8:	4620      	mov	r0, r4
 800aeda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aede:	3a30      	subs	r2, #48	; 0x30
 800aee0:	2a09      	cmp	r2, #9
 800aee2:	d903      	bls.n	800aeec <_svfiprintf_r+0x1a8>
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d0c5      	beq.n	800ae74 <_svfiprintf_r+0x130>
 800aee8:	9105      	str	r1, [sp, #20]
 800aeea:	e7c3      	b.n	800ae74 <_svfiprintf_r+0x130>
 800aeec:	fb0c 2101 	mla	r1, ip, r1, r2
 800aef0:	4604      	mov	r4, r0
 800aef2:	2301      	movs	r3, #1
 800aef4:	e7f0      	b.n	800aed8 <_svfiprintf_r+0x194>
 800aef6:	ab03      	add	r3, sp, #12
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	462a      	mov	r2, r5
 800aefc:	4b0f      	ldr	r3, [pc, #60]	; (800af3c <_svfiprintf_r+0x1f8>)
 800aefe:	a904      	add	r1, sp, #16
 800af00:	4638      	mov	r0, r7
 800af02:	f7fc fa47 	bl	8007394 <_printf_float>
 800af06:	1c42      	adds	r2, r0, #1
 800af08:	4606      	mov	r6, r0
 800af0a:	d1d6      	bne.n	800aeba <_svfiprintf_r+0x176>
 800af0c:	89ab      	ldrh	r3, [r5, #12]
 800af0e:	065b      	lsls	r3, r3, #25
 800af10:	f53f af2c 	bmi.w	800ad6c <_svfiprintf_r+0x28>
 800af14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af16:	b01d      	add	sp, #116	; 0x74
 800af18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1c:	ab03      	add	r3, sp, #12
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	462a      	mov	r2, r5
 800af22:	4b06      	ldr	r3, [pc, #24]	; (800af3c <_svfiprintf_r+0x1f8>)
 800af24:	a904      	add	r1, sp, #16
 800af26:	4638      	mov	r0, r7
 800af28:	f7fc fcd8 	bl	80078dc <_printf_i>
 800af2c:	e7eb      	b.n	800af06 <_svfiprintf_r+0x1c2>
 800af2e:	bf00      	nop
 800af30:	0800bf9c 	.word	0x0800bf9c
 800af34:	0800bfa6 	.word	0x0800bfa6
 800af38:	08007395 	.word	0x08007395
 800af3c:	0800ac8d 	.word	0x0800ac8d
 800af40:	0800bfa2 	.word	0x0800bfa2
 800af44:	00000000 	.word	0x00000000

0800af48 <nan>:
 800af48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800af50 <nan+0x8>
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	00000000 	.word	0x00000000
 800af54:	7ff80000 	.word	0x7ff80000

0800af58 <_sbrk_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4d06      	ldr	r5, [pc, #24]	; (800af74 <_sbrk_r+0x1c>)
 800af5c:	2300      	movs	r3, #0
 800af5e:	4604      	mov	r4, r0
 800af60:	4608      	mov	r0, r1
 800af62:	602b      	str	r3, [r5, #0]
 800af64:	f7f7 f96a 	bl	800223c <_sbrk>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d102      	bne.n	800af72 <_sbrk_r+0x1a>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	b103      	cbz	r3, 800af72 <_sbrk_r+0x1a>
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	20000488 	.word	0x20000488

0800af78 <strncmp>:
 800af78:	b510      	push	{r4, lr}
 800af7a:	b17a      	cbz	r2, 800af9c <strncmp+0x24>
 800af7c:	4603      	mov	r3, r0
 800af7e:	3901      	subs	r1, #1
 800af80:	1884      	adds	r4, r0, r2
 800af82:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af8a:	4290      	cmp	r0, r2
 800af8c:	d101      	bne.n	800af92 <strncmp+0x1a>
 800af8e:	42a3      	cmp	r3, r4
 800af90:	d101      	bne.n	800af96 <strncmp+0x1e>
 800af92:	1a80      	subs	r0, r0, r2
 800af94:	bd10      	pop	{r4, pc}
 800af96:	2800      	cmp	r0, #0
 800af98:	d1f3      	bne.n	800af82 <strncmp+0xa>
 800af9a:	e7fa      	b.n	800af92 <strncmp+0x1a>
 800af9c:	4610      	mov	r0, r2
 800af9e:	e7f9      	b.n	800af94 <strncmp+0x1c>

0800afa0 <__ascii_wctomb>:
 800afa0:	b149      	cbz	r1, 800afb6 <__ascii_wctomb+0x16>
 800afa2:	2aff      	cmp	r2, #255	; 0xff
 800afa4:	bf85      	ittet	hi
 800afa6:	238a      	movhi	r3, #138	; 0x8a
 800afa8:	6003      	strhi	r3, [r0, #0]
 800afaa:	700a      	strbls	r2, [r1, #0]
 800afac:	f04f 30ff 	movhi.w	r0, #4294967295
 800afb0:	bf98      	it	ls
 800afb2:	2001      	movls	r0, #1
 800afb4:	4770      	bx	lr
 800afb6:	4608      	mov	r0, r1
 800afb8:	4770      	bx	lr
	...

0800afbc <__assert_func>:
 800afbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afbe:	4614      	mov	r4, r2
 800afc0:	461a      	mov	r2, r3
 800afc2:	4b09      	ldr	r3, [pc, #36]	; (800afe8 <__assert_func+0x2c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4605      	mov	r5, r0
 800afc8:	68d8      	ldr	r0, [r3, #12]
 800afca:	b14c      	cbz	r4, 800afe0 <__assert_func+0x24>
 800afcc:	4b07      	ldr	r3, [pc, #28]	; (800afec <__assert_func+0x30>)
 800afce:	9100      	str	r1, [sp, #0]
 800afd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afd4:	4906      	ldr	r1, [pc, #24]	; (800aff0 <__assert_func+0x34>)
 800afd6:	462b      	mov	r3, r5
 800afd8:	f000 f80e 	bl	800aff8 <fiprintf>
 800afdc:	f000 fa8c 	bl	800b4f8 <abort>
 800afe0:	4b04      	ldr	r3, [pc, #16]	; (800aff4 <__assert_func+0x38>)
 800afe2:	461c      	mov	r4, r3
 800afe4:	e7f3      	b.n	800afce <__assert_func+0x12>
 800afe6:	bf00      	nop
 800afe8:	20000014 	.word	0x20000014
 800afec:	0800bfad 	.word	0x0800bfad
 800aff0:	0800bfba 	.word	0x0800bfba
 800aff4:	0800bfe8 	.word	0x0800bfe8

0800aff8 <fiprintf>:
 800aff8:	b40e      	push	{r1, r2, r3}
 800affa:	b503      	push	{r0, r1, lr}
 800affc:	4601      	mov	r1, r0
 800affe:	ab03      	add	r3, sp, #12
 800b000:	4805      	ldr	r0, [pc, #20]	; (800b018 <fiprintf+0x20>)
 800b002:	f853 2b04 	ldr.w	r2, [r3], #4
 800b006:	6800      	ldr	r0, [r0, #0]
 800b008:	9301      	str	r3, [sp, #4]
 800b00a:	f000 f885 	bl	800b118 <_vfiprintf_r>
 800b00e:	b002      	add	sp, #8
 800b010:	f85d eb04 	ldr.w	lr, [sp], #4
 800b014:	b003      	add	sp, #12
 800b016:	4770      	bx	lr
 800b018:	20000014 	.word	0x20000014

0800b01c <memmove>:
 800b01c:	4288      	cmp	r0, r1
 800b01e:	b510      	push	{r4, lr}
 800b020:	eb01 0402 	add.w	r4, r1, r2
 800b024:	d902      	bls.n	800b02c <memmove+0x10>
 800b026:	4284      	cmp	r4, r0
 800b028:	4623      	mov	r3, r4
 800b02a:	d807      	bhi.n	800b03c <memmove+0x20>
 800b02c:	1e43      	subs	r3, r0, #1
 800b02e:	42a1      	cmp	r1, r4
 800b030:	d008      	beq.n	800b044 <memmove+0x28>
 800b032:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b036:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b03a:	e7f8      	b.n	800b02e <memmove+0x12>
 800b03c:	4402      	add	r2, r0
 800b03e:	4601      	mov	r1, r0
 800b040:	428a      	cmp	r2, r1
 800b042:	d100      	bne.n	800b046 <memmove+0x2a>
 800b044:	bd10      	pop	{r4, pc}
 800b046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b04a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b04e:	e7f7      	b.n	800b040 <memmove+0x24>

0800b050 <__malloc_lock>:
 800b050:	4801      	ldr	r0, [pc, #4]	; (800b058 <__malloc_lock+0x8>)
 800b052:	f000 bc11 	b.w	800b878 <__retarget_lock_acquire_recursive>
 800b056:	bf00      	nop
 800b058:	2000048c 	.word	0x2000048c

0800b05c <__malloc_unlock>:
 800b05c:	4801      	ldr	r0, [pc, #4]	; (800b064 <__malloc_unlock+0x8>)
 800b05e:	f000 bc0c 	b.w	800b87a <__retarget_lock_release_recursive>
 800b062:	bf00      	nop
 800b064:	2000048c 	.word	0x2000048c

0800b068 <_realloc_r>:
 800b068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b06c:	4680      	mov	r8, r0
 800b06e:	4614      	mov	r4, r2
 800b070:	460e      	mov	r6, r1
 800b072:	b921      	cbnz	r1, 800b07e <_realloc_r+0x16>
 800b074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b078:	4611      	mov	r1, r2
 800b07a:	f7ff bd93 	b.w	800aba4 <_malloc_r>
 800b07e:	b92a      	cbnz	r2, 800b08c <_realloc_r+0x24>
 800b080:	f7ff fd24 	bl	800aacc <_free_r>
 800b084:	4625      	mov	r5, r4
 800b086:	4628      	mov	r0, r5
 800b088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b08c:	f000 fc5c 	bl	800b948 <_malloc_usable_size_r>
 800b090:	4284      	cmp	r4, r0
 800b092:	4607      	mov	r7, r0
 800b094:	d802      	bhi.n	800b09c <_realloc_r+0x34>
 800b096:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b09a:	d812      	bhi.n	800b0c2 <_realloc_r+0x5a>
 800b09c:	4621      	mov	r1, r4
 800b09e:	4640      	mov	r0, r8
 800b0a0:	f7ff fd80 	bl	800aba4 <_malloc_r>
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d0ed      	beq.n	800b086 <_realloc_r+0x1e>
 800b0aa:	42bc      	cmp	r4, r7
 800b0ac:	4622      	mov	r2, r4
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	bf28      	it	cs
 800b0b2:	463a      	movcs	r2, r7
 800b0b4:	f7ff f824 	bl	800a100 <memcpy>
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	f7ff fd06 	bl	800aacc <_free_r>
 800b0c0:	e7e1      	b.n	800b086 <_realloc_r+0x1e>
 800b0c2:	4635      	mov	r5, r6
 800b0c4:	e7df      	b.n	800b086 <_realloc_r+0x1e>

0800b0c6 <__sfputc_r>:
 800b0c6:	6893      	ldr	r3, [r2, #8]
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	b410      	push	{r4}
 800b0ce:	6093      	str	r3, [r2, #8]
 800b0d0:	da08      	bge.n	800b0e4 <__sfputc_r+0x1e>
 800b0d2:	6994      	ldr	r4, [r2, #24]
 800b0d4:	42a3      	cmp	r3, r4
 800b0d6:	db01      	blt.n	800b0dc <__sfputc_r+0x16>
 800b0d8:	290a      	cmp	r1, #10
 800b0da:	d103      	bne.n	800b0e4 <__sfputc_r+0x1e>
 800b0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0e0:	f000 b94a 	b.w	800b378 <__swbuf_r>
 800b0e4:	6813      	ldr	r3, [r2, #0]
 800b0e6:	1c58      	adds	r0, r3, #1
 800b0e8:	6010      	str	r0, [r2, #0]
 800b0ea:	7019      	strb	r1, [r3, #0]
 800b0ec:	4608      	mov	r0, r1
 800b0ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <__sfputs_r>:
 800b0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	460f      	mov	r7, r1
 800b0fa:	4614      	mov	r4, r2
 800b0fc:	18d5      	adds	r5, r2, r3
 800b0fe:	42ac      	cmp	r4, r5
 800b100:	d101      	bne.n	800b106 <__sfputs_r+0x12>
 800b102:	2000      	movs	r0, #0
 800b104:	e007      	b.n	800b116 <__sfputs_r+0x22>
 800b106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b10a:	463a      	mov	r2, r7
 800b10c:	4630      	mov	r0, r6
 800b10e:	f7ff ffda 	bl	800b0c6 <__sfputc_r>
 800b112:	1c43      	adds	r3, r0, #1
 800b114:	d1f3      	bne.n	800b0fe <__sfputs_r+0xa>
 800b116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b118 <_vfiprintf_r>:
 800b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11c:	460d      	mov	r5, r1
 800b11e:	b09d      	sub	sp, #116	; 0x74
 800b120:	4614      	mov	r4, r2
 800b122:	4698      	mov	r8, r3
 800b124:	4606      	mov	r6, r0
 800b126:	b118      	cbz	r0, 800b130 <_vfiprintf_r+0x18>
 800b128:	6983      	ldr	r3, [r0, #24]
 800b12a:	b90b      	cbnz	r3, 800b130 <_vfiprintf_r+0x18>
 800b12c:	f000 fb06 	bl	800b73c <__sinit>
 800b130:	4b89      	ldr	r3, [pc, #548]	; (800b358 <_vfiprintf_r+0x240>)
 800b132:	429d      	cmp	r5, r3
 800b134:	d11b      	bne.n	800b16e <_vfiprintf_r+0x56>
 800b136:	6875      	ldr	r5, [r6, #4]
 800b138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b13a:	07d9      	lsls	r1, r3, #31
 800b13c:	d405      	bmi.n	800b14a <_vfiprintf_r+0x32>
 800b13e:	89ab      	ldrh	r3, [r5, #12]
 800b140:	059a      	lsls	r2, r3, #22
 800b142:	d402      	bmi.n	800b14a <_vfiprintf_r+0x32>
 800b144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b146:	f000 fb97 	bl	800b878 <__retarget_lock_acquire_recursive>
 800b14a:	89ab      	ldrh	r3, [r5, #12]
 800b14c:	071b      	lsls	r3, r3, #28
 800b14e:	d501      	bpl.n	800b154 <_vfiprintf_r+0x3c>
 800b150:	692b      	ldr	r3, [r5, #16]
 800b152:	b9eb      	cbnz	r3, 800b190 <_vfiprintf_r+0x78>
 800b154:	4629      	mov	r1, r5
 800b156:	4630      	mov	r0, r6
 800b158:	f000 f960 	bl	800b41c <__swsetup_r>
 800b15c:	b1c0      	cbz	r0, 800b190 <_vfiprintf_r+0x78>
 800b15e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b160:	07dc      	lsls	r4, r3, #31
 800b162:	d50e      	bpl.n	800b182 <_vfiprintf_r+0x6a>
 800b164:	f04f 30ff 	mov.w	r0, #4294967295
 800b168:	b01d      	add	sp, #116	; 0x74
 800b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16e:	4b7b      	ldr	r3, [pc, #492]	; (800b35c <_vfiprintf_r+0x244>)
 800b170:	429d      	cmp	r5, r3
 800b172:	d101      	bne.n	800b178 <_vfiprintf_r+0x60>
 800b174:	68b5      	ldr	r5, [r6, #8]
 800b176:	e7df      	b.n	800b138 <_vfiprintf_r+0x20>
 800b178:	4b79      	ldr	r3, [pc, #484]	; (800b360 <_vfiprintf_r+0x248>)
 800b17a:	429d      	cmp	r5, r3
 800b17c:	bf08      	it	eq
 800b17e:	68f5      	ldreq	r5, [r6, #12]
 800b180:	e7da      	b.n	800b138 <_vfiprintf_r+0x20>
 800b182:	89ab      	ldrh	r3, [r5, #12]
 800b184:	0598      	lsls	r0, r3, #22
 800b186:	d4ed      	bmi.n	800b164 <_vfiprintf_r+0x4c>
 800b188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b18a:	f000 fb76 	bl	800b87a <__retarget_lock_release_recursive>
 800b18e:	e7e9      	b.n	800b164 <_vfiprintf_r+0x4c>
 800b190:	2300      	movs	r3, #0
 800b192:	9309      	str	r3, [sp, #36]	; 0x24
 800b194:	2320      	movs	r3, #32
 800b196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b19a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b19e:	2330      	movs	r3, #48	; 0x30
 800b1a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b364 <_vfiprintf_r+0x24c>
 800b1a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1a8:	f04f 0901 	mov.w	r9, #1
 800b1ac:	4623      	mov	r3, r4
 800b1ae:	469a      	mov	sl, r3
 800b1b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1b4:	b10a      	cbz	r2, 800b1ba <_vfiprintf_r+0xa2>
 800b1b6:	2a25      	cmp	r2, #37	; 0x25
 800b1b8:	d1f9      	bne.n	800b1ae <_vfiprintf_r+0x96>
 800b1ba:	ebba 0b04 	subs.w	fp, sl, r4
 800b1be:	d00b      	beq.n	800b1d8 <_vfiprintf_r+0xc0>
 800b1c0:	465b      	mov	r3, fp
 800b1c2:	4622      	mov	r2, r4
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f7ff ff94 	bl	800b0f4 <__sfputs_r>
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	f000 80aa 	beq.w	800b326 <_vfiprintf_r+0x20e>
 800b1d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1d4:	445a      	add	r2, fp
 800b1d6:	9209      	str	r2, [sp, #36]	; 0x24
 800b1d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f000 80a2 	beq.w	800b326 <_vfiprintf_r+0x20e>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1ec:	f10a 0a01 	add.w	sl, sl, #1
 800b1f0:	9304      	str	r3, [sp, #16]
 800b1f2:	9307      	str	r3, [sp, #28]
 800b1f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1f8:	931a      	str	r3, [sp, #104]	; 0x68
 800b1fa:	4654      	mov	r4, sl
 800b1fc:	2205      	movs	r2, #5
 800b1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b202:	4858      	ldr	r0, [pc, #352]	; (800b364 <_vfiprintf_r+0x24c>)
 800b204:	f7f4 fff4 	bl	80001f0 <memchr>
 800b208:	9a04      	ldr	r2, [sp, #16]
 800b20a:	b9d8      	cbnz	r0, 800b244 <_vfiprintf_r+0x12c>
 800b20c:	06d1      	lsls	r1, r2, #27
 800b20e:	bf44      	itt	mi
 800b210:	2320      	movmi	r3, #32
 800b212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b216:	0713      	lsls	r3, r2, #28
 800b218:	bf44      	itt	mi
 800b21a:	232b      	movmi	r3, #43	; 0x2b
 800b21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b220:	f89a 3000 	ldrb.w	r3, [sl]
 800b224:	2b2a      	cmp	r3, #42	; 0x2a
 800b226:	d015      	beq.n	800b254 <_vfiprintf_r+0x13c>
 800b228:	9a07      	ldr	r2, [sp, #28]
 800b22a:	4654      	mov	r4, sl
 800b22c:	2000      	movs	r0, #0
 800b22e:	f04f 0c0a 	mov.w	ip, #10
 800b232:	4621      	mov	r1, r4
 800b234:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b238:	3b30      	subs	r3, #48	; 0x30
 800b23a:	2b09      	cmp	r3, #9
 800b23c:	d94e      	bls.n	800b2dc <_vfiprintf_r+0x1c4>
 800b23e:	b1b0      	cbz	r0, 800b26e <_vfiprintf_r+0x156>
 800b240:	9207      	str	r2, [sp, #28]
 800b242:	e014      	b.n	800b26e <_vfiprintf_r+0x156>
 800b244:	eba0 0308 	sub.w	r3, r0, r8
 800b248:	fa09 f303 	lsl.w	r3, r9, r3
 800b24c:	4313      	orrs	r3, r2
 800b24e:	9304      	str	r3, [sp, #16]
 800b250:	46a2      	mov	sl, r4
 800b252:	e7d2      	b.n	800b1fa <_vfiprintf_r+0xe2>
 800b254:	9b03      	ldr	r3, [sp, #12]
 800b256:	1d19      	adds	r1, r3, #4
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	9103      	str	r1, [sp, #12]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	bfbb      	ittet	lt
 800b260:	425b      	neglt	r3, r3
 800b262:	f042 0202 	orrlt.w	r2, r2, #2
 800b266:	9307      	strge	r3, [sp, #28]
 800b268:	9307      	strlt	r3, [sp, #28]
 800b26a:	bfb8      	it	lt
 800b26c:	9204      	strlt	r2, [sp, #16]
 800b26e:	7823      	ldrb	r3, [r4, #0]
 800b270:	2b2e      	cmp	r3, #46	; 0x2e
 800b272:	d10c      	bne.n	800b28e <_vfiprintf_r+0x176>
 800b274:	7863      	ldrb	r3, [r4, #1]
 800b276:	2b2a      	cmp	r3, #42	; 0x2a
 800b278:	d135      	bne.n	800b2e6 <_vfiprintf_r+0x1ce>
 800b27a:	9b03      	ldr	r3, [sp, #12]
 800b27c:	1d1a      	adds	r2, r3, #4
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	9203      	str	r2, [sp, #12]
 800b282:	2b00      	cmp	r3, #0
 800b284:	bfb8      	it	lt
 800b286:	f04f 33ff 	movlt.w	r3, #4294967295
 800b28a:	3402      	adds	r4, #2
 800b28c:	9305      	str	r3, [sp, #20]
 800b28e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b374 <_vfiprintf_r+0x25c>
 800b292:	7821      	ldrb	r1, [r4, #0]
 800b294:	2203      	movs	r2, #3
 800b296:	4650      	mov	r0, sl
 800b298:	f7f4 ffaa 	bl	80001f0 <memchr>
 800b29c:	b140      	cbz	r0, 800b2b0 <_vfiprintf_r+0x198>
 800b29e:	2340      	movs	r3, #64	; 0x40
 800b2a0:	eba0 000a 	sub.w	r0, r0, sl
 800b2a4:	fa03 f000 	lsl.w	r0, r3, r0
 800b2a8:	9b04      	ldr	r3, [sp, #16]
 800b2aa:	4303      	orrs	r3, r0
 800b2ac:	3401      	adds	r4, #1
 800b2ae:	9304      	str	r3, [sp, #16]
 800b2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2b4:	482c      	ldr	r0, [pc, #176]	; (800b368 <_vfiprintf_r+0x250>)
 800b2b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2ba:	2206      	movs	r2, #6
 800b2bc:	f7f4 ff98 	bl	80001f0 <memchr>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d03f      	beq.n	800b344 <_vfiprintf_r+0x22c>
 800b2c4:	4b29      	ldr	r3, [pc, #164]	; (800b36c <_vfiprintf_r+0x254>)
 800b2c6:	bb1b      	cbnz	r3, 800b310 <_vfiprintf_r+0x1f8>
 800b2c8:	9b03      	ldr	r3, [sp, #12]
 800b2ca:	3307      	adds	r3, #7
 800b2cc:	f023 0307 	bic.w	r3, r3, #7
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	9303      	str	r3, [sp, #12]
 800b2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d6:	443b      	add	r3, r7
 800b2d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2da:	e767      	b.n	800b1ac <_vfiprintf_r+0x94>
 800b2dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2e0:	460c      	mov	r4, r1
 800b2e2:	2001      	movs	r0, #1
 800b2e4:	e7a5      	b.n	800b232 <_vfiprintf_r+0x11a>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	3401      	adds	r4, #1
 800b2ea:	9305      	str	r3, [sp, #20]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	f04f 0c0a 	mov.w	ip, #10
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2f8:	3a30      	subs	r2, #48	; 0x30
 800b2fa:	2a09      	cmp	r2, #9
 800b2fc:	d903      	bls.n	800b306 <_vfiprintf_r+0x1ee>
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d0c5      	beq.n	800b28e <_vfiprintf_r+0x176>
 800b302:	9105      	str	r1, [sp, #20]
 800b304:	e7c3      	b.n	800b28e <_vfiprintf_r+0x176>
 800b306:	fb0c 2101 	mla	r1, ip, r1, r2
 800b30a:	4604      	mov	r4, r0
 800b30c:	2301      	movs	r3, #1
 800b30e:	e7f0      	b.n	800b2f2 <_vfiprintf_r+0x1da>
 800b310:	ab03      	add	r3, sp, #12
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	462a      	mov	r2, r5
 800b316:	4b16      	ldr	r3, [pc, #88]	; (800b370 <_vfiprintf_r+0x258>)
 800b318:	a904      	add	r1, sp, #16
 800b31a:	4630      	mov	r0, r6
 800b31c:	f7fc f83a 	bl	8007394 <_printf_float>
 800b320:	4607      	mov	r7, r0
 800b322:	1c78      	adds	r0, r7, #1
 800b324:	d1d6      	bne.n	800b2d4 <_vfiprintf_r+0x1bc>
 800b326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b328:	07d9      	lsls	r1, r3, #31
 800b32a:	d405      	bmi.n	800b338 <_vfiprintf_r+0x220>
 800b32c:	89ab      	ldrh	r3, [r5, #12]
 800b32e:	059a      	lsls	r2, r3, #22
 800b330:	d402      	bmi.n	800b338 <_vfiprintf_r+0x220>
 800b332:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b334:	f000 faa1 	bl	800b87a <__retarget_lock_release_recursive>
 800b338:	89ab      	ldrh	r3, [r5, #12]
 800b33a:	065b      	lsls	r3, r3, #25
 800b33c:	f53f af12 	bmi.w	800b164 <_vfiprintf_r+0x4c>
 800b340:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b342:	e711      	b.n	800b168 <_vfiprintf_r+0x50>
 800b344:	ab03      	add	r3, sp, #12
 800b346:	9300      	str	r3, [sp, #0]
 800b348:	462a      	mov	r2, r5
 800b34a:	4b09      	ldr	r3, [pc, #36]	; (800b370 <_vfiprintf_r+0x258>)
 800b34c:	a904      	add	r1, sp, #16
 800b34e:	4630      	mov	r0, r6
 800b350:	f7fc fac4 	bl	80078dc <_printf_i>
 800b354:	e7e4      	b.n	800b320 <_vfiprintf_r+0x208>
 800b356:	bf00      	nop
 800b358:	0800c00c 	.word	0x0800c00c
 800b35c:	0800c02c 	.word	0x0800c02c
 800b360:	0800bfec 	.word	0x0800bfec
 800b364:	0800bf9c 	.word	0x0800bf9c
 800b368:	0800bfa6 	.word	0x0800bfa6
 800b36c:	08007395 	.word	0x08007395
 800b370:	0800b0f5 	.word	0x0800b0f5
 800b374:	0800bfa2 	.word	0x0800bfa2

0800b378 <__swbuf_r>:
 800b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37a:	460e      	mov	r6, r1
 800b37c:	4614      	mov	r4, r2
 800b37e:	4605      	mov	r5, r0
 800b380:	b118      	cbz	r0, 800b38a <__swbuf_r+0x12>
 800b382:	6983      	ldr	r3, [r0, #24]
 800b384:	b90b      	cbnz	r3, 800b38a <__swbuf_r+0x12>
 800b386:	f000 f9d9 	bl	800b73c <__sinit>
 800b38a:	4b21      	ldr	r3, [pc, #132]	; (800b410 <__swbuf_r+0x98>)
 800b38c:	429c      	cmp	r4, r3
 800b38e:	d12b      	bne.n	800b3e8 <__swbuf_r+0x70>
 800b390:	686c      	ldr	r4, [r5, #4]
 800b392:	69a3      	ldr	r3, [r4, #24]
 800b394:	60a3      	str	r3, [r4, #8]
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	071a      	lsls	r2, r3, #28
 800b39a:	d52f      	bpl.n	800b3fc <__swbuf_r+0x84>
 800b39c:	6923      	ldr	r3, [r4, #16]
 800b39e:	b36b      	cbz	r3, 800b3fc <__swbuf_r+0x84>
 800b3a0:	6923      	ldr	r3, [r4, #16]
 800b3a2:	6820      	ldr	r0, [r4, #0]
 800b3a4:	1ac0      	subs	r0, r0, r3
 800b3a6:	6963      	ldr	r3, [r4, #20]
 800b3a8:	b2f6      	uxtb	r6, r6
 800b3aa:	4283      	cmp	r3, r0
 800b3ac:	4637      	mov	r7, r6
 800b3ae:	dc04      	bgt.n	800b3ba <__swbuf_r+0x42>
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f000 f92e 	bl	800b614 <_fflush_r>
 800b3b8:	bb30      	cbnz	r0, 800b408 <__swbuf_r+0x90>
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	60a3      	str	r3, [r4, #8]
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	1c5a      	adds	r2, r3, #1
 800b3c4:	6022      	str	r2, [r4, #0]
 800b3c6:	701e      	strb	r6, [r3, #0]
 800b3c8:	6963      	ldr	r3, [r4, #20]
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	4283      	cmp	r3, r0
 800b3ce:	d004      	beq.n	800b3da <__swbuf_r+0x62>
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	07db      	lsls	r3, r3, #31
 800b3d4:	d506      	bpl.n	800b3e4 <__swbuf_r+0x6c>
 800b3d6:	2e0a      	cmp	r6, #10
 800b3d8:	d104      	bne.n	800b3e4 <__swbuf_r+0x6c>
 800b3da:	4621      	mov	r1, r4
 800b3dc:	4628      	mov	r0, r5
 800b3de:	f000 f919 	bl	800b614 <_fflush_r>
 800b3e2:	b988      	cbnz	r0, 800b408 <__swbuf_r+0x90>
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e8:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <__swbuf_r+0x9c>)
 800b3ea:	429c      	cmp	r4, r3
 800b3ec:	d101      	bne.n	800b3f2 <__swbuf_r+0x7a>
 800b3ee:	68ac      	ldr	r4, [r5, #8]
 800b3f0:	e7cf      	b.n	800b392 <__swbuf_r+0x1a>
 800b3f2:	4b09      	ldr	r3, [pc, #36]	; (800b418 <__swbuf_r+0xa0>)
 800b3f4:	429c      	cmp	r4, r3
 800b3f6:	bf08      	it	eq
 800b3f8:	68ec      	ldreq	r4, [r5, #12]
 800b3fa:	e7ca      	b.n	800b392 <__swbuf_r+0x1a>
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	4628      	mov	r0, r5
 800b400:	f000 f80c 	bl	800b41c <__swsetup_r>
 800b404:	2800      	cmp	r0, #0
 800b406:	d0cb      	beq.n	800b3a0 <__swbuf_r+0x28>
 800b408:	f04f 37ff 	mov.w	r7, #4294967295
 800b40c:	e7ea      	b.n	800b3e4 <__swbuf_r+0x6c>
 800b40e:	bf00      	nop
 800b410:	0800c00c 	.word	0x0800c00c
 800b414:	0800c02c 	.word	0x0800c02c
 800b418:	0800bfec 	.word	0x0800bfec

0800b41c <__swsetup_r>:
 800b41c:	4b32      	ldr	r3, [pc, #200]	; (800b4e8 <__swsetup_r+0xcc>)
 800b41e:	b570      	push	{r4, r5, r6, lr}
 800b420:	681d      	ldr	r5, [r3, #0]
 800b422:	4606      	mov	r6, r0
 800b424:	460c      	mov	r4, r1
 800b426:	b125      	cbz	r5, 800b432 <__swsetup_r+0x16>
 800b428:	69ab      	ldr	r3, [r5, #24]
 800b42a:	b913      	cbnz	r3, 800b432 <__swsetup_r+0x16>
 800b42c:	4628      	mov	r0, r5
 800b42e:	f000 f985 	bl	800b73c <__sinit>
 800b432:	4b2e      	ldr	r3, [pc, #184]	; (800b4ec <__swsetup_r+0xd0>)
 800b434:	429c      	cmp	r4, r3
 800b436:	d10f      	bne.n	800b458 <__swsetup_r+0x3c>
 800b438:	686c      	ldr	r4, [r5, #4]
 800b43a:	89a3      	ldrh	r3, [r4, #12]
 800b43c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b440:	0719      	lsls	r1, r3, #28
 800b442:	d42c      	bmi.n	800b49e <__swsetup_r+0x82>
 800b444:	06dd      	lsls	r5, r3, #27
 800b446:	d411      	bmi.n	800b46c <__swsetup_r+0x50>
 800b448:	2309      	movs	r3, #9
 800b44a:	6033      	str	r3, [r6, #0]
 800b44c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b450:	81a3      	strh	r3, [r4, #12]
 800b452:	f04f 30ff 	mov.w	r0, #4294967295
 800b456:	e03e      	b.n	800b4d6 <__swsetup_r+0xba>
 800b458:	4b25      	ldr	r3, [pc, #148]	; (800b4f0 <__swsetup_r+0xd4>)
 800b45a:	429c      	cmp	r4, r3
 800b45c:	d101      	bne.n	800b462 <__swsetup_r+0x46>
 800b45e:	68ac      	ldr	r4, [r5, #8]
 800b460:	e7eb      	b.n	800b43a <__swsetup_r+0x1e>
 800b462:	4b24      	ldr	r3, [pc, #144]	; (800b4f4 <__swsetup_r+0xd8>)
 800b464:	429c      	cmp	r4, r3
 800b466:	bf08      	it	eq
 800b468:	68ec      	ldreq	r4, [r5, #12]
 800b46a:	e7e6      	b.n	800b43a <__swsetup_r+0x1e>
 800b46c:	0758      	lsls	r0, r3, #29
 800b46e:	d512      	bpl.n	800b496 <__swsetup_r+0x7a>
 800b470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b472:	b141      	cbz	r1, 800b486 <__swsetup_r+0x6a>
 800b474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b478:	4299      	cmp	r1, r3
 800b47a:	d002      	beq.n	800b482 <__swsetup_r+0x66>
 800b47c:	4630      	mov	r0, r6
 800b47e:	f7ff fb25 	bl	800aacc <_free_r>
 800b482:	2300      	movs	r3, #0
 800b484:	6363      	str	r3, [r4, #52]	; 0x34
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b48c:	81a3      	strh	r3, [r4, #12]
 800b48e:	2300      	movs	r3, #0
 800b490:	6063      	str	r3, [r4, #4]
 800b492:	6923      	ldr	r3, [r4, #16]
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	89a3      	ldrh	r3, [r4, #12]
 800b498:	f043 0308 	orr.w	r3, r3, #8
 800b49c:	81a3      	strh	r3, [r4, #12]
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	b94b      	cbnz	r3, 800b4b6 <__swsetup_r+0x9a>
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4ac:	d003      	beq.n	800b4b6 <__swsetup_r+0x9a>
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f000 fa09 	bl	800b8c8 <__smakebuf_r>
 800b4b6:	89a0      	ldrh	r0, [r4, #12]
 800b4b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4bc:	f010 0301 	ands.w	r3, r0, #1
 800b4c0:	d00a      	beq.n	800b4d8 <__swsetup_r+0xbc>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60a3      	str	r3, [r4, #8]
 800b4c6:	6963      	ldr	r3, [r4, #20]
 800b4c8:	425b      	negs	r3, r3
 800b4ca:	61a3      	str	r3, [r4, #24]
 800b4cc:	6923      	ldr	r3, [r4, #16]
 800b4ce:	b943      	cbnz	r3, 800b4e2 <__swsetup_r+0xc6>
 800b4d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4d4:	d1ba      	bne.n	800b44c <__swsetup_r+0x30>
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}
 800b4d8:	0781      	lsls	r1, r0, #30
 800b4da:	bf58      	it	pl
 800b4dc:	6963      	ldrpl	r3, [r4, #20]
 800b4de:	60a3      	str	r3, [r4, #8]
 800b4e0:	e7f4      	b.n	800b4cc <__swsetup_r+0xb0>
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	e7f7      	b.n	800b4d6 <__swsetup_r+0xba>
 800b4e6:	bf00      	nop
 800b4e8:	20000014 	.word	0x20000014
 800b4ec:	0800c00c 	.word	0x0800c00c
 800b4f0:	0800c02c 	.word	0x0800c02c
 800b4f4:	0800bfec 	.word	0x0800bfec

0800b4f8 <abort>:
 800b4f8:	b508      	push	{r3, lr}
 800b4fa:	2006      	movs	r0, #6
 800b4fc:	f000 fa54 	bl	800b9a8 <raise>
 800b500:	2001      	movs	r0, #1
 800b502:	f7f6 fe23 	bl	800214c <_exit>
	...

0800b508 <__sflush_r>:
 800b508:	898a      	ldrh	r2, [r1, #12]
 800b50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b50e:	4605      	mov	r5, r0
 800b510:	0710      	lsls	r0, r2, #28
 800b512:	460c      	mov	r4, r1
 800b514:	d458      	bmi.n	800b5c8 <__sflush_r+0xc0>
 800b516:	684b      	ldr	r3, [r1, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	dc05      	bgt.n	800b528 <__sflush_r+0x20>
 800b51c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b51e:	2b00      	cmp	r3, #0
 800b520:	dc02      	bgt.n	800b528 <__sflush_r+0x20>
 800b522:	2000      	movs	r0, #0
 800b524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b52a:	2e00      	cmp	r6, #0
 800b52c:	d0f9      	beq.n	800b522 <__sflush_r+0x1a>
 800b52e:	2300      	movs	r3, #0
 800b530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b534:	682f      	ldr	r7, [r5, #0]
 800b536:	602b      	str	r3, [r5, #0]
 800b538:	d032      	beq.n	800b5a0 <__sflush_r+0x98>
 800b53a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	075a      	lsls	r2, r3, #29
 800b540:	d505      	bpl.n	800b54e <__sflush_r+0x46>
 800b542:	6863      	ldr	r3, [r4, #4]
 800b544:	1ac0      	subs	r0, r0, r3
 800b546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b548:	b10b      	cbz	r3, 800b54e <__sflush_r+0x46>
 800b54a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b54c:	1ac0      	subs	r0, r0, r3
 800b54e:	2300      	movs	r3, #0
 800b550:	4602      	mov	r2, r0
 800b552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b554:	6a21      	ldr	r1, [r4, #32]
 800b556:	4628      	mov	r0, r5
 800b558:	47b0      	blx	r6
 800b55a:	1c43      	adds	r3, r0, #1
 800b55c:	89a3      	ldrh	r3, [r4, #12]
 800b55e:	d106      	bne.n	800b56e <__sflush_r+0x66>
 800b560:	6829      	ldr	r1, [r5, #0]
 800b562:	291d      	cmp	r1, #29
 800b564:	d82c      	bhi.n	800b5c0 <__sflush_r+0xb8>
 800b566:	4a2a      	ldr	r2, [pc, #168]	; (800b610 <__sflush_r+0x108>)
 800b568:	40ca      	lsrs	r2, r1
 800b56a:	07d6      	lsls	r6, r2, #31
 800b56c:	d528      	bpl.n	800b5c0 <__sflush_r+0xb8>
 800b56e:	2200      	movs	r2, #0
 800b570:	6062      	str	r2, [r4, #4]
 800b572:	04d9      	lsls	r1, r3, #19
 800b574:	6922      	ldr	r2, [r4, #16]
 800b576:	6022      	str	r2, [r4, #0]
 800b578:	d504      	bpl.n	800b584 <__sflush_r+0x7c>
 800b57a:	1c42      	adds	r2, r0, #1
 800b57c:	d101      	bne.n	800b582 <__sflush_r+0x7a>
 800b57e:	682b      	ldr	r3, [r5, #0]
 800b580:	b903      	cbnz	r3, 800b584 <__sflush_r+0x7c>
 800b582:	6560      	str	r0, [r4, #84]	; 0x54
 800b584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b586:	602f      	str	r7, [r5, #0]
 800b588:	2900      	cmp	r1, #0
 800b58a:	d0ca      	beq.n	800b522 <__sflush_r+0x1a>
 800b58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b590:	4299      	cmp	r1, r3
 800b592:	d002      	beq.n	800b59a <__sflush_r+0x92>
 800b594:	4628      	mov	r0, r5
 800b596:	f7ff fa99 	bl	800aacc <_free_r>
 800b59a:	2000      	movs	r0, #0
 800b59c:	6360      	str	r0, [r4, #52]	; 0x34
 800b59e:	e7c1      	b.n	800b524 <__sflush_r+0x1c>
 800b5a0:	6a21      	ldr	r1, [r4, #32]
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	47b0      	blx	r6
 800b5a8:	1c41      	adds	r1, r0, #1
 800b5aa:	d1c7      	bne.n	800b53c <__sflush_r+0x34>
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d0c4      	beq.n	800b53c <__sflush_r+0x34>
 800b5b2:	2b1d      	cmp	r3, #29
 800b5b4:	d001      	beq.n	800b5ba <__sflush_r+0xb2>
 800b5b6:	2b16      	cmp	r3, #22
 800b5b8:	d101      	bne.n	800b5be <__sflush_r+0xb6>
 800b5ba:	602f      	str	r7, [r5, #0]
 800b5bc:	e7b1      	b.n	800b522 <__sflush_r+0x1a>
 800b5be:	89a3      	ldrh	r3, [r4, #12]
 800b5c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5c4:	81a3      	strh	r3, [r4, #12]
 800b5c6:	e7ad      	b.n	800b524 <__sflush_r+0x1c>
 800b5c8:	690f      	ldr	r7, [r1, #16]
 800b5ca:	2f00      	cmp	r7, #0
 800b5cc:	d0a9      	beq.n	800b522 <__sflush_r+0x1a>
 800b5ce:	0793      	lsls	r3, r2, #30
 800b5d0:	680e      	ldr	r6, [r1, #0]
 800b5d2:	bf08      	it	eq
 800b5d4:	694b      	ldreq	r3, [r1, #20]
 800b5d6:	600f      	str	r7, [r1, #0]
 800b5d8:	bf18      	it	ne
 800b5da:	2300      	movne	r3, #0
 800b5dc:	eba6 0807 	sub.w	r8, r6, r7
 800b5e0:	608b      	str	r3, [r1, #8]
 800b5e2:	f1b8 0f00 	cmp.w	r8, #0
 800b5e6:	dd9c      	ble.n	800b522 <__sflush_r+0x1a>
 800b5e8:	6a21      	ldr	r1, [r4, #32]
 800b5ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5ec:	4643      	mov	r3, r8
 800b5ee:	463a      	mov	r2, r7
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	47b0      	blx	r6
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	dc06      	bgt.n	800b606 <__sflush_r+0xfe>
 800b5f8:	89a3      	ldrh	r3, [r4, #12]
 800b5fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5fe:	81a3      	strh	r3, [r4, #12]
 800b600:	f04f 30ff 	mov.w	r0, #4294967295
 800b604:	e78e      	b.n	800b524 <__sflush_r+0x1c>
 800b606:	4407      	add	r7, r0
 800b608:	eba8 0800 	sub.w	r8, r8, r0
 800b60c:	e7e9      	b.n	800b5e2 <__sflush_r+0xda>
 800b60e:	bf00      	nop
 800b610:	20400001 	.word	0x20400001

0800b614 <_fflush_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	690b      	ldr	r3, [r1, #16]
 800b618:	4605      	mov	r5, r0
 800b61a:	460c      	mov	r4, r1
 800b61c:	b913      	cbnz	r3, 800b624 <_fflush_r+0x10>
 800b61e:	2500      	movs	r5, #0
 800b620:	4628      	mov	r0, r5
 800b622:	bd38      	pop	{r3, r4, r5, pc}
 800b624:	b118      	cbz	r0, 800b62e <_fflush_r+0x1a>
 800b626:	6983      	ldr	r3, [r0, #24]
 800b628:	b90b      	cbnz	r3, 800b62e <_fflush_r+0x1a>
 800b62a:	f000 f887 	bl	800b73c <__sinit>
 800b62e:	4b14      	ldr	r3, [pc, #80]	; (800b680 <_fflush_r+0x6c>)
 800b630:	429c      	cmp	r4, r3
 800b632:	d11b      	bne.n	800b66c <_fflush_r+0x58>
 800b634:	686c      	ldr	r4, [r5, #4]
 800b636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d0ef      	beq.n	800b61e <_fflush_r+0xa>
 800b63e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b640:	07d0      	lsls	r0, r2, #31
 800b642:	d404      	bmi.n	800b64e <_fflush_r+0x3a>
 800b644:	0599      	lsls	r1, r3, #22
 800b646:	d402      	bmi.n	800b64e <_fflush_r+0x3a>
 800b648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b64a:	f000 f915 	bl	800b878 <__retarget_lock_acquire_recursive>
 800b64e:	4628      	mov	r0, r5
 800b650:	4621      	mov	r1, r4
 800b652:	f7ff ff59 	bl	800b508 <__sflush_r>
 800b656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b658:	07da      	lsls	r2, r3, #31
 800b65a:	4605      	mov	r5, r0
 800b65c:	d4e0      	bmi.n	800b620 <_fflush_r+0xc>
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	059b      	lsls	r3, r3, #22
 800b662:	d4dd      	bmi.n	800b620 <_fflush_r+0xc>
 800b664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b666:	f000 f908 	bl	800b87a <__retarget_lock_release_recursive>
 800b66a:	e7d9      	b.n	800b620 <_fflush_r+0xc>
 800b66c:	4b05      	ldr	r3, [pc, #20]	; (800b684 <_fflush_r+0x70>)
 800b66e:	429c      	cmp	r4, r3
 800b670:	d101      	bne.n	800b676 <_fflush_r+0x62>
 800b672:	68ac      	ldr	r4, [r5, #8]
 800b674:	e7df      	b.n	800b636 <_fflush_r+0x22>
 800b676:	4b04      	ldr	r3, [pc, #16]	; (800b688 <_fflush_r+0x74>)
 800b678:	429c      	cmp	r4, r3
 800b67a:	bf08      	it	eq
 800b67c:	68ec      	ldreq	r4, [r5, #12]
 800b67e:	e7da      	b.n	800b636 <_fflush_r+0x22>
 800b680:	0800c00c 	.word	0x0800c00c
 800b684:	0800c02c 	.word	0x0800c02c
 800b688:	0800bfec 	.word	0x0800bfec

0800b68c <std>:
 800b68c:	2300      	movs	r3, #0
 800b68e:	b510      	push	{r4, lr}
 800b690:	4604      	mov	r4, r0
 800b692:	e9c0 3300 	strd	r3, r3, [r0]
 800b696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b69a:	6083      	str	r3, [r0, #8]
 800b69c:	8181      	strh	r1, [r0, #12]
 800b69e:	6643      	str	r3, [r0, #100]	; 0x64
 800b6a0:	81c2      	strh	r2, [r0, #14]
 800b6a2:	6183      	str	r3, [r0, #24]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	2208      	movs	r2, #8
 800b6a8:	305c      	adds	r0, #92	; 0x5c
 800b6aa:	f7fb fdcb 	bl	8007244 <memset>
 800b6ae:	4b05      	ldr	r3, [pc, #20]	; (800b6c4 <std+0x38>)
 800b6b0:	6263      	str	r3, [r4, #36]	; 0x24
 800b6b2:	4b05      	ldr	r3, [pc, #20]	; (800b6c8 <std+0x3c>)
 800b6b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6b6:	4b05      	ldr	r3, [pc, #20]	; (800b6cc <std+0x40>)
 800b6b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6ba:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <std+0x44>)
 800b6bc:	6224      	str	r4, [r4, #32]
 800b6be:	6323      	str	r3, [r4, #48]	; 0x30
 800b6c0:	bd10      	pop	{r4, pc}
 800b6c2:	bf00      	nop
 800b6c4:	0800b9e1 	.word	0x0800b9e1
 800b6c8:	0800ba03 	.word	0x0800ba03
 800b6cc:	0800ba3b 	.word	0x0800ba3b
 800b6d0:	0800ba5f 	.word	0x0800ba5f

0800b6d4 <_cleanup_r>:
 800b6d4:	4901      	ldr	r1, [pc, #4]	; (800b6dc <_cleanup_r+0x8>)
 800b6d6:	f000 b8af 	b.w	800b838 <_fwalk_reent>
 800b6da:	bf00      	nop
 800b6dc:	0800b615 	.word	0x0800b615

0800b6e0 <__sfmoreglue>:
 800b6e0:	b570      	push	{r4, r5, r6, lr}
 800b6e2:	2268      	movs	r2, #104	; 0x68
 800b6e4:	1e4d      	subs	r5, r1, #1
 800b6e6:	4355      	muls	r5, r2
 800b6e8:	460e      	mov	r6, r1
 800b6ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b6ee:	f7ff fa59 	bl	800aba4 <_malloc_r>
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	b140      	cbz	r0, 800b708 <__sfmoreglue+0x28>
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	e9c0 1600 	strd	r1, r6, [r0]
 800b6fc:	300c      	adds	r0, #12
 800b6fe:	60a0      	str	r0, [r4, #8]
 800b700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b704:	f7fb fd9e 	bl	8007244 <memset>
 800b708:	4620      	mov	r0, r4
 800b70a:	bd70      	pop	{r4, r5, r6, pc}

0800b70c <__sfp_lock_acquire>:
 800b70c:	4801      	ldr	r0, [pc, #4]	; (800b714 <__sfp_lock_acquire+0x8>)
 800b70e:	f000 b8b3 	b.w	800b878 <__retarget_lock_acquire_recursive>
 800b712:	bf00      	nop
 800b714:	2000048d 	.word	0x2000048d

0800b718 <__sfp_lock_release>:
 800b718:	4801      	ldr	r0, [pc, #4]	; (800b720 <__sfp_lock_release+0x8>)
 800b71a:	f000 b8ae 	b.w	800b87a <__retarget_lock_release_recursive>
 800b71e:	bf00      	nop
 800b720:	2000048d 	.word	0x2000048d

0800b724 <__sinit_lock_acquire>:
 800b724:	4801      	ldr	r0, [pc, #4]	; (800b72c <__sinit_lock_acquire+0x8>)
 800b726:	f000 b8a7 	b.w	800b878 <__retarget_lock_acquire_recursive>
 800b72a:	bf00      	nop
 800b72c:	2000048e 	.word	0x2000048e

0800b730 <__sinit_lock_release>:
 800b730:	4801      	ldr	r0, [pc, #4]	; (800b738 <__sinit_lock_release+0x8>)
 800b732:	f000 b8a2 	b.w	800b87a <__retarget_lock_release_recursive>
 800b736:	bf00      	nop
 800b738:	2000048e 	.word	0x2000048e

0800b73c <__sinit>:
 800b73c:	b510      	push	{r4, lr}
 800b73e:	4604      	mov	r4, r0
 800b740:	f7ff fff0 	bl	800b724 <__sinit_lock_acquire>
 800b744:	69a3      	ldr	r3, [r4, #24]
 800b746:	b11b      	cbz	r3, 800b750 <__sinit+0x14>
 800b748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b74c:	f7ff bff0 	b.w	800b730 <__sinit_lock_release>
 800b750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b754:	6523      	str	r3, [r4, #80]	; 0x50
 800b756:	4b13      	ldr	r3, [pc, #76]	; (800b7a4 <__sinit+0x68>)
 800b758:	4a13      	ldr	r2, [pc, #76]	; (800b7a8 <__sinit+0x6c>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b75e:	42a3      	cmp	r3, r4
 800b760:	bf04      	itt	eq
 800b762:	2301      	moveq	r3, #1
 800b764:	61a3      	streq	r3, [r4, #24]
 800b766:	4620      	mov	r0, r4
 800b768:	f000 f820 	bl	800b7ac <__sfp>
 800b76c:	6060      	str	r0, [r4, #4]
 800b76e:	4620      	mov	r0, r4
 800b770:	f000 f81c 	bl	800b7ac <__sfp>
 800b774:	60a0      	str	r0, [r4, #8]
 800b776:	4620      	mov	r0, r4
 800b778:	f000 f818 	bl	800b7ac <__sfp>
 800b77c:	2200      	movs	r2, #0
 800b77e:	60e0      	str	r0, [r4, #12]
 800b780:	2104      	movs	r1, #4
 800b782:	6860      	ldr	r0, [r4, #4]
 800b784:	f7ff ff82 	bl	800b68c <std>
 800b788:	68a0      	ldr	r0, [r4, #8]
 800b78a:	2201      	movs	r2, #1
 800b78c:	2109      	movs	r1, #9
 800b78e:	f7ff ff7d 	bl	800b68c <std>
 800b792:	68e0      	ldr	r0, [r4, #12]
 800b794:	2202      	movs	r2, #2
 800b796:	2112      	movs	r1, #18
 800b798:	f7ff ff78 	bl	800b68c <std>
 800b79c:	2301      	movs	r3, #1
 800b79e:	61a3      	str	r3, [r4, #24]
 800b7a0:	e7d2      	b.n	800b748 <__sinit+0xc>
 800b7a2:	bf00      	nop
 800b7a4:	0800bba4 	.word	0x0800bba4
 800b7a8:	0800b6d5 	.word	0x0800b6d5

0800b7ac <__sfp>:
 800b7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ae:	4607      	mov	r7, r0
 800b7b0:	f7ff ffac 	bl	800b70c <__sfp_lock_acquire>
 800b7b4:	4b1e      	ldr	r3, [pc, #120]	; (800b830 <__sfp+0x84>)
 800b7b6:	681e      	ldr	r6, [r3, #0]
 800b7b8:	69b3      	ldr	r3, [r6, #24]
 800b7ba:	b913      	cbnz	r3, 800b7c2 <__sfp+0x16>
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f7ff ffbd 	bl	800b73c <__sinit>
 800b7c2:	3648      	adds	r6, #72	; 0x48
 800b7c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	d503      	bpl.n	800b7d4 <__sfp+0x28>
 800b7cc:	6833      	ldr	r3, [r6, #0]
 800b7ce:	b30b      	cbz	r3, 800b814 <__sfp+0x68>
 800b7d0:	6836      	ldr	r6, [r6, #0]
 800b7d2:	e7f7      	b.n	800b7c4 <__sfp+0x18>
 800b7d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7d8:	b9d5      	cbnz	r5, 800b810 <__sfp+0x64>
 800b7da:	4b16      	ldr	r3, [pc, #88]	; (800b834 <__sfp+0x88>)
 800b7dc:	60e3      	str	r3, [r4, #12]
 800b7de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7e2:	6665      	str	r5, [r4, #100]	; 0x64
 800b7e4:	f000 f847 	bl	800b876 <__retarget_lock_init_recursive>
 800b7e8:	f7ff ff96 	bl	800b718 <__sfp_lock_release>
 800b7ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b7f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b7f4:	6025      	str	r5, [r4, #0]
 800b7f6:	61a5      	str	r5, [r4, #24]
 800b7f8:	2208      	movs	r2, #8
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b800:	f7fb fd20 	bl	8007244 <memset>
 800b804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b80c:	4620      	mov	r0, r4
 800b80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b810:	3468      	adds	r4, #104	; 0x68
 800b812:	e7d9      	b.n	800b7c8 <__sfp+0x1c>
 800b814:	2104      	movs	r1, #4
 800b816:	4638      	mov	r0, r7
 800b818:	f7ff ff62 	bl	800b6e0 <__sfmoreglue>
 800b81c:	4604      	mov	r4, r0
 800b81e:	6030      	str	r0, [r6, #0]
 800b820:	2800      	cmp	r0, #0
 800b822:	d1d5      	bne.n	800b7d0 <__sfp+0x24>
 800b824:	f7ff ff78 	bl	800b718 <__sfp_lock_release>
 800b828:	230c      	movs	r3, #12
 800b82a:	603b      	str	r3, [r7, #0]
 800b82c:	e7ee      	b.n	800b80c <__sfp+0x60>
 800b82e:	bf00      	nop
 800b830:	0800bba4 	.word	0x0800bba4
 800b834:	ffff0001 	.word	0xffff0001

0800b838 <_fwalk_reent>:
 800b838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b83c:	4606      	mov	r6, r0
 800b83e:	4688      	mov	r8, r1
 800b840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b844:	2700      	movs	r7, #0
 800b846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b84a:	f1b9 0901 	subs.w	r9, r9, #1
 800b84e:	d505      	bpl.n	800b85c <_fwalk_reent+0x24>
 800b850:	6824      	ldr	r4, [r4, #0]
 800b852:	2c00      	cmp	r4, #0
 800b854:	d1f7      	bne.n	800b846 <_fwalk_reent+0xe>
 800b856:	4638      	mov	r0, r7
 800b858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b85c:	89ab      	ldrh	r3, [r5, #12]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d907      	bls.n	800b872 <_fwalk_reent+0x3a>
 800b862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b866:	3301      	adds	r3, #1
 800b868:	d003      	beq.n	800b872 <_fwalk_reent+0x3a>
 800b86a:	4629      	mov	r1, r5
 800b86c:	4630      	mov	r0, r6
 800b86e:	47c0      	blx	r8
 800b870:	4307      	orrs	r7, r0
 800b872:	3568      	adds	r5, #104	; 0x68
 800b874:	e7e9      	b.n	800b84a <_fwalk_reent+0x12>

0800b876 <__retarget_lock_init_recursive>:
 800b876:	4770      	bx	lr

0800b878 <__retarget_lock_acquire_recursive>:
 800b878:	4770      	bx	lr

0800b87a <__retarget_lock_release_recursive>:
 800b87a:	4770      	bx	lr

0800b87c <__swhatbuf_r>:
 800b87c:	b570      	push	{r4, r5, r6, lr}
 800b87e:	460e      	mov	r6, r1
 800b880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b884:	2900      	cmp	r1, #0
 800b886:	b096      	sub	sp, #88	; 0x58
 800b888:	4614      	mov	r4, r2
 800b88a:	461d      	mov	r5, r3
 800b88c:	da08      	bge.n	800b8a0 <__swhatbuf_r+0x24>
 800b88e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	602a      	str	r2, [r5, #0]
 800b896:	061a      	lsls	r2, r3, #24
 800b898:	d410      	bmi.n	800b8bc <__swhatbuf_r+0x40>
 800b89a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b89e:	e00e      	b.n	800b8be <__swhatbuf_r+0x42>
 800b8a0:	466a      	mov	r2, sp
 800b8a2:	f000 f903 	bl	800baac <_fstat_r>
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	dbf1      	blt.n	800b88e <__swhatbuf_r+0x12>
 800b8aa:	9a01      	ldr	r2, [sp, #4]
 800b8ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8b4:	425a      	negs	r2, r3
 800b8b6:	415a      	adcs	r2, r3
 800b8b8:	602a      	str	r2, [r5, #0]
 800b8ba:	e7ee      	b.n	800b89a <__swhatbuf_r+0x1e>
 800b8bc:	2340      	movs	r3, #64	; 0x40
 800b8be:	2000      	movs	r0, #0
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	b016      	add	sp, #88	; 0x58
 800b8c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8c8 <__smakebuf_r>:
 800b8c8:	898b      	ldrh	r3, [r1, #12]
 800b8ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8cc:	079d      	lsls	r5, r3, #30
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	d507      	bpl.n	800b8e4 <__smakebuf_r+0x1c>
 800b8d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	6123      	str	r3, [r4, #16]
 800b8dc:	2301      	movs	r3, #1
 800b8de:	6163      	str	r3, [r4, #20]
 800b8e0:	b002      	add	sp, #8
 800b8e2:	bd70      	pop	{r4, r5, r6, pc}
 800b8e4:	ab01      	add	r3, sp, #4
 800b8e6:	466a      	mov	r2, sp
 800b8e8:	f7ff ffc8 	bl	800b87c <__swhatbuf_r>
 800b8ec:	9900      	ldr	r1, [sp, #0]
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f7ff f957 	bl	800aba4 <_malloc_r>
 800b8f6:	b948      	cbnz	r0, 800b90c <__smakebuf_r+0x44>
 800b8f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8fc:	059a      	lsls	r2, r3, #22
 800b8fe:	d4ef      	bmi.n	800b8e0 <__smakebuf_r+0x18>
 800b900:	f023 0303 	bic.w	r3, r3, #3
 800b904:	f043 0302 	orr.w	r3, r3, #2
 800b908:	81a3      	strh	r3, [r4, #12]
 800b90a:	e7e3      	b.n	800b8d4 <__smakebuf_r+0xc>
 800b90c:	4b0d      	ldr	r3, [pc, #52]	; (800b944 <__smakebuf_r+0x7c>)
 800b90e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b910:	89a3      	ldrh	r3, [r4, #12]
 800b912:	6020      	str	r0, [r4, #0]
 800b914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b918:	81a3      	strh	r3, [r4, #12]
 800b91a:	9b00      	ldr	r3, [sp, #0]
 800b91c:	6163      	str	r3, [r4, #20]
 800b91e:	9b01      	ldr	r3, [sp, #4]
 800b920:	6120      	str	r0, [r4, #16]
 800b922:	b15b      	cbz	r3, 800b93c <__smakebuf_r+0x74>
 800b924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b928:	4630      	mov	r0, r6
 800b92a:	f000 f8d1 	bl	800bad0 <_isatty_r>
 800b92e:	b128      	cbz	r0, 800b93c <__smakebuf_r+0x74>
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	f023 0303 	bic.w	r3, r3, #3
 800b936:	f043 0301 	orr.w	r3, r3, #1
 800b93a:	81a3      	strh	r3, [r4, #12]
 800b93c:	89a0      	ldrh	r0, [r4, #12]
 800b93e:	4305      	orrs	r5, r0
 800b940:	81a5      	strh	r5, [r4, #12]
 800b942:	e7cd      	b.n	800b8e0 <__smakebuf_r+0x18>
 800b944:	0800b6d5 	.word	0x0800b6d5

0800b948 <_malloc_usable_size_r>:
 800b948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b94c:	1f18      	subs	r0, r3, #4
 800b94e:	2b00      	cmp	r3, #0
 800b950:	bfbc      	itt	lt
 800b952:	580b      	ldrlt	r3, [r1, r0]
 800b954:	18c0      	addlt	r0, r0, r3
 800b956:	4770      	bx	lr

0800b958 <_raise_r>:
 800b958:	291f      	cmp	r1, #31
 800b95a:	b538      	push	{r3, r4, r5, lr}
 800b95c:	4604      	mov	r4, r0
 800b95e:	460d      	mov	r5, r1
 800b960:	d904      	bls.n	800b96c <_raise_r+0x14>
 800b962:	2316      	movs	r3, #22
 800b964:	6003      	str	r3, [r0, #0]
 800b966:	f04f 30ff 	mov.w	r0, #4294967295
 800b96a:	bd38      	pop	{r3, r4, r5, pc}
 800b96c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b96e:	b112      	cbz	r2, 800b976 <_raise_r+0x1e>
 800b970:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b974:	b94b      	cbnz	r3, 800b98a <_raise_r+0x32>
 800b976:	4620      	mov	r0, r4
 800b978:	f000 f830 	bl	800b9dc <_getpid_r>
 800b97c:	462a      	mov	r2, r5
 800b97e:	4601      	mov	r1, r0
 800b980:	4620      	mov	r0, r4
 800b982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b986:	f000 b817 	b.w	800b9b8 <_kill_r>
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d00a      	beq.n	800b9a4 <_raise_r+0x4c>
 800b98e:	1c59      	adds	r1, r3, #1
 800b990:	d103      	bne.n	800b99a <_raise_r+0x42>
 800b992:	2316      	movs	r3, #22
 800b994:	6003      	str	r3, [r0, #0]
 800b996:	2001      	movs	r0, #1
 800b998:	e7e7      	b.n	800b96a <_raise_r+0x12>
 800b99a:	2400      	movs	r4, #0
 800b99c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	4798      	blx	r3
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	e7e0      	b.n	800b96a <_raise_r+0x12>

0800b9a8 <raise>:
 800b9a8:	4b02      	ldr	r3, [pc, #8]	; (800b9b4 <raise+0xc>)
 800b9aa:	4601      	mov	r1, r0
 800b9ac:	6818      	ldr	r0, [r3, #0]
 800b9ae:	f7ff bfd3 	b.w	800b958 <_raise_r>
 800b9b2:	bf00      	nop
 800b9b4:	20000014 	.word	0x20000014

0800b9b8 <_kill_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	4d07      	ldr	r5, [pc, #28]	; (800b9d8 <_kill_r+0x20>)
 800b9bc:	2300      	movs	r3, #0
 800b9be:	4604      	mov	r4, r0
 800b9c0:	4608      	mov	r0, r1
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	602b      	str	r3, [r5, #0]
 800b9c6:	f7f6 fbb1 	bl	800212c <_kill>
 800b9ca:	1c43      	adds	r3, r0, #1
 800b9cc:	d102      	bne.n	800b9d4 <_kill_r+0x1c>
 800b9ce:	682b      	ldr	r3, [r5, #0]
 800b9d0:	b103      	cbz	r3, 800b9d4 <_kill_r+0x1c>
 800b9d2:	6023      	str	r3, [r4, #0]
 800b9d4:	bd38      	pop	{r3, r4, r5, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20000488 	.word	0x20000488

0800b9dc <_getpid_r>:
 800b9dc:	f7f6 bb9e 	b.w	800211c <_getpid>

0800b9e0 <__sread>:
 800b9e0:	b510      	push	{r4, lr}
 800b9e2:	460c      	mov	r4, r1
 800b9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e8:	f000 f894 	bl	800bb14 <_read_r>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	bfab      	itete	ge
 800b9f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9f2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9f4:	181b      	addge	r3, r3, r0
 800b9f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9fa:	bfac      	ite	ge
 800b9fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9fe:	81a3      	strhlt	r3, [r4, #12]
 800ba00:	bd10      	pop	{r4, pc}

0800ba02 <__swrite>:
 800ba02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba06:	461f      	mov	r7, r3
 800ba08:	898b      	ldrh	r3, [r1, #12]
 800ba0a:	05db      	lsls	r3, r3, #23
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	460c      	mov	r4, r1
 800ba10:	4616      	mov	r6, r2
 800ba12:	d505      	bpl.n	800ba20 <__swrite+0x1e>
 800ba14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba18:	2302      	movs	r3, #2
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f000 f868 	bl	800baf0 <_lseek_r>
 800ba20:	89a3      	ldrh	r3, [r4, #12]
 800ba22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba2a:	81a3      	strh	r3, [r4, #12]
 800ba2c:	4632      	mov	r2, r6
 800ba2e:	463b      	mov	r3, r7
 800ba30:	4628      	mov	r0, r5
 800ba32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba36:	f000 b817 	b.w	800ba68 <_write_r>

0800ba3a <__sseek>:
 800ba3a:	b510      	push	{r4, lr}
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba42:	f000 f855 	bl	800baf0 <_lseek_r>
 800ba46:	1c43      	adds	r3, r0, #1
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	bf15      	itete	ne
 800ba4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba56:	81a3      	strheq	r3, [r4, #12]
 800ba58:	bf18      	it	ne
 800ba5a:	81a3      	strhne	r3, [r4, #12]
 800ba5c:	bd10      	pop	{r4, pc}

0800ba5e <__sclose>:
 800ba5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba62:	f000 b813 	b.w	800ba8c <_close_r>
	...

0800ba68 <_write_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4d07      	ldr	r5, [pc, #28]	; (800ba88 <_write_r+0x20>)
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	4608      	mov	r0, r1
 800ba70:	4611      	mov	r1, r2
 800ba72:	2200      	movs	r2, #0
 800ba74:	602a      	str	r2, [r5, #0]
 800ba76:	461a      	mov	r2, r3
 800ba78:	f7f6 fb8f 	bl	800219a <_write>
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	d102      	bne.n	800ba86 <_write_r+0x1e>
 800ba80:	682b      	ldr	r3, [r5, #0]
 800ba82:	b103      	cbz	r3, 800ba86 <_write_r+0x1e>
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	20000488 	.word	0x20000488

0800ba8c <_close_r>:
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	4d06      	ldr	r5, [pc, #24]	; (800baa8 <_close_r+0x1c>)
 800ba90:	2300      	movs	r3, #0
 800ba92:	4604      	mov	r4, r0
 800ba94:	4608      	mov	r0, r1
 800ba96:	602b      	str	r3, [r5, #0]
 800ba98:	f7f6 fb9b 	bl	80021d2 <_close>
 800ba9c:	1c43      	adds	r3, r0, #1
 800ba9e:	d102      	bne.n	800baa6 <_close_r+0x1a>
 800baa0:	682b      	ldr	r3, [r5, #0]
 800baa2:	b103      	cbz	r3, 800baa6 <_close_r+0x1a>
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	bd38      	pop	{r3, r4, r5, pc}
 800baa8:	20000488 	.word	0x20000488

0800baac <_fstat_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	4d07      	ldr	r5, [pc, #28]	; (800bacc <_fstat_r+0x20>)
 800bab0:	2300      	movs	r3, #0
 800bab2:	4604      	mov	r4, r0
 800bab4:	4608      	mov	r0, r1
 800bab6:	4611      	mov	r1, r2
 800bab8:	602b      	str	r3, [r5, #0]
 800baba:	f7f6 fb96 	bl	80021ea <_fstat>
 800babe:	1c43      	adds	r3, r0, #1
 800bac0:	d102      	bne.n	800bac8 <_fstat_r+0x1c>
 800bac2:	682b      	ldr	r3, [r5, #0]
 800bac4:	b103      	cbz	r3, 800bac8 <_fstat_r+0x1c>
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	bd38      	pop	{r3, r4, r5, pc}
 800baca:	bf00      	nop
 800bacc:	20000488 	.word	0x20000488

0800bad0 <_isatty_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4d06      	ldr	r5, [pc, #24]	; (800baec <_isatty_r+0x1c>)
 800bad4:	2300      	movs	r3, #0
 800bad6:	4604      	mov	r4, r0
 800bad8:	4608      	mov	r0, r1
 800bada:	602b      	str	r3, [r5, #0]
 800badc:	f7f6 fb95 	bl	800220a <_isatty>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_isatty_r+0x1a>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b103      	cbz	r3, 800baea <_isatty_r+0x1a>
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	20000488 	.word	0x20000488

0800baf0 <_lseek_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d07      	ldr	r5, [pc, #28]	; (800bb10 <_lseek_r+0x20>)
 800baf4:	4604      	mov	r4, r0
 800baf6:	4608      	mov	r0, r1
 800baf8:	4611      	mov	r1, r2
 800bafa:	2200      	movs	r2, #0
 800bafc:	602a      	str	r2, [r5, #0]
 800bafe:	461a      	mov	r2, r3
 800bb00:	f7f6 fb8e 	bl	8002220 <_lseek>
 800bb04:	1c43      	adds	r3, r0, #1
 800bb06:	d102      	bne.n	800bb0e <_lseek_r+0x1e>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	b103      	cbz	r3, 800bb0e <_lseek_r+0x1e>
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	bd38      	pop	{r3, r4, r5, pc}
 800bb10:	20000488 	.word	0x20000488

0800bb14 <_read_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4d07      	ldr	r5, [pc, #28]	; (800bb34 <_read_r+0x20>)
 800bb18:	4604      	mov	r4, r0
 800bb1a:	4608      	mov	r0, r1
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	2200      	movs	r2, #0
 800bb20:	602a      	str	r2, [r5, #0]
 800bb22:	461a      	mov	r2, r3
 800bb24:	f7f6 fb1c 	bl	8002160 <_read>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d102      	bne.n	800bb32 <_read_r+0x1e>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	b103      	cbz	r3, 800bb32 <_read_r+0x1e>
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	20000488 	.word	0x20000488

0800bb38 <_init>:
 800bb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3a:	bf00      	nop
 800bb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb3e:	bc08      	pop	{r3}
 800bb40:	469e      	mov	lr, r3
 800bb42:	4770      	bx	lr

0800bb44 <_fini>:
 800bb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb46:	bf00      	nop
 800bb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb4a:	bc08      	pop	{r3}
 800bb4c:	469e      	mov	lr, r3
 800bb4e:	4770      	bx	lr
